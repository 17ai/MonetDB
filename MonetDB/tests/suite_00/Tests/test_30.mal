# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
	_v0:= oid(20000000);
	_v1:= setoid(_v0);
#setoid(oid(20000000));
### testing transitive closure on cyclic graph;
##module("oo7");
##module("alarm");
#
	_v2:= new(int,int);
	c := _v2;
#c:= new(int,int);
	_v3:= insert(c,1,2);
#insert(c,1,2);
	_v4:= insert(c,2,3);
#insert(c,2,3);
	_v5:= insert(c,2,7);
#insert(c,2,7);
	_v6:= insert(c,3,4);
#insert(c,3,4);
	_v7:= insert(c,4,5);
#insert(c,4,5);
	_v8:= insert(c,5,1);
#insert(c,5,1);
	_v9:= count(c);
	_v10:= print(_v9);
#count(c).print;
	_v11:= closure(c);
	d := _v11;
#d:= closure(c);
	_v12:= count(d);
	_v13:= print(_v12);
#count(d).print;
	_v14:= print(d);
#print(d);
### testing traversal on directed acyclic graph
### produces the end-points only
	_v15:= new(int,int);
	c := _v15;
#c:= new(int,int);
	_v16:= insert(c,1,2);
#insert(c,1,2);
	_v17:= insert(c,2,3);
#insert(c,2,3);
	_v18:= insert(c,2,7);
#insert(c,2,7);
	_v19:= insert(c,3,4);
#insert(c,3,4);
	_v20:= insert(c,4,5);
#insert(c,4,5);
	_v21:= insert(c,3,5);
#insert(c,3,5);
	_v22:= count(c);
	_v23:= print(_v22);
#count(c).print;
	_v24:= new(int,int);
	d := _v24;
#d:= new(int,int);
	_v25:= insert(d,1,1);
#d.insert(1,1);
	_v26:= traverse(d,c);
	_v27:= print(_v26);
#d.traverse(c).print;
	_v28:= clear(d);
#d.clear;
	_v29:= insert(d,2,3);
#d.insert(2,3);
	_v30:= traverse(d,c);
	_v31:= print(_v30);
#d.traverse(c).print;
### The alternative is to extract a subgraph
	_v32:= clear(d);
#d.clear;
	_v33:= insert(d,2,2);
#d.insert(2,2);
	_v34:= printf("#~BeginVariableOutput~#\n");
	_v35:= print(time);
	_v36:= subgraph(d,c);
	z := _v36;
	_v37:= print(time);
	_v38:= printf("#~EndVariableOutput~#\n");
#printf("#~BeginVariableOutput~#\n"); time.print; z:=d.subgraph(c); time.print; printf("#~EndVariableOutput~#\n");
	_v39:= print(z);
#z.print;
	_v40:= clear(d);
#d.clear;
	_v41:= insert(d,2,2);
#d.insert(2,2);
	_v42:= insert(d,3,3);
#d.insert(3,3);
	_v43:= printf("#~BeginVariableOutput~#\n");
	_v44:= print(time);
	_v45:= subgraph(d,c);
	z := _v45;
	_v46:= print(time);
	_v47:= printf("#~EndVariableOutput~#\n");
#printf("#~BeginVariableOutput~#\n"); time.print; z:=d.subgraph(c); time.print; printf("#~EndVariableOutput~#\n");
	_v48:= print(z);
#z.print;
#quit;
