# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
	_v0:= oid(20000000);
	_v1:= setoid(_v0);
#setoid(oid(20000000));
##test basic functionality of the BAT library.
##focussed on float
##it includes insertions,deletions,selections, and joins.
#
	_v2:= print(3.147);
#print(3.147);
#
	_v3:= new(flt,flt);
	b := _v3;
#b:= new(flt,flt);
	_v4:= insert(b,1.2,15.6);
#b.insert(1.2, 15.6);
	_v5:= insert(b,2.3,4.5);
#b.insert(2.3, 4.5);
	_v6:= flt(nil);
	_v7:= insert(b,3.0,_v6);
#b.insert(3.0, flt(nil));
	_v8:= insert(b,4.5,16.7);
#b.insert(4.5, 16.7);
	_v9:= insert(b,5.6,25.6);
#b.insert(5.6, 25.6);
	_v10:= insert(b,6.6,36.7);
#b.insert(6.6, 36.7);
	_v11:= insert(b,7.8,49.0);
#b.insert(7.8, 49.0);
	_v12:= insert(b,8.9,64.5);
#b.insert(8.9, 64.5);
	_v13:= flt(nil);
	_v14:= insert(b,9.0,_v13);
#b.insert(9.0, flt(nil));
	_v15:= flt(nil);
	_v16:= flt(nil);
	_v17:= insert(b,_v15,_v16);
#b.insert(flt(nil),flt(nil));
	_v18:= flt(nil);
	_v19:= insert(b,_v18,81.2);
#b.insert(flt(nil),81.2);
	_v20:= print(b);
#b.print;
#
#
## Testing simple retrievals
	_v21:= find(b,1.2);
	_v22:= print(_v21);
#b.find(1.2).print;
	_v23:= find(b,4.5);
	_v24:= print(_v23);
#b.find(4.5).print;
	_v25:= flt(nil);
	_v26:= find(b,_v25);
	_v27:= print(_v26);
#b.find(flt(nil)).print;
## This should cause an error
	_v28:= find(b,10.1);
	_v29:= print(_v28);
#b.find(10.1).print;
#
## Can we delete them and re-insert them later on
	_v30:= delete(b,4.5,16.7);
#b.delete(4.5, 16.7);
	_v31:= delete(b,1.2,15.6);
#b.delete(1.2, 15.6);
	_v32:= flt(nil);
	_v33:= delete(b,_v32,81.2);
#b.delete(flt(nil),81.2);
	_v34:= print(b);
#b.print;
#
	_v35:= insert(b,4.5,16.7);
#b.insert(4.5, 16.7);
	_v36:= insert(b,1.2,15.6);
#b.insert(1.2, 15.6);
	_v37:= flt(nil);
	_v38:= insert(b,_v37,81.2);
#b.insert(flt(nil),81.2);
	_v39:= count(b);
	_v40:= print(_v39);
#b.count.print;
#
## Lets cut out a few sections
	_v41:= select(b,25.6,64.5);
	_v42:= print(_v41);
#b.select(25.6,64.5).print;
	_v43:= select(b,4.5,15.6);
	_v44:= print(_v43);
#b.select(4.5,15.6).print;
	_v45:= select(b,4.5,4.5);
	_v46:= print(_v45);
#b.select(4.5,4.5).print;
## This should cause an error
	_v47:= select(b,4.5,3.4);
	_v48:= print(_v47);
#b.select(4.5,3.4).print;
	_v49:= flt(nil);
	_v50:= select(b,81.2,_v49);
	_v51:= print(_v50);
#b.select(81.2,flt(nil)).print;
	_v52:= flt(nil);
	_v53:= flt(nil);
	_v54:= select(b,_v52,_v53);
	_v55:= print(_v54);
#b.select(flt(nil),flt(nil)).print;
#
## A 2-dimensional cut
	_v56:= fragment(b,1.2,5.6,4.5,15.6);
	bn := _v56;
	_v57:= print(bn);
#bn:=b.fragment(1.2,5.6,4.5,15.6);bn.print;
	_v58:= flt(nil);
	_v59:= fragment(b,1.2,5.6,16.2,_v58);
	_v60:= print(_v59);
#b.fragment(1.2,5.6,16.2,flt(nil)).print;
	_v61:= flt(nil);
	_v62:= flt(nil);
	_v63:= fragment(b,1.2,_v61,16.2,_v62);
	_v64:= print(_v63);
#b.fragment(1.2,flt(nil),16.2,flt(nil)).print;
	_v65:= flt(nil);
	_v66:= flt(nil);
	_v67:= flt(nil);
	_v68:= fragment(b,_v65,_v66,16.2,_v67);
	_v69:= print(_v68);
#b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print;
#
	_v70:= reverse(bn);
	_v71:= join(b,_v70);
	bn := _v71;
#bn:= b.join(bn.reverse);
	_v72:= print(bn);
#bn.print;
#
	_v73:= semijoin(b,bn);
	bn := _v73;
#bn:= b.semijoin(bn);
	_v74:= print(bn);
#bn.print;
#
## band join experiment
	_v75:= copy(b);
	c := _v75;
#c:= b.copy;
	_v76:= bandjoin(b,c,4.5,4.5);
	_v77:= print(_v76);
#bandjoin(b,c,4.5,4.5).print;
#quit;
