Hi all Monet and DS hackers,

here comes the new version of the testing environment. Only a few details
have changed since my proposal.

- The testing environment consists of the following tools:
  + Mtest.py	a python script to run tests
  + Mfilter.py	a python script to filter the test output before running Mdiff 
		(see below)
  + Mdiff	a C program to show the differences of two files as HTML document
  + Mapprove.py	a python script to approve recent test output (see below)
  + Mtimeout	a C program to limit the resouces of a program
		(thanks to Tim Ruhl, tim@ddi.nl)
  + MkillUsers	a bash script to kill test processes that are orphaned
		(used "fuser" to detect such processes)
  (Mtimeout and MkillUsers are currently available on Unix, only)

- In each directory of the current Monet and/or DS source tree tests may be
  provided in a subdirectory called "Tests". Of course, the tests should
  deal with the part/modules where they are located and they should be
  provided and maintained by the respective developer (see also below).

- Each "Tests" directory must contain a file "All" that contains the names
  of all tests in that directory (one name per line).

- Each test named TST consists of
  + a test script which is ONE of the following:
    * an arbitrary executable (e.g., a shell script)       (TST)
       on Windows, executables must be ".(exe|com)"        (TST.(exe|com))
                   and scripts must be ".(bat|cmd)"        (TST.(bat|cmd))
    * a Python script                                      (TST.py)
    * a MIL script to be executed by Mserver               (TST.milM) (',^)
    * a MIL script to be executed by Mserver -single       (TST.milS) (',^)
       (-single has been removed, so .milM & .milS are
        treated equally, now)
    * a MIL script to be executed by MapiClient            (TST.milC) (",^)
      (MapiClient is currently not supported on Windows)
   (') For Mserver, if several files are present named
        TST_sXX.mil(M|S) (XX={00,01,...,99})
        these are executed by subsequently calling Mserver
   (") For MapiClient, if several files are present named
        (1) TST_sXX.(milC|java) (XX={00,01,...,99})
            these are executed subsequently using the same Mserver
        (2) TST_pXX.(milC|java) (XX={00,01,...,99})
            these are executed cuncurrently using the same Mserver
   (^) For single-script Mserver- & MapiClient- tests, if a file called
	TST.mil(M|C|S).src  exists instead of a  TST.mil(M|S|C),
	TST.mil(M|C|S).src  is expected to contain a single line
	giving the original location of the MIL script to be used.
	E.g.,  src/modules/plain/Tests/arith.milM.src  contains
		$TSTBLDDIR/arith.mil
	in order to use the MIL script extracted from
	src/modules/plain/arith.mx  as test script.
  + a MIL script to be used as prelude for Mserver/MapiClient
     (optional)                                            (TST.prelude)
  + a file that contains a list of modules (one per line)
     required by the test  (optional)                      (TST.modules)
  + a file that contains a list of BATs (one per line)
     (created by previous tests within the same directory)
     required by the test  (optional)                      (TST.BATs)
  + a set of files used by the arbitrary executable
     (optinal)                                             (TST.*)
  + stable (i.e. correct) versions of stdout and stderr
     of the test                                           (TST.stable.{out,err})
    operating system (OS) specific stable output can be 
    provided by adding the suffix ".<OSname>" (".`uname`"),
    ".<OSname><OSversion>" (".`uanme``uname -r`"), or
    ".<OSname><OSversion>.(64|32)bit" 
    to the respective filename.

  Using this naming conventions, the test environment can automatically
  decide what to do when called as "Mtest.py TST" (see below), i.e. execute
  one of the following:
  * TST[.exe|.com|.bat|.cmd] TST [TST.prelude]
  * python TST.py [TST.prelude]
  * Mserver -db TSTDB [TST.prelude] < TST.mil(M|S)
  * Mserver -db TSTDB $MONET_PREFIX/share/Monet/mapi.mil -background &
    MapiClient [-prelude TST.prelude] < TST[_(s|p)XX].milC
    Mshutdown
  (On Unix, all M<tool>'s are started with "Mtimeout -timeout TIMEOUT
   M<tool> ..." to kill (probably) hanging M<tool>'s after a certain
   timeout. The default TIMEOUT value is 600 seconds, i.e. 10 minutes.
   Additionally, MkillUsers is scheduled as at-job to kill orphaned
   processes that Mtimeout cannot reach any more.)

  (Mserver, Mcreatedb, and Mdestroydb are called with "-monetrc $MONETRC".
   See below and "Mserver -help" for details.)

  (MapiClient is called with "-everything".
   See "MapiClient -help" for details.)

- Mtest.py uses three directory trees based at TSTSRCBASE, TSTBLDBASE, and
  TSTTRGBASE, respectively. These trees have similar purpose as the SOURCE,
  BUILD, and PREFIX trees when configuring and compiling Monet: the original
  tests are found in TSTSRCBASE, tests extracted from .mx or .in files
  during testing are fould in TSTBLDBASE, and Mtest.py writes the test
  output to TSTTRGBASE. The default settings are as follows:
	TSTSRCBASE=$MONET_SOURCE  (where you cecked out Monet's source tree)
	TSTBLDBASE=$MONET_BUILD   (where you called configure and make)
	TSTTRGBASE=$MONET_PREFIX  (where you told configure to put Monet)
  You can over rule any of these defaults by setting the respective
  environment variable, or by giving, e.g., --TSTTRGBASE=/tmp as command
  line option to Mtest.py. In any case, all directories must be given as
  absolute paths.

- Further, Mtest.py needs a .monet.conf just like Mserver. To distinguish it
  from your usual .monet.conf, the one for Mtest.py is called .monet.Mtest.conf. 
  By default Mtest.py uses the first one it finds of
	./.monet.Mtest.conf
	$TSTSRCBASE/.monet.Mtest.conf
	$HOME/.monet.Mtest.conf
	$MONET_PREFIX/share/Monet/monet.Mtest.conf
  The last one it shipped with Mtest.py. You can overrule the default by
  giving --MONETRC=<path> as commandline option to Mtest.py. Mtest.py calls
  Mserver, Mcreatedb, and Mdestroydb with "-monetrc $MONETRC".

- Each test is identified by its name and its directory path relative to
  TSTSRCBASE, but without the trailing "/Tests".

- Running one or several tests is done by simply calling
  + "Mtest.py <names...>" to run tests <names...> in
                          a) ".",       if "." is a "Tests"-directory and
                                           there is an "All"-file in "."
                          b) "./Tests", if "./Tests/All" exists
  + "Mtest.py -r"         to run all tests found in any subdirectory of "."

  If Mtest.py is not called in (a subdirectory of) $TSTSRCBASE, Mtest.py
  changes ("cd's") to $TSTSRCBASE before starting its work.
  For more details call "Mtest.py --help".

- Environment variables:
  + Mtest.pydoesn't need any special environment variables to be set.
  + However, the following environment variables can be set to overrule the
    default settings:
	name		default					description
	----		-------					-----------
	MONET_SOURCE	(where you checked out Monet)		base of Monet's source tree
	MONET_BUILD	(where you called configure & make)	base of extracted source tree
	MONET_PREFIX	(where you installed Monet to)		base of Monet distribution
	TSTSRCBASE	$MONET_SOURCE				base of test source tree
	TSTBLDBASE	$MONET_BUILD				base of extracted test tree
	TSTTRGBASE	$MONET_PREFIX				base for test output
	MONETRC		(see obove)				location of .monet.Mtest.conf
	MAPIPORT	$HOST:<random-port-number>		the MAPI port

    the following variables are currently still used legacy, but they will disappear soon...
	MONET_MOD_PATH	$MONET_PREFIX/lib;MONET_PREFIX/lib/Monet

  + Further environment variables that Mtest.py exports (to be used in test
    scripts) are:
  	name		description
	----		-----------
	HOST		hostname
	OS		`uname`
	OSVER		`uname``uname -r`
  	TSTDB		name of default test database, unique for each directory
	MTIMEOUT	"Mtimeout -timeout $TIMEOUT"
	MSERVER		"$MTIMEOUT Mserver -monetrc $MONETRC"
	MAPICLIENT	"$MTIMEOUT MapiClient -everything"
	MCREATEDB	"$MTIMEOUT Mcreatedb -monetrc $MONETRC"
	MDESTROYDB	"$MTIMEOUT Mdestroydb -monetrc $MONETRC"
	MSHUTDOWN	"$MTIMEOUT Mshutdown"
	MDIFF		"$MTIMEOUT Mdiff"
	TSTDIR		current test directory without $TSTSRCBASE/ & /Tests
	TSTSRCDIR	$TSTSRCBASE/$TSTDIR/Tests
	TSTBLDDIR	$TSTBLDBASE/$TSTDIR/Tests
	TSTTRGDIR	$TSTTRGBASE/Tests/$TSTDIR
	GDK_DBFARM	as read from $MONETRC

- For each directory, Mtest.py creates a database $TSTDB in $GDK_DBFARM
  before running any test.

- A test is skipped (i.e. not executed), 
  if $TST.modules exists and contains modules that are not available, or
  if $TST.BATs exists and contains BATs that are not available in the
  current database $TSTDB.

- While executing test "$TSTSRCDIR/TST", Mtest.py uses $TSTTRGDIR as working
  directory; for convenience, all files "$TSTSRCDIR/TST*" are copied to
  $TSTTRGDIR.

- Mtest.py stores the output of test "$TSTSRCDIR/TST" in
  $TSTTRGDIR/TST.test.{out,err} and checks it against
  $TSTSRCDIR/TST.stable.{out,err}. If system specific stable output files
  ($TSTSRCDIR/TST.stable.{out,err}[.($OS|$OSVER[.(64|32)bit])]) exist, the
  most specific stable output is used. Mtest.py stores the respective Mdiff
  results in $TSTTRGDIR/TST.{out,err}.diff.html.
  For each test directory, a common entry point to the test results is
  created as $TSTTRGDIR/.index.html.  
  For the whole test run, a global entry point to the test results is
  created as $TSTTRGBASE/Tests/index.html.
  
- Mfilter.py is used to filter out variable date form the test output to
  avoid no-error differences when running Mdiff. Mfilter.py prefixes all
  lines enclosed in two line containing only "#~BeginVariableOutput~#" and
  "#~EndVariableOutput~#", respectively, with "#~". These lines are then
  ignored during Mdiff.
  
  MIL Example:
	printf("#~BeginVariableOutput~#\n"); cpu.print; printf("#~EndVariableOutput~#\n);

- A tool Mapprove.py is provided to copy the recent output from
  $TSTTRGDIR/TST.test.{out,err} to $TSTSRCDIR/TST.stable.{out,err}. Lines
  starting with a '!' (i.e. error messages) are eliminated during copying. 
  Of course, $TSTTRGDIR/TST.test.{out,err} have to be checked and claimed
  correct before being approved!
  See "Mapprove.py -?" for command-line options.

- A development session is than supposed to proceed as follows:
  (assuming TSTSRCBASE=$MONET_SOURCE and TSTBLDBASE=$MONET_BUILD)

        cd $TSTSRCBASE
        run  cvs update
        loop
                loop
			cd $TSTSRCBASE/$TSTDIR
                        edit source
			cd $TSTBLDBASE/$TSTDIR
                        [g]make
			[g]make install
                endloop
                loop
			cd $TSTSRCBASE/$TSTDIR
			edit/create  Tests/All
                        edit/create  Tests/<names...>.*
                        run  Mtest.py <names...>
                        check 	$TSTTRGDIR/<names...>.test.{out,err}
                        	$TSTTRGDIR/<names...>.{out,err}.diff.html
				(cf. $TSTTRGBASE/Tests/index.html)
                endloop
        endloop
        run  Mapprove.py <names...>
        run  cvs ci



        Stefan

--
| Stefan Manegold     | mailto:Stefan.Manegold@cwi.nl |
| CWI,  P.O.Box 94079 | http://www.cwi.nl/~manegold/  |
| 1090 GB Amsterdam   | Tel.: +31 (20) 592-4212       |
| The Netherlands     | Fax : +31 (20) 592-4312       |

