@f mal_symbol
@a M. L. Kersten

@* MAL runtime name space

The MAL name spaces are organized in a hierarchy of module scopes.
Each module scope itself is organized as a list of subscopes
indexed by the first character of the function name.

A function call mod.fcn(Anme:Type, ..) is resolved as follows. We traverse the
nested scopes towards the root to locate the MODULE symbol named 'mod'.
From there we search the subscope 'Anme' and try to resolve the procedure.
If it fails and 'mod' was not given we continue our search in outer
scopes.

This method provides overloading, which can be enforced from a particular
level. For example, the user can introduce a module M with the function F,
but still force resolution within the body of F to start at an outer level.
(using MAL.F to indicate resolution in shared outerscope).
The main benefit for overloading is to introduce enhanced versions of
predefined modules, such as for traceing, accellerator maintenance,...

This implementation scheme limits the number of comparisons to find 
the relevant collection of function signatures to a handfull.
For the time being it is not worthwhile to implement a more complex
scope lookup scheme, for 1) the number of languages,
2) the number of modules/language, and 3) the routines per module/type
are limited

The global organization of the namespace consists of a core, language
and a client layer. 
The core layer contains all pre-compiled and linkable functions.
The next layer is bound to a particular front-end language, e.g. MIL or SQL
and contains a scope level for each module imported.
Such language scopes may be nested, e.g. MAL->MIL->SQL.

The client layer typically contains a collection of private MAL-procedures.
It contains a procedure 'main' to be executed by default. 
Moreover, the symbol table and its binding is retained over successive
calls to provide for a global variable context.

Each user has a separate scope, but the secondary clients have shared
access to the definitions available to the administrator.
The global scope and private scopes are separated by an a priori known
scope name "MAL_scope".


Unlike Monet V4, a procedure scope is privately assigned to a single client
thread. Moreover, all dynamically loaded functions remain in existing
for the duration of the server session. Only the administrator can
load functions (upon system restart). Therefore, we do not have
to lock the dictionary table while traversing it for information.
Global (private) variables can be realized keeping the symbol table
and runtime stack around between requests.

Unlike Monet Version 4, administration for MAL procedures is
decoupled from their actual runtime behavior. This means we are
more relaxed on space allocation, because the size is determined
by the number of MAL procedure definitions instead of the runtime
calling behavior. (See mal_interpreter for details on value stack
management)

The name and kind information is replicated from the MAL blocks.
The name is a shared string and need not be garbage collected here.
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_NAMESPACE_H_
#define _MAL_NAMESPACE_H_
#include "mal_instruction.h"

#define MAXSCOPE 256

mal_export Symbol mal_scope;	/* the start of the module list */

mal_export void		initScope();
mal_export Symbol 	newScope(Symbol cntxt, str nme);
mal_export Symbol	insertSymbol(Symbol cntxt, Symbol prg);
mal_export Symbol	findScope(Symbol cntxt, str name);
mal_export Symbol 	findSymbolInScope(Symbol v, str fcn);
mal_export int		getSubScope(str nme);
mal_export Symbol	fixateScope(Symbol cntxt, str nme);
mal_export Symbol 	findSymbol(str mod, str fcn);
mal_export int	 	displaySymbol(FILE *f, str mod, str fcn);
mal_export int 		showScopeTrail(FILE *fd, Symbol s);
mal_export void 	debugScope(str nme);

mal_export Symbol 	newSymbol(str nme, int kind);
mal_export void		freeSymbol(Symbol cur);
mal_export void		freeSymbolList(Symbol cur);

#endif /* _MAL_NAMESPACE_H_ */
@+ Scope management
Upon system restart, the global scope is created. It is called "root" and
does not contain any symbol definitions. It merely functions as an anchor
point for the modules to be added later.

@= newsymbol
	if( nme == NULL){
		GDKfatal("@1:unexpected name (=null)\n");
	}
        cur = (Symbol) GDKmalloc(sizeof(SymDefinition));
	if( cur == NULL){
		GDKfatal("@1: cannot initialize scope\n");
	}
	bzero((str)cur,sizeof(SymDefinition));
	cur->name = nme;
	cur->kind = kind;
	cur->outer = NULL;
	cur->peer = NULL;
	cur->help = NULL;
	cur->def = newMalBlk();
	cur->subscope = NULL; 

@c
#include "mal_symbol.h"

Symbol mal_scope;	/* the root of the tree */

void newSubScope(Symbol cntxt){
	int len = (MAXSCOPE)*sizeof(Symbol);
	cntxt->subscope = (Symbol *) GDKmalloc(len);
	bzero((char*)cntxt->subscope, len);
}
void freeSubScope(Symbol cntxt){
	if(cntxt->subscope==0) return;
	GDKfree(cntxt->subscope);
	cntxt->subscope = 0;
}

void	initScope()
{	Symbol cur;
	str nme= GDKstrdup("root");
	int kind= SCOPEsymbol;
	@:newsymbol(initScope)@
	newSubScope(cur);
	mal_scope = cur;
}
@-
After filling in a structure it is added to the multi-level
symbol table.
@c
int getSubScope(str nme) { 
	if(nme == NULL){
		return GDKerror("getSubScope with null function\n");
	}
	return *nme;
}
Symbol insertSymbol(Symbol cntxt, Symbol prg){
        InstrPtr sig;
        int t;

        sig = getSignature(prg);
        t = getSubScope(sig->fcnname);
        if( cntxt->subscope == NULL){
		newSubScope(cntxt);
                cntxt->subscope[t] = prg;
        } else {
                prg->peer= cntxt->subscope[t];
                cntxt->subscope[t] = prg;
        }
        return prg;
}

@-
Finding a scope is unrestricted. for modules we explicitly look for
the start of a new module scope.
@c
Symbol findScope(Symbol cntxt, str name){
	if( cntxt->name==NULL) return NULL;
	if( name==NULL) return cntxt;
        while(cntxt != NULL){
                if( idcmp(name,cntxt->name)== 0 )
                        break;
                cntxt= cntxt->outer;
        }
        return cntxt;
}
@-
Every module scope symbol is under the control of a single thread.
However, definition of a new module scope may interfere with concurrent
actions of multiple threads. This calls for a secure update 
of the scope tree structure. 

Symbol definitions without an explicit scope are allocated to the root.
@c

Symbol newSymbol(str nme, int kind){
	Symbol cur;
	@:newsymbol(newSymbol)@
	return cur;
}
Symbol newScope(Symbol cntxt, str nme){
	Symbol cur;
	int kind= SCOPEsymbol;
	@:newsymbol(newScope)@
	newSubScope(cur);
	if( cntxt != NULL){
		cur->outer = cntxt->outer;
		cntxt->outer= cur;
	}
	return cur;
}
@-
Reading a module often calls for opening a scope level
if it didn't exist.
@c
Symbol fixateScope(Symbol cntxt, str nme){
	Symbol cur;
	cur = findScope(cntxt,nme);
	if( cur!= NULL) return cur;
	return newScope(cntxt, GDKstrdup(nme));
}

void  printScope(Symbol cntxt, int tab, int outer)
{
	int i,j;
	Symbol s=cntxt,t;
	FILE *fd= GDKout;

	while(s!= NULL){
		fprintf(fd,"SCOPE %s",s->name);
		if( s->subscope)
		for(j=0;j<MAXSCOPE;j++)
		if(s->subscope[j]){
			fprintf(fd,"[%c]",j);
			for(t= s->subscope[j];t!=NULL;t=t->peer) {
				fprintf(fd," %s",t->name);
				if( getSignature(t)==NULL ||
				    (getSignature(t)->fcn==0 &&
				     getSignature(t)->token == COMMANDsymbol &&
				     getSignature(t)->blk==0) ) fprintf(fd,"(?)");
			}
			fprintf(fd,"\n");
		}
			fprintf(fd,"\n");
		s= s->peer;
	}
	if(outer && cntxt->outer) printScope(cntxt->outer,tab+1, outer);
}

int showScopeTrail(FILE *fd, Symbol s)
{
	printf("Scope trail %s:",s->name);
	for(; s; s= s->outer) {
		printf("->%s",s->name);
		if( s->subscope==0) printf("?");
	}
	printf("\n");
}

void debugScope(str nme){
	Symbol m;
	FILE *fd= GDKout;
	if( mal_scope== 0) GDKerror("mal_scope == NULL\n");
	if( nme==0 || *nme ==0) printScope(mal_scope,0,TRUE);
	else{
		char *s;
		for(s=nme;*s && (isalnum(*s) ||*s=='_');s++);
		*s = 0;
		m= findScope(mal_scope,nme);
		if( m== NULL) fprintf(fd,"Scope name '%s' not found\n",nme);
		else printScope(m,0,FALSE);
	}
}
@-
The freeSymbol operation throws away a symbol without
concerns on it whereabouts in the scope structure.
This routine therefore assumes care in use.
The final action of the system is to remove all
instructions and procedures. This forcefull action
helps in localization of memory leakages.
@c
void freeSymbol(Symbol s){
	if(s==NULL) return;
	freeSubScope(s);
	if( s->name) GDKfree(s->name);
	if( s->help) GDKfree(s->help);
	if( s->def) freeMalBlk(s->def);
	GDKfree(s);
}
void freeSymbolList(Symbol s){
	if(s==NULL) return;
	if(s->peer != NULL) freeSymbol(s->peer);
	freeSymbol(s);
}
@+ Searching the scope structure.
The routine @%findSymbol@ starts at a scope level and searches 
an element amongst the peers. If it fails, it will recursively
inspect the outer scopes.

In principal, external variables are subject to synchronization actions
to avoid concurrency conflicts. This also implies, that any parallel
block introduces a temporary scope.

The variation on this routine is to dump the definition of
all matching definitions.
@c
Symbol findSymbolInScope(Symbol v, str fcn){
	Symbol s;
	if( v == NULL || fcn == NULL) return NULL;
	s= v->subscope[*fcn];
	while(s!=NULL){
		if( idcmp(s->name,fcn)==0 ) return s;
		s= s->peer;
	}
	return NULL;
}
Symbol findSymbol(str mod, str fcn){
	Symbol v;
	v= findScope(mal_scope, mod);
	return findSymbolInScope(v,fcn);
}
int displaySymbol(FILE *f, str mod, str fcn){
	Symbol v, s;
	int i,k=0;

	v= findScope(mal_scope, mod);
	if( v == NULL || fcn == NULL) return 0;
	s= v->subscope[*fcn];
	while(s!=NULL){
		if( idcmp(s->name,fcn)==0 ) {
			printFunction(f,s->def);
			k++;
		}
		s= s->peer;
	}
	return k;
}
