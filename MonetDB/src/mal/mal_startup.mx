@t MAL startup
@a M. Kersten
@v 0.0
@+ MAL startup
Startup of the Monet engine consists of two steps. First, the
system kernel libraries are loaded.
The global symbol table is initialized with pre-compiled commands
and pattern definitions.
Second, for each service thread we execute a script with predefined
MAL procedures.

The information for the first phase consists of commands 
signatures bound to actual routine implementations.
The corresponding libraries may be statically linked or dynamically loaded.
Failure to find the startup-files terminates to session, because
there is no way to activate a linked procedure.

After this initialization phase, the system prohibits dynamic loading of
C- modules by casual users. For the time being we even forbid it,
it should be part of the system startup.
The rational behind this design decision is that the free load/drop
feature of Monet V4 was hardly used and severely complicates the code.
In particular, upon each access to the global symbol table we have to be
prepaired that concurrent threads my be actively changing its structure.
Especially, dropping modules may cause sever problems by not being
able to detect references kept around.
This danger required all accesses to global information to be packaged
in a critical section, which was known to be a performance hindrence.

The current implementation provides each service thread with a privately
owned scope level. It is used to store MAL scripts including those
attached to the core modules.

The global scope and private scopes are separated by an a priori known
scope name "MAL_scope". 

@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_STARTUP_H
#define _MAL_STARTUP_H

#include "mal_symbol.h"
#include "mal_import.h"
#include "mal_client.h"

#define SRVINIT "startup.mal"
#define SRVORIGIN "share/Monet/startup.mal"

mal_export int malStartupAdmin(Client c, str dbname, int listing);
mal_export Symbol malStartupService(Symbol cntxt);
#endif /*  _MAL_STARTUP_H*/
@-
The startup script for databases recides in the administrator's
directory of each database. Upon need, it can be overruled 
using the configuration scripts.
If initialization of the server is successful, then the MAL_scope symbol
position is being returned as the namespace entry point for the client.
@c
#include "mal_startup.h"

int malStartupAdmin(Client c, str dbname,int listing){
        MalBlkPtr curBlk = 0;
        InstrPtr curInstr=0;
	char buf[PATHLENGTH];
	FILE *fd;
	
	sprintf(buf,"%s/%s",GDKdirStr,SRVINIT);
	SLASH_2_DIR_SEP(buf);
	if( (fd= fopen(buf,"r")) == NULL){
		sprintf(buf,"%s/%s",GDKdistrStr,SRVORIGIN);
		SLASH_2_DIR_SEP(buf);
		if( (fd= fopen(buf,"r")) == NULL){
			GDKerror("FATAL:server file '%s' missing\n",SRVORIGIN);
			return 0;
		}
	} 
	fclose(fd);

	c->nspace= newScope(mal_scope,GDKstrdup("Client"));
	if( malImport(buf,0,0) == NULL) return 0;
	mal_scope = c->nspace;
	return 1;
}
