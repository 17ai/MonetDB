@t Atom administration
@a M.L. Kersten
@* Introduction
The Monet Assembler Language recognizes the definition of a new
atom type by replacing the MODULE keyword with ATOM MODULE.
Atoms definitions require special care, because their definition and 
properties should be communicated with the GDK kernel library.
The commands defined in an ATOM MODULE block are screened as of interest 
to the gdk_atom library. This involves both a check on the function name and
the type signature required. 
All commands are entered in the symbol table structure and thereby
become accessible for programming.

@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_ATOM_H
#define _MAL_ATOM_H

#include "mal_instruction.h"
/*#define MAL_ATOM_DEBUG*/

mal_export void malAtomDef(str name);

#endif /*  _MAL_ATOM_H*/
@+
@c
#include "mal_atom.h"

int isAtomCandidate(str name){
	switch(name[0]){
	case 'a': if( strcmp("align",name)==0) return 1;
	case 'd': if( strcmp("del",name)==0) return 1;
	case 'c': if( strcmp("cmp",name)==0) return 1;
		  if( strcmp("convert",name)==0) return 1;
	case 'f': if( strcmp("fromstr",name)==0) return 1;
		  if( strcmp("fix",name)==0) return 1;
	case 'h': if( strcmp("heap",name)==0) return 1;
		  if( strcmp("heapconvert",name)==0) return 1;
		  if( strcmp("hash",name)==0) return 1;
	case 'l': if( strcmp("length",name)==0) return 1;
		  if( strcmp("linear",name)==0) return 1;
	case 'n': if( strcmp("null",name)==0) return 1;
	case 'p': if( strcmp("put",name)==0) return 1;
	case 's': if( strcmp("size",name)==0) return 1;
		  if( strcmp("storage",name)==0) return 1;
	case 't': if( strcmp("tostr",name)==0) return 1;
	case 'u': if( strcmp("unfix",name)==0) return 1;
	}
	return 0;
}
@-
Atoms are constructed incrementally in the kernel using the
ATOMproperty function.
The most tedisous work is to check the signature types of the functions
acceptable for the kernel.
@c

void malAtomDef(str name){
	if( ATOMindex(name)>=0){
		char buf[1024];
		sprintf(buf,"ERROR: Redefinition of atom '%s'\n", name);
		GDKerror(buf);
		return;
	}
#ifdef MAL_ATOM_DEBUG
	printf("introduce a new atom type '%s' in the kernel\n",name);
	/* ATOMproperty(name,GDKstrdup(""),0); */
#endif
}
void defAtomCommand(InstrPtr p){
#ifdef MAL_ATOM_DEBUG
	printf("atom candidate '%s' ?%s\n", p->fcnname,
		(isAtomCandidate(p->fcnname)?"yes":"no"));
#endif
}
