@a M.L. Kersten
@v 1.0
@* Standalone MAL parser

This small program is primarilly meant to debug MAL programs. 
Input is obtained from a file argument and read as one large blob.

The underlying parser is to be included in the Mclient front-end or
the applications at a later stage.

@c
#include "mal_startup.h"
#include "mal_parser.h"
#include "mal_interpreter.h"

mal_export void debugParser(int i);
mal_export void dbargs(int argc, char **argv, char *args[4]);

@-
Ideally we shouldn't be forced to use locks. Since this results in
rather complex code, we have opted for another method. Namely,
at any time a thread can obtain exclusive access to the complete system.
This lock should be held as short as possible.
@c
#ifdef MULTICLIENT
MT_Lock	monet_contextLock;
#endif
str currentwd;

int main(int argc,char ** argv)
{
	int i,k,l= 0;
	Symbol prg,scope;
	int trace = 0, listing = 0, xlisting=0;
	str  dbname="test";

	GDKinit(argc,argv);

        for(i=1;i<argc;i++)
	if( argv[i][0]=='-') {
		for(k=0;argv[i][k];k++)
		switch(argv[i][k]){
		case 'd': debugParser(1);  break;
		case 't': trace=1;  break;
		case 'L': xlisting=1;  
		case 'l': listing=1;  break;
		}
	} else if(argv[i][0] && l==0) l=i;
	setXlisting(xlisting);
#ifdef MULTICLIENT
	monet_contextLock= MT_create_lock();
#endif
	scope= malStartupGlobal(dbname,listing);
	if( scope == NULL) return 0;

	while(l<argc){
		prg= malImport(scope,scope->name,argv[l],listing);
		l++;
	}
	/* printScope(scope,0);*/
	/* and execute the last routine loaded */
	if( prg ) {
		runMAL(prg->def,0,stdin,stdout,trace);
	}
	freeAllSymbols();
	freeStringStack();
	return 0;
}
@+ Common utilities
@c
void usage() {
        printf("usage: Mal -db <dbname> [-r <monetrc>] \n");
}

@-
Below we got some remnants of Monet V4
@c
int TBL_Install_Info( int *i, /* Passed on from "module"_Install */
   str user, /* Passed on from TBL_Install */
   str name){ return 0;}
int TBL_Install_Functions( oid mid, void *fcns, str user, str date ){ return 0;}
int TBL_Install_LoadMIL(){ return 0;}
