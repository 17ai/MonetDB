@t MAL Type resolution
@a M. Kersten
@v 0.0
@+ MAL type resolution
@- Type resolution principles.
The type resolution scheme should be flexible and efficient.
Given the interpretative nature of many of the MAL instructions,
when and where type resolution takes place is a critical design issue.
Performing it too late, i.e. at each instruction, leads to 
performance problems if we derive the same information over and over again.
However, many built-in operators handle polymorphic typed objects, 
so we cannot escape it altogether.

Consider the small illustrative MAL program which we should
definitely support at the language level.
@T
\begin{verbatim}
function sample(nme:str, val:any):bit;
   c := 2*3;
   b := take("bbp",nme);	#find something in bbp
   h := select(b,val,val);
   t := count(h);
   x := print(t);
   y := print(val);
end function;

\end{verbatim}
@-
The function definition is polymorphic typed, it becomes a concrete
type upon invocation. 

The first assignment can be type checked during parsing, i.e. TYPE_FIXED, 
and could even lead to a frozen value. Looking up a BAT leads to
an element bat[ht,tt] where ht and tt are runtime dependent types.
We can not typecheck the bat selection. It should be done at runtime,
i.e. TYPE_DYNAMIC.
We can check t at compile time, because we only have to assure
that count() is given a bat argument. This assumes that we can infer
that 'h' is indeed a BAT, which requires assurance that all 'select'
operators produce a bat. In general, this is not easy and we opt for
a delay in resolution. Since, print(t) contains an undetermined typed
argument we should postpone typechecking as well.
The last print statement can be checked upon function invocation,
i.e. TYPE_POLYMORPHIC.

Life becomes really complex if the body contains a loop, which changes
the ht and tt types. For then we also have to keep track of the original
state of the function. Or alternatively, type checking should consider
the runtime stack rather than the function definition itself.
@-
A few conclusions can be drawn. 1) Every statement should carry a
flag to indicate whether it has been type-resolved. 
1a) you can always postpone type checking, but then you may leave
a computation in an inconsistent state upon encountering an error.
2) polymorphic functions can be cloned to built a cache of instantiated 
functions.
3) we have to call the type-checker potentially at every instruction
and its result is call specific, this means we have to propagate
the type through the runtime stack rather than the symbol table, which
complicates subsequent flow of control.
4) once the type of a variable is fixed, we should stick to it.
This precludes loops where the typing scheme changes with each step.
Instead, such type changes should be factored out algoritmically.

Alternatie solutions.
A) split the function such that type analysis only occurs at the
   function call level.
Disadvantage, it does not work for the example above.
Moreover, you need to carry too much contextual information.

Choicepoint. We either enforce that the Mal instructions contain the 
relevant module or we have to provide for a controlled search through
the collection of all known operations.
The current policy is to start at the module level and inspect
the outer scopes when the symbol is not found. This may lead
to ambigous behavior though. If a module M imports K for its function K.f()
then it clashes with L.f() when the initialization script calls for
import K,L,M. This can be recognized by inspecting the code produced
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.
html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _MAL_RESOLVE_H
#define _MAL_RESOLVE_H

#include "mal_function.h"

/* #define DEBUG_MAL_RESOLVE*/
mal_export void typeChecker(Scope scope, MalBlkPtr mb, InstrPtr p, int level);
mal_export int typeConformance(MalBlkPtr mb, InstrPtr p, int tpe);
mal_export int isPolymorphicArgument(MalBlkPtr mb, InstrPtr p, int i);
mal_export malType getPolyReturn(MalBlkPtr cmd, InstrPtr pp, 
				 int polytype[2*MAXARG]);
mal_export int updPolyType(int formal, int actual, int polytype[2*MAXARG]);

#endif /*  _MAL_RESOLVE_H*/
@+ Function call resolution
Search the first definition of the operator in the visible scopes
and check the parameter types.
For a polymorphic MAL function we make a fully instantiated clone, but
only at the client layer. This effectively overloads the MAL procedure.
It will be prepended to the symbol list as it is more restrictive.
[think, proc M.p(any::1 a,...) is copied to the client layer as p(any::1 a).
But this may interfere with any p(...) define below M. Furthermore, how
to easily recognize a second instantiation of p(...)]
@c
#include "mal_resolve.h"
#ifdef DEBUG_MAL_RESOLVE
#define DEBUGFCN "___"
int tracefcn;
#endif

@-
A function may be characterised by its module, i.e. the location to
start the search. Ommision of the module name implies searching from
the client layer upward. (cost estimate 4ms/1000calls)
After fixation of the module starting point, the argument type of
the first parameter is used to isolate a subscope.
@c
malType findFunctionType(Scope scope, MalBlkPtr mb, InstrPtr p){
	Scope m;
	Symbol s;
	InstrPtr sig;
	int i,j,k,l, polymorphic, unmatched = 0, s1;
	int foundbutwrong=0;
	int polytype[2*MAXARG];

@-
Check first for a module specific type checker. It takes
precedence and should handle all cases. It returns -1
upon failure, which shortcuts the execution.
@c
	if(p->modname && 
	   idcmp(p->modname,scope->name)==0 && 
	   scope->typeChecker){
		if( (scope->typeChecker)(scope,mb,p)==0)
			return getArgType(mb,p,0);
		return -3;
	}
@-
Within a module find the subscope to locate the element in its list
of symbols.
@c
	m= scope;
	s= m->subscope[getSubScope(p->fcnname)];
	while(s != NULL){	/* single scope elements */
	if( idcmp(p->fcnname,s->name ) ){
		s= s->peer; continue;
	}
@-
Perform a strong type-check on the actual arguments. If it turns
out to be a polymorphic MAL function, we have to clone it. 
Provided the actual/formal parameters are compliant throughout
the function call.

Also look out for variable argument lists. This means that we
have to keep to iterators, one for the caller (i) and one for
the callee (k). Since the variable argument only occurs as last,
we simple avoid an increment when running out of formal arguments.

@c
	sig = getSignature(s); 
#ifdef DEBUG_MAL_RESOLVE
	if(tracefcn) {
		printf("%s varargs %d\n",p->fcnname,sig->varargs);
		printf("p->argc %d %d\n",p->argc,sig->argc);
	}
#endif
	if( sig->argc!= p->argc ) {
		if( !sig->varargs){ s= s->peer; continue;}
		if( p->argc < sig->argc ) {s= s->peer; continue;}
	}
	polymorphic = 0;
	unmatched = 0;
@-
The simple case could be taken care of separately to speedup processing
However, it turned out not to make a big difference.
The first time we encounter a polymorphic argument in the
signature, we initialize a type variable table.
Subsequently, the polymorphic arguments update this table
and check for any type mismatches that might occur.
There are at most 2 type variables involved per argument.
@c
	for(k=i=1;i<p->argc;i++){
		int itype;
		if( (itype=getArgType(mb,p,i)) == getArgType(s->def,sig,k) )
			goto varargtst;
		if( sig->polymorphic && isPolymorphicArgument(s->def,sig,k) ){
			if( polymorphic==0){
				for(l=0;l<2*p->argc;l++) polytype[l]= malAnyType;
				polymorphic++;
			}
			if( updPolyType(getArgType(s->def,sig,k), 
				    itype, polytype) == 0)
					goto varargtst;
		}
#ifdef DEBUG_MAL_RESOLVE
		if(tracefcn) printf("mismatch %d,%d test %s poly %s\n",
			i,k, malTypeName(itype),
			malTypeName(getArgType(s->def,sig,k)));
#endif
		unmatched= i;
		break;
@-
Take care of variable argument lists.
@c
	varargtst: 
		k++;
		if(sig->varargs && k == sig->argc ) k--; 
	}
@-
It is possible that you may have to coerce the value to another type.
We assume that coercions are explicit at the MAL
level. (e.g. var2:= var0:int). This avoids repeated type analysis
just before you execute a function.
At a later stage we may automatically insert such coercion requests.
@c
#ifdef DEBUG_MAL_RESOLVE
	if(tracefcn) {
		 printf("finished param test, unmatched=%d polymorphic=%d\n",
			unmatched, polymorphic);
		if( polymorphic){
			for(l=0;l<2*p->argc;l++) 
			if( polytype[l] != malAnyType)
			printf("poly %d %s\n",l,malTypeName(polytype[l]));
		}
	}
#endif
	if( unmatched) { s= s->peer; continue; }
	if( polymorphic){
		/* what to do with variable args */
		if( s->kind == COMMANDsymbol || s->kind==PATTERNsymbol)
			s1= getPolyReturn(s->def,sig, polytype);
		else {
			s = cloneFunction(scope, s, mb,p);
			s1 = getDestType(s->def,getSignature(s));
		}
	} else
		s1= getDestType(s->def,sig);
#ifdef DEBUG_MAL_RESOLVE
	if(tracefcn){
	printf("found%s definition of '%s.%s' with type %s\n",
		(polymorphic?" polymorphic":""),
		m->name,
		p->fcnname,malTypeName(s1));
	}
#endif
@-
We found the proper function. Copy some properties. In particuler,
determine the calling strategy, i.e. FCNcall, CMDcall, RLRcall, PATcall
@c
	if(getSignature(s) != p){
	switch(getSignature(s)->token){
	case COMMANDsymbol: 
		p->token = CMDcall; 
		p->fcn = getSignature(s)->fcn;
		break;
	case RULEsymbol: 
		p->token = RLRcall; 
		p->fcn = getSignature(s)->fcn;
		break;
	case PATTERNsymbol: 
		p->token = PATcall; 
		p->fcn = getSignature(s)->fcn;
		break;
	case FUNCTIONsymbol: 
		p->token = FCNcall; 
		p->blk = s->def;
		break;
	default:
		showException(mb,getPC(mb,p),"MALresolve","unexpected token type\n");
		mb->errors++;
	}
	}
#ifdef DEBUG_MAL_RESOLVE
	if(tracefcn) printf("%s:=%s\n",malTypeName(getDestType(mb,p)),
		malTypeName(s1));
#endif
	/* watch out, the destination type may already be known */
	if( getDestType(mb,p)== malAnyType){
		setDestType(mb,p,s1);
		p->modname= GDKstrdup(m->name);
		p->gdktype =  getGDKtype(getVarType(mb,p->argv[0]));
		return s1;
	}
	p->gdktype =  getGDKtype(getVarType(mb,p->argv[0]));
	if( getDestType(mb,p) == s1) {
		p->modname= GDKstrdup(m->name);
		return s1;
	/*
	if( typeConformance(mb,p,s1)==0 ){
		p->gdktype =  getGDKtype(getVarType(mb,p->argv[0]));
		p->modname= GDKstrdup(m->name);
		return s1;
	*/
	} else 
	if( getSignature(s)->token !=PATTERNsymbol) foundbutwrong++;
	s= s->peer;
	} /* while */
@-
We haven;t found the function. 
@c
	if( foundbutwrong){
		GDKerror("type conflict in assignment of %s.%s\n",
			m->name,p->fcnname);
		printInstruction(GDKout,mb,p);
	}
	return -3;
}

@-
Once we have determined the result type of an instruction,
we should test for any conflict with a variable type already
set. If conflict-free, the destination type is set to its
new value.
@c
int typeConformance(MalBlkPtr mb, InstrPtr p, int tpe){
	if( getDestType(mb,p)== tpe) return 0;
	if( getDestType(mb,p)== malAnyType){
		setDestType(mb,p,tpe);
		return 0;
	}
	GDKerror("type conflict in statement %s.%s[%d]\n",
		p->modname,p->fcnname,getPC(mb,p));
	printInstruction(GDKout,mb,p);
	return -1;
}
@-
The typeChecker is called whenever we enter a new instruction
in a MAL block. We try to clear the type check flag by looking up the
functions. Errors are simply ignored at this point of the game,
because they may be resolved as part of the calling sequence.
@c
void typeChecker(Scope scope, MalBlkPtr mb, InstrPtr p, int level){
	int s1= -1, i;
	char buf[1024];
	Scope m;
@-
A function search should inspect all modules unless a specific module
is given. Preference is given to the lower scopes.
If we can not find the function, the type check returns unsuccesfully,
setting the state as TYPE_UNKNOWN. In this case we should issue an error
message to the user.
@c
	if(p->token == FUNCTIONsymbol || p->token==COMMANDsymbol) {
		p->typechk = typeKind(mb,p,0);
		return;
	}
	if( p->fcnname){
#ifdef DEBUG_MAL_RESOLVE
		tracefcn= idcmp(p->fcnname,DEBUGFCN)==0;
#endif
@-
If any of the arguments is undefined, then postpone
type checking to a later stage in the process.
@c
		for(i=1; i<p->argc; i++)
		if(getArgType(mb,p,i)== malAnyType) {
			if( isaSignature(p)) break;
			p->typechk= TYPE_UNKNOWN;
			return;
		}

		/* continue search into outer scope */
		m= findScope(scope,p->modname);
		while(s1<0 && m!= NULL){
			s1= findFunctionType(m,mb,p);
			if( p->modname) break;
			m= m->outer;
		}
		if( s1<0 ) {
			if( ! isaSignature(p))
			GDKerror("'%s' undefined in %s.%s[%d]\n", 
			p->fcnname,scope->name,
			getInstrPtr(mb,0)->fcnname,getPC(mb,p));
			return;
		}
		if(s1>=0) p->typechk = TYPE_FIXED;
		return;
	}
@-
A function call is only resolved when all the parameters are
already strongly typed. Alternatively, if we encounter a
polymorphic argument, we have to postpone type resolution
until a function clone is being constructed. 
Polymorphic types require extra checks. In particular, the
type variables should be bound to the same underlying type.
If this type check has to be performed each time the instruction
is being called, we end up with a TYPE_DYNAMIC case.
@c
	if( p->typechk == TYPE_UNKNOWN){
		p->typechk= TYPE_FIXED;
		for(i=1;i<p->argc;i++){
			p->typechk= MIN(p->typechk, typeKind(mb,p,i));
		}
	}
	if( p->typechk < level) return;
@-
When we arrive here the operator is either an assignment or
procedure call without arguments and no module name.
@c
	if( p->argc==1)
		s1 = getDestType(mb,p);
	else
	if( p->argc==2){
		s1= getArgType(mb,p,1);
	} 
	/* REDO and LEAVE have precise one argument */
	if( s1== malAnyType && p->argc>1 ){
		p->typechk = TYPE_UNKNOWN;
		if( level <= TYPE_UNKNOWN){
			sprintf(buf,"unknown operator '%s'\n", 
				p->fcnname);
			showException(mb,getPC(mb,p),"MALresolve",buf);
			mb->errors++;
			return;
		}
	}
	if( getDestType(mb,p)== malAnyType){
		if( p->argv[0]>=0) setDestType(mb,p,s1);
		p->gdktype =  getGDKtype(getVarType(mb,p->argv[0]));
		return;
	}
	p->gdktype =  getGDKtype(getVarType(mb,p->argv[0]));
	if( getDestType(mb,p) == s1) return;
	if( p->argc <=1) return;

	{ str n1 = malTypeName(s1);
	  str n2 = malTypeName(getDestType(mb,p));
	  sprintf(buf,"type mismatch %s := %s\n",n2,n1);
	  showException(mb,getPC(mb,p),"MALresolve",buf);
	  mb->errors++;
	}
	p->typechk= TYPE_UNKNOWN;
}

@+ Type analysis
MAL provides for type variables of the form any::N. This feature
supports polymorphic types, but also complicates the subsequent
analysis. A variable typed with any::N not occuring in the function
header leads to a dynamic typed statement. In principle we have
to type check the function upon each call.
@c
int typeKind(MalBlkPtr mb, InstrPtr p, int i){
	malType t= getArgType(mb,p,i);
	if( isAnyExpression(t) || t == malAnyType) {
		if( i < getArgCount(mb) )
			return TYPE_POLYMORPHIC;
		return TYPE_DYNAMIC;
	}
	return TYPE_FIXED;
}
int isPolymorphicArgument(MalBlkPtr mb, InstrPtr p, int i){
	malType t= getArgType(mb,p,i);
	if( t== malAnyType) return 1;
	if( isAnyExpression(t)) return 1;
	if( isaBatType(t)){
		if( getHeadType(t)==TYPE_any) return 1;
		if( getTailType(t)==TYPE_any) return 1;
	}
	return 0;
}
@-
For a polymorphic commands we do not generate a cloned version.
It suffices to determine the actual return value taking into
account the type variable constraints.
@c
malType getPolyReturn(MalBlkPtr cmd, InstrPtr pp, int polytype[2*MAXARG]){
	int hi,ti,i;
	int head= TYPE_any, tail = TYPE_any;
	malType t= getArgType(cmd,pp,0);

	if( !isPolymorphicArgument(cmd,pp,0)) return t;
	hi = getHeadIndex(t);
	ti = getTailIndex(t);

	if( hi == 0)
		head= getHeadType(t);
	else head = polytype[hi];
	if( ti == 0)
		tail= getTailType(t);
	else tail = polytype[ti];

	if( isaBatType(t))
		return newBatType(head,tail);
	return tail;
}
@-
Each time we encounter a polymorphic argument, we update the
list of type variables. This routine assumes that the type
index is indeed smaller than MAXARG. 
(The parser currently enforces a single digit )
Note that type variables are only relevant from 1..
The polymorphic type 'any' does never constraint an operation.
@c
int updPolyType(int formal, int actual, int polytype[2*MAXARG])
{
	int h,i;
#ifdef DEBUG_MAL_RESOLVE
	if(tracefcn) printf("%s %s %s %s %d %d\n",
		malTypeName(formal),
		malTypeName(actual),
		malTypeName(getHeadType(actual)),
		malTypeName(getTailType(actual)),
		getHeadIndex(formal),
		getTailIndex(formal));
#endif
	if( isaBatType(formal)){
		if( !isaBatType(actual)) {
			return 1;
		}
		if( getHeadType(formal)== TYPE_any ){
			h= getHeadIndex(formal);
			if( polytype[h] == malAnyType ){
				polytype[h]= getHeadType(actual);
			}
			if( getHeadType(actual) != polytype[h] && h){
#ifdef DEBUG_MAL_RESOLVE
			if( tracefcn) printf("exit bat %d<>%d\n",
				getHeadType(actual), polytype[h]);
#endif
				return 1;
			}
		}
	}
	if( getTailType(formal)== TYPE_any){
			h= getTailIndex(formal);
			if( polytype[h] == malAnyType ){
				polytype[h]= getTailType(actual);
			}
			if( getTailType(actual) != polytype[h] && h) {
#ifdef DEBUG_MAL_RESOLVE
			if( tracefcn) printf("exit %d<>%d\n",
				getTailType(actual), polytype[h]);
#endif
				return 1;
			}
	}
	return 0;
}
