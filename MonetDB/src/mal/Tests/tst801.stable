# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## partial definition of the object space for MIL
## it is subordinate to the MIL space dealing with persistent bats
## CONST STORE_MEM   := 0; 
## CONST STORE_MMAP  := 1; 
## CONST STORE_COMPR := 2; 
#
#module constants;
#
##the variables introduced in main are retained as globals
#function main():void;
#	deposit("STORE_MEM",0:int);
#	deposit("STORE_MMAP",1:int);
#	deposit("STORE_COMPR",2:int);
#end function;
function Admin.main():void;	#0:void (main:void)
	const.deposit("STORE_MEM",0);	#1:oid ($1:void)($2:str)($3:int)
	const.deposit("STORE_MMAP",1);	#2:oid ($4:void)($5:str)($6:int)
	const.deposit("STORE_COMPR",2);	#3:oid ($7:void)($8:str)($9:int)
end function;	#4:void 
#
## takeing uses the 'root' versions.
#function take(v:str):any;
#	printf("looking for %s\n",v);
#	w:= take(v);
#	return w:
#
## release is overloaded for testing only
#function release(v:any):void;
#	BoxException:= "releasing a constant is forbidden";
#	raise BoxException;
#end function;
function constants.release(v:str,v:str):void;	#0:void (release:void)(v:str)(v:str)
	system.printf("looking for %s\n",v);	#1:int ($2:int)($3:str)(v:str)
	w := const.take(v);	#2:void (w:any)(v:str)
	return w;	#3:void (w:any)
	BoxException := "releasing a constant is forbidden";	#4:str (BoxException:str)($6:str)
	raise BoxException;	#5:str (BoxException:str)
end function;	#6:void 
#
## accept the definition of a new constant
#function deposit(v:any,name:str) = space_deposit;
#
#
function Admin.main():void;	#0:void (main:void)
	const.deposit("STORE_MEM",0);	#1:oid ($1:void)($2:str)($3:int)
	const.deposit("STORE_MMAP",1);	#2:oid ($4:void)($5:str)($6:int)
	const.deposit("STORE_COMPR",2);	#3:oid ($7:void)($8:str)($9:int)
end function;	#4:void 
>