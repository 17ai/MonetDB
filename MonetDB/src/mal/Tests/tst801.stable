# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## partial definition of the object space for MIL
## it is subordinate to the MIL space dealing with persistent bats
## CONST STORE_MEM   := 0; 
## CONST STORE_MMAP  := 1; 
## CONST STORE_COMPR := 2; 
#
#module constants;
#
##the variables introduced in main are retained as globals
#function main():void;
#	deposit("STORE_MEM",0:int);
#	deposit("STORE_MMAP",1:int);
#	deposit("STORE_COMPR",2:int);
#end function;
function Admin.main():void;	#0:void (main:void)
	deposit("STORE_MEM",0);	#1 unknown:void ($1:any)($2:str)($3:int)
	deposit("STORE_MMAP",1);	#2 unknown:void ($4:any)($5:str)($6:int)
	deposit("STORE_COMPR",2);	#3 unknown:void ($7:any)($8:str)($9:int)
end function;	#4:void 
#
## takeing uses the 'root' versions.
#function take(v:str):any;
#	printf("looking for %s\n",v);
#	w:= take(v);
#	return w:
#
## release is overloaded for testing only
#function release(v:any):void;
#	raise "releasing a constant is forbidden";
#
## accept the definition of a new constant
#function deposit(v:any,name:str) = space_deposit;
#
#
function Admin.main():void;	#0:void (main:void)
	deposit("STORE_MEM",0);	#1 unknown:void ($1:any)($2:str)($3:int)
	deposit("STORE_MMAP",1);	#2 unknown:void ($4:any)($5:str)($6:int)
	deposit("STORE_COMPR",2);	#3 unknown:void ($7:any)($8:str)($9:int)
end function;	#4:void 
!ERROR: 'deposit' undefined in constants.main[1]
!ERROR: 'deposit' undefined in constants.main[2]
!ERROR: 'deposit' undefined in constants.main[3]
!ERROR: 	raise "releasing a constant is forbidden";
!	             ^<identifier> expected
!ERROR: 'take' undefined in constants.deposit[2]
!ERROR: MALexception:Admin.main[1]:Instruction type not fixed
MALexception:Admin.main[5]:propagated
>