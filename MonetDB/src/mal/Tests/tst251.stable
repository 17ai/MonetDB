# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## The series tst2?? is a patched version of suite_00
## The first and foremost BAT operations
#
#b:= new(int,int);
#insert(b,1,15);
#insert(b,2,4);
#n0  := int(nil);
#insert(b,3,n0);
#insert(b,4,16);
#insert(b,5,25);
#insert(b,6,36);
#insert(b,7,49);
#insert(b,8,64);
#insert(b,9,n0);
#insert(b,n0,n0);
#insert(b,n0,81);
#print(b);
#barrier v:= bunStream(b,h:int,t:int);
#	printf("[ %d,",h);
#	printf("%d]\n",t);
#redo v;
#end v;
#
#
## String stuff
#c:= new(int,str);
#insert(c,1,"hello");
#insert(c,2,"brave");
#insert(c,3,"world");
#insert(c,4,"");
#x:= str(nil);
#insert(c,5,x);
#insert(c,6,"!");
#print(c);
#barrier v:= bunStream(c,h,ts:str);
#	printf("[%d,",h);
#	printf("%s]\n",ts);
#	redo v;
#end v;
#
#
function Admin.main():int;	#0:void (main:int)
	b := mal.new(int,int);	#1:BAT (b:bat[int,int])(int:int)(int:int)
	bat.insert(b,1,15);	#2:BAT ($3:bat[int,int])(b:bat[int,int])($4:int)($5:int)
	bat.insert(b,2,4);	#3:BAT ($6:bat[int,int])(b:bat[int,int])($7:int)($8:int)
	n0 := calc.int(nil);	#4:int (n0:int)($10:void)
	bat.insert(b,3,n0);	#5:BAT ($11:bat[int,int])(b:bat[int,int])($12:int)(n0:int)
	bat.insert(b,4,16);	#6:BAT ($13:bat[int,int])(b:bat[int,int])($8:int)($14:int)
	bat.insert(b,5,25);	#7:BAT ($15:bat[int,int])(b:bat[int,int])($16:int)($17:int)
	bat.insert(b,6,36);	#8:BAT ($18:bat[int,int])(b:bat[int,int])($19:int)($20:int)
	bat.insert(b,7,49);	#9:BAT ($21:bat[int,int])(b:bat[int,int])($22:int)($23:int)
	bat.insert(b,8,64);	#10:BAT ($24:bat[int,int])(b:bat[int,int])($25:int)($26:int)
	bat.insert(b,9,n0);	#11:BAT ($27:bat[int,int])(b:bat[int,int])($28:int)(n0:int)
	bat.insert(b,n0,n0);	#12:BAT ($29:bat[int,int])(b:bat[int,int])(n0:int)(n0:int)
	bat.insert(b,n0,81);	#13:BAT ($30:bat[int,int])(b:bat[int,int])(n0:int)($31:int)
	mal.print(b);	#14:int ($32:int)(b:bat[int,int])
barrier	v := mal.bunStream(b,h,t);	#15:lng (v:lng)(b:bat[int,int])(h:int)(t:int)
	system.printf("[ %d,",h);	#16:int ($36:int)($37:str)(h:int)
	system.printf("%d]\n",t);	#17:int ($38:int)($39:str)(t:int)
	redo v ;	#18:lng (v:lng)
end	v;	#19:lng (v:lng)
	c := mal.new(int,str);	#20:BAT (c:bat[int,str])(int:int)(str:str)
	bat.insert(c,1,"hello");	#21:BAT ($42:bat[int,str])(c:bat[int,str])($43:int)($44:str)
	bat.insert(c,2,"brave");	#22:BAT ($45:bat[int,str])(c:bat[int,str])($46:int)($47:str)
	bat.insert(c,3,"world");	#23:BAT ($48:bat[int,str])(c:bat[int,str])($49:int)($50:str)
	bat.insert(c,4,"");	#24:BAT ($51:bat[int,str])(c:bat[int,str])($52:int)($53:str)
	x := calc.str(nil);	#25:str (x:str)($55:void)
	bat.insert(c,5,x);	#26:BAT ($56:bat[int,str])(c:bat[int,str])($57:int)(x:str)
	bat.insert(c,6,"!");	#27:BAT ($58:bat[int,str])(c:bat[int,str])($59:int)($60:str)
	mal.print(c);	#28:int ($61:int)(c:bat[int,str])
barrier	v := mal.bunStream(c,h,ts);	#29:lng (v:lng)(c:bat[int,str])(h:int)(ts:str)
	system.printf("[%d,",h);	#30:int ($63:int)($64:str)(h:int)
	system.printf("%s]\n",ts);	#31:int ($65:int)($66:str)(ts:str)
	redo v ;	#32:lng (v:lng)
end	v;	#33:lng (v:lng)
end function;	#34:void 
#-----------------#
# BAT:	  tmp_5	  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ 1,15]
[ 2,4]
[ 3,nil]
[ 4,16]
[ 5,25]
[ 6,36]
[ 7,49]
[ 8,64]
[ 9,nil]
[ nil,nil]
[ nil,81]
#-------------------------#
# BAT:	  tmp_4		  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "brave"	  ]
[ 3,	  "world"	  ]
[ 4,	  ""		  ]
[ 5,	  nil		  ]
[ 6,	  "!"		  ]
[1,hello]
[2,brave]
[3,world]
[4,]
[5,nil]
[6,!]
>