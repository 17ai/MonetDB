# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## squeezer integration in MAL code block.
## this code fragment should evolve to a baseline test
## for constant propagation and constant expression optimization
#
#s0:= squeezer.prepare();
#c1:= 0;
#c2:= 1;
#c3:= -1;	
#
#i1:=  c3;	# replace i1 as c0, unless reassigned
#i2:= c1+c3;	# evalutate constant
#
function Admin.main():int;	#0:(main:int->0)
	s0 := squeezer.prepare();	#1:(s0:int->13)
	c1 := 0;	#2:(c1:int->14)($15:int->15)
	c2 := 1;	#3:(c2:int->16)($17:int->17)
	c3 := -1;	#4:(c3:int->18)($19:int->19)
	i1 := c3;	#5:(i1:int->20)(c3:int->18)
	i2 := arith.+(c1,c3);	#6:(i2:int->21)(c1:int->14)(c3:int->18)
end function;	#7:
Modified stmt sequence
function Admin.main():int;	#0:(main:int->0)
	c1 := 0;	#2:(c1:int->14)($15:int->15)
	c2 := 1;	#3:(c2:int->16)($17:int->17)
	c3 := -1;	#4:(c3:int->18)($19:int->19)
	i1 := c3;	#5:(i1:int->20)(c3:int->18)
	i2 := arith.+(c1,c3);	#6:(i2:int->21)(c1:int->14)(c3:int->18)
end function;	#7:
>