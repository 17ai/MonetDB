# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## the next step is to trace the call of a mal function call
#
#command + (L:any::1,R:any::1):any::1 = addIntInt; 
#
#function doitOnce():int;
COMMAND Service.+(L:any::1,R:any::1):any::1 = addIntInt;	#0 unknown:(addIntInt:any::1->3)(L:any::1->1)(R:any::1->2)
#	z:= 12;
#	return z;
#end function;
FUNCTION doitOnce():int;	#0:(doitOnce:int->0)
	z := 12;	#1:(z:int->2)($1:int->1)
	RETURN z;	#2:(z:int->2)
END FUNCTION;	#3:
#
#function doitTwice(i:int):int;
#	j:= 2;
#	k:= 11111;
#	i:= j+k;
#	return i;
#end function;
FUNCTION doitTwice(i:int):int;	#0:(doitTwice:int->0)(i:int->1)
	j := 2;	#1:(j:int->3)($2:int->2)
	k := 11111;	#2:(k:int->5)($4:int->4)
	i := Service.+(j,k);	#3:(i:int->1)(j:int->3)(k:int->5)
	RETURN i;	#4:(i:int->1)
END FUNCTION;	#5:
#
#
#a:=1;
#b:= doitOnce();
#c:= 2;
#d:= doitTwice(3);
#c:= 3;
#d:= doitTwice("wrong");
#
FUNCTION Service.main():int;	#0:(main:int->0)
	a := 1;	#1:(a:int->2)($1:int->1)
	b := Service.doitOnce();	#2:(b:int->3)
	c := 2;	#3:(c:int->5)($4:int->4)
	d := Service.doitTwice(3);	#4:(d:int->7)($6:int->6)
	c := 3;	#5:(c:int->5)($6:int->6)
	d := doitTwice("wrong");	#6 unknown:(d:int->7)($8:str->8)
END FUNCTION;	#7:
mal_interpreter address Service.+ unknown
CATCH ERROR MALexception:Service.main[6]:Instruction type not fixed

MALexception:Service.main[6]:Instruction type not fixed
