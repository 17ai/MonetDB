# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## squeezer integration in MAL code blocks.
## the squeezer.access(V) implements a simple pruning of the
## code to disallow access to a particular function
## it is also the first function passing a parameter
##
## the access() authorization function raises an exception if the
## current value of V is <= 0 . 
#
#	p1:= 1;
#	s0:= squeezer.access("p1");
#	p2:= p1;
##exception block;
#catch	IllegalAccess;
#	c4:= "should not come here";
#	p3:= p1;
#end	IllegalAccess;
#	p4:= p1;
#
function Admin.main():int;	#0:(main:int->0)
	p1 := 1;	#1:(p1:int->1)($2:int->2)
	s0 := squeezer.access("p1");	#2:(s0:int->3)($4:str->4)
	p2 := p1;	#3:(p2:int->5)(p1:int->1)
catch	IllegalAccess;	#4:(IllegalAccess:str->6)
	c4 := "should not come here";	#5:(c4:str->7)($8:str->8)
	p3 := p1;	#6:(p3:int->9)(p1:int->1)
end	IllegalAccess;	#7:(IllegalAccess:str->6)
	p4 := p1;	#8:(p4:int->10)(p1:int->1)
end function;	#9:
entering sqzAccess blocking 1 p1
Modified stmt sequence
function Admin.main():int;	#0:(main:int->0)
	p1 := 1;	#1:(p1:int->1)($2:int->2)
	squeezer.AccessTst(p1);	#2:($11:int->11)(p1:int->1)
	p2 := p1;	#3:(p2:int->5)(p1:int->1)
catch	IllegalAccess;	#4:(IllegalAccess:str->6)
	c4 := "should not come here";	#5:(c4:str->7)($8:str->8)
	squeezer.AccessTst(p1);	#6:($12:int->12)(p1:int->1)
	p3 := p1;	#7:(p3:int->9)(p1:int->1)
end	IllegalAccess;	#8:(IllegalAccess:str->6)
	squeezer.AccessTst(p1);	#9:($13:int->13)(p1:int->1)
	p4 := p1;	#10:(p4:int->10)(p1:int->1)
end function;	#11:
Entering AccessTst with argument 1
>