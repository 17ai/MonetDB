# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## squeezer integration in MAL code blocks.
## the squeezer.access(V) implements a simple pruning of the
## code to disallow access to a particular function
## it is also the first function passing a parameter
##
## the access() authorization function raises an exception if the
## current value of V is <= 0 . 
#
#	p1:= -1;
#	s0:= squeezer.access("p1");
#	c1:= 2;
#	c2:= arith.+(p1,p1);	# forbidden function
#	c4:= "should not come here";
##exception 
#catch WrongBlock;
#	err:=true;
#end WrongBlock;
#
#catch	IllegalAccess;
#	n0:=0;
#end	IllegalAccess;
#	x:= "end of program";
#
function Admin.main():int;	#0:void (main:int)
	p1 := -1;	#1:int (p1:int)($2:int)
	s0 := squeezer.access("p1");	#2:int (s0:int)($4:str)
	c1 := 2;	#3:int (c1:int)($6:int)
	c2 := arith.+(p1,p1);	#4:int (c2:int)(p1:int)(p1:int)
	c4 := "should not come here";	#5:str (c4:str)($9:str)
catch	WrongBlock;	#6:str (WrongBlock:str)
	err := true;	#7:bit (err:bit)($12:bit)
end	WrongBlock;	#8:str (WrongBlock:str)
catch	IllegalAccess;	#9:str (IllegalAccess:str)
	n0 := 0;	#10:int (n0:int)($15:int)
end	IllegalAccess;	#11:str (IllegalAccess:str)
	x := "end of program";	#12:str (x:str)($17:str)
end function;	#13:void 
entering sqzAccess blocking 1 p1
Modified stmt sequence
function Admin.main():int;	#0:void (main:int)
	p1 := -1;	#1:int (p1:int)($2:int)
	c1 := 2;	#2:int (c1:int)($6:int)
	squeezer.AccessTst(p1);	#3:int ($18:int)(p1:int)
	squeezer.AccessTst(p1);	#4:int ($19:int)(p1:int)
	c2 := arith.+(p1,p1);	#5:int (c2:int)(p1:int)(p1:int)
	c4 := "should not come here";	#6:str (c4:str)($9:str)
catch	WrongBlock;	#7:str (WrongBlock:str)
	err := true;	#8:bit (err:bit)($12:bit)
end	WrongBlock;	#9:str (WrongBlock:str)
catch	IllegalAccess;	#10:str (IllegalAccess:str)
	n0 := 0;	#11:int (n0:int)($15:int)
end	IllegalAccess;	#12:str (IllegalAccess:str)
	x := "end of program";	#13:str (x:str)($17:str)
end function;	#14:void 
Entering AccessTst with argument -1
>