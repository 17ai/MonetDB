# Monet Database Server V5.0
# Copyright (c) 1993-2001, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
# gdk_dbfarm:/ufs/mk/monet_5-0/Linux/../dbfarm
# gdk_dbname:demo
# gdk_dbdir:/ufs/mk/monet_5-0/Linux/../dbfarm/demo
# gdk_distr:/ufs/mk/monet_5-0/Linux
# monetrc:/ufs/mk/.monet.conf
## squeezer integration in MAL code blocks.
## the squeezer.access(V) implements a simple pruning of the
## code to disallow access to a particular function
## it is also the first function passing a parameter
##
## the access() authorization function raises an exception if the
## current value of V is <= 0 . 
#
#	p1:= -1;
#	s0:= squeezer.access("p1");
#	c1:= 2;
#	c2:= arith.+(p1,p1);	# forbidden function
#	c4:= "should not come here";
##exception 
#catch WrongBlock;
#	err:=true;
#end WrongBlock;
#
#catch	IllegalAccess;
#	n0:=0;
#end	IllegalAccess;
#	x:= "end of program";
#
function Admin.main():int;	#0:(main:int->0)
	p1 := -1;	#1:(p1:int->1)($2:int->2)
	s0 := squeezer.access("p1");	#2:(s0:int->3)($4:str->4)
	c1 := 2;	#3:(c1:int->5)($6:int->6)
	c2 := arith.+(p1,p1);	#4:(c2:int->7)(p1:int->1)(p1:int->1)
	c4 := "should not come here";	#5:(c4:str->8)($9:str->9)
catch	WrongBlock;	#6:(WrongBlock:str->10)
	err := true;	#7:(err:bit->11)($12:bit->12)
end	WrongBlock;	#8:(WrongBlock:str->10)
catch	IllegalAccess;	#9:(IllegalAccess:str->13)
	n0 := 0;	#10:(n0:int->14)($15:int->15)
end	IllegalAccess;	#11:(IllegalAccess:str->13)
	x := "end of program";	#12:(x:str->16)($17:str->17)
end function;	#13:
entering sqzAccess blocking 1 p1
Modified stmt sequence
function Admin.main():int;	#0:(main:int->0)
	p1 := -1;	#1:(p1:int->1)($2:int->2)
	c1 := 2;	#2:(c1:int->5)($6:int->6)
	squeezer.AccessTst(p1);	#3:($18:int->18)(p1:int->1)
	squeezer.AccessTst(p1);	#4:($19:int->19)(p1:int->1)
	c2 := arith.+(p1,p1);	#5:(c2:int->7)(p1:int->1)(p1:int->1)
	c4 := "should not come here";	#6:(c4:str->8)($9:str->9)
catch	WrongBlock;	#7:(WrongBlock:str->10)
	err := true;	#8:(err:bit->11)($12:bit->12)
end	WrongBlock;	#9:(WrongBlock:str->10)
catch	IllegalAccess;	#10:(IllegalAccess:str->13)
	n0 := 0;	#11:(n0:int->14)($15:int->15)
end	IllegalAccess;	#12:(IllegalAccess:str->13)
	x := "end of program";	#13:(x:str->16)($17:str->17)
end function;	#14:
Entering AccessTst with argument -1
>