@t MAL extensions
@a Martin Kersten
@v 0.1
@* MAL extensions
This module contains enhances to the MAL interpreter layer, such as
iterators over ranges and bats, object management, access to the debugger, ....
This module is loaded directly after the kernel modules and provides
a first abstraction layer.

@+ Iterator primitives
This module contains the framework for the construction of iterators.
Iterators enumerate elements in a collection defined by a few paramaters,
e.g. a lower/upper bound, or a bat. An iterator is initialized in the first
call by recognizing that the control variable lies outside the intended
collection.

@mal
# The routines below are linked with the kernel by default

module mal;

command nextElement(i:lng, first:lng, last:lng):bit = lngForloop; 
command nextElement(i:int, first:int, last:int):bit = intForloop; 
command nextElement(i:sht, first:sht, last:sht):bit = shtForloop; 
command nextElement(i:chr, first:chr, last:chr):bit = chrForloop; 

command nextElement(i:flt, first:flt, last:flt, step:flt):bit = fltForloopStep; 
command nextElement(i:dbl, first:dbl, last:dbl, step:dbl):bit = dblForloopStep; 
command nextElement(i:lng, first:lng, last:lng, step:lng):bit = lngForloopStep; 
command nextElement(i:chr, first:chr, last:chr, step:chr):bit = chrForloopStep; 
command nextElement(i:int, first:int, last:int, step:int):bit = intForloopStep; 
command nextElement(i:sht, first:sht, last:sht, step:sht):bit = shtForloopStep; 

@+ Object management

BATs are always identified by their reference number in the BAT buffer pool.
We assume that these references are 'safe', i.e. they denote the intended
BAT. This means that front-ends should not destroy/remove temporary BATS
without garbage collection of the references held. The alternative way
is to call for a fresh reference to a BAT using its (hopefully) unique
with the bind() command. A reference can be released using the
release(), but it is up to the buffer pool to actually release the
storage held.

@mal
command bind(typevar:any, name:str):any::1 = CMDbind
comment "Locates the typed variable in the object space";

command bind(nme:str): bat[any,any] = CMDbind
comment "Locates the variable in the object space";

command bind(typevar:bat[any::1,any::2],nme:str): bat[any::1,any::2] = CMDbind2
comment "Locates the bat in the object space ";

command release(b:bat[any,any]):void = CMDrelease
comment "Release the BAT from the client pool";

@-
A BATloop construct uses an integer cursor to keep track of its
position in the underlying table. To avoid side-effects, the access mode
is set to readonly and restored upon leaving the barrier.
The head and tail elements can be obtained
using the fetchHead and fetchTail functions, which are to be defined for
all atomary types.
@= fetch
@-
postponed until information is available
command fetchHead(b:bat[@1, any], cursor:lng):@1= CMD@1fetchHeadImpl;
command fetchTail(b:bat[any, @1], cursor:lng):@1= CMD@1fetchTailImpl;
@mal
command batloop(b:bat[any,any], cursor:lng):bit = batloopStep comment "";
	@:fetch(any)@
	@:fetch(bit)@
	@:fetch(chr)@
	@:fetch(sht)@
	@:fetch(int)@
	@:fetch(lng)@
	@:fetch(oid)@
	@:fetch(ptr)@
	@:fetch(str)@
	@:fetch(flt)@
	@:fetch(dbl)@
@-
@+ The Monet Debugger interface
To enable ease of debugging and performance monitoring, the MAL interpreter
comes with a hardwired gdb-like text-based debugger.
@mal
pattern mdb():void = MDBmdb
	comment "Start interactive debugger";

@+ Dummy code 
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _ITERATOR_H
#define _ITERATOR_H
#endif /* _ITERATOR_H*/
@c
#include "monet.h"

int batloopStep(int *ret){ return 0;}

int CMDbind(int *ret, str *nme){
        GDKerror("bind() not yet implemented\n");
        return GDK_SUCCEED;
}
int CMDbind2(int *ret, str *dict, str *nme){
        GDKerror("bind() not yet implemented\n");
        return GDK_SUCCEED;
}
int CMDrelease(int *ret, str *nme){
        GDKerror("release() not yet implemented\n");
        return GDK_SUCCEED;
}
