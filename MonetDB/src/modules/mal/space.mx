@f space
@t MAL object spaces
@a Martin Kersten
@v 0.1
@* Object space management

BATs are always identified by their reference number in the BAT buffer pool.
We assume that these references are 'safe', i.e. they denote the intended
BAT. This means that front-ends should not destroy/remove temporary BATS
without garbage collection of the references held. The alternative way
is to call for a fresh reference to a BAT using its (hopefully) unique
with the bind() command. A reference can be released using the
release(), but it is up to the buffer pool to actually release the
storage held.

@mal
module space;

pattern take(name:str):any = CMDspace_takeAny
comment "Locates the typed variable in the object space";

pattern take(typevar:any, name:str):bit = CMDspace_take
comment "Locates the typed variable in the object space";

pattern take(typevar:bat[any::1,any::2],nme:str): bit = CMDspace_take2
comment "Locates the bat in the object space ";

pattern releaseAll():void = CMDspace_releaseAll
comment "Release all BAT from the client pool";

pattern release(v:any, name:str):bit = CMDspace_release
comment "Release the BAT from the client pool";

pattern lookup(v:any,nme:str): bit = CMDspace_lookup
comment "Locates the variable in the object space";

command iterator(space:str, cursor:int,name:str,value:str):bit=CMDspace_iterator
comment "Locates the variable in the object space";
@-
@+ Dummy code 
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _ITERATOR_H
#define _ITERATOR_H
#endif /* _ITERATOR_H*/
@c
#include "monet.h"

int batloopStep(int *ret){ return 0;}

int CMDspace_take2(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_take not yet implemented\n");
	return GDK_SUCCEED;
}

int CMDspace_takeAny(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_takeAny not yet implemented\n");
	return GDK_SUCCEED;
}

int CMDspace_take(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_take not yet implemented\n");
	return GDK_SUCCEED;
}

int CMDspace_release(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_release not yet implemented\n");
	return GDK_SUCCEED;
}

int CMDspace_releaseAll(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_releaseAll not yet implemented\n");
	return GDK_SUCCEED;
}

int CMDspace_lookup(MalBlkPtr m, MalStkPtr s, InstrPtr p){
	printf("space_lookup not yet implemented\n");
	return GDK_SUCCEED;
}
int CMDspace_iterator(int *ret, str *space, int *idx, str *name, str *value){
	printf("space_iterator not yet implemented\n");
	return GDK_SUCCEED;
}
