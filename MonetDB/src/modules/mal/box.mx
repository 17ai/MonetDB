@f box
@t MAL constant management
@a Martin Kersten
@v 0.1
@* Constant space management

This module shows the behavior of a simple box of objects.
Objects are stored into the box using deposit() and taken
out with take(). Once you are done, elements can be
removed by name or reference using discard().

A box should be opened before being used. It is typically used
to set-up the list of current users and to perform authorization.
@mal
module box;

pattern open(bname:str):void= CMDbox_open
comment "Locate the boxant box and open it ";

pattern close(bname:str):void= CMDbox_close
comment "Close the box ";

pattern destroy(bname:str):void= CMDbox_destroy
comment "Destroy the box ";

pattern take(bname:str,name:str):any = CMDbox_take
comment "Locates the typed value in the boxant box";

pattern deposit(bname:str,name:str,v:any):void = CMDbox_deposit
comment "Enter a new value into the boxant box";

pattern releaseAll(bname:str,):void = CMDbox_releaseAll
comment "Release all boxants for this client";

pattern release(bname:str,name:str,val:any):void = CMDbox_release
comment "Release the BAT from the client pool";

pattern release(bname:str,name:str):void = CMDbox_release
comment "Release the BAT from the client pool";

pattern toString(bname:str,name:str):str = CMDbox_toString
comment "Get the string representation of the i-th element in the box";

pattern discard(bname:str,name:str):void = CMDbox_discard
comment "Release the BAT from the client pool";

pattern iterator(nme:str):lng = CMDbox_iterator
comment "Locates the next element in the boxant box";
@-
@+ Dummy code 
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#ifndef _ITERATOR_H
#define _ITERATOR_H
#endif /* _ITERATOR_H*/
@c
#include "mal_box.h"

int CMDbox_open(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	name = (str) getArgValue(stk,pci,1);
	if(openBox(name) != 0) return GDK_SUCCEED;
	return (int) raiseException(mb,stk->pc,"boxException",
		"failed to open box\n");
}

int CMDbox_close(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	name = (str) getArgValue(stk,pci,1);
	if( closeBox(name,FALSE) ==0) return GDK_SUCCEED;
	return (int) raiseException(mb,stk->pc,"boxException",
		"failed to close box\n");
}
int CMDbox_destroy(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	Box box;
	str name;
	@:OpenBox@
	destroyBox(name);
	return GDK_SUCCEED;
}
@-
Access to a box calls for resolving the first parameter
to a named box.
@= OpenBox
	name = (str) getArgValue(stk,pci,1);
	box= findBox(name);
	if( box ==0) 
	return (int) raiseException(mb,stk->pc,"boxException",
		"box is not open\n");
@-
@c
int CMDbox_deposit(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	ValPtr v;
	Box box;

	@:OpenBox@
	name = (str) getArgValue(stk,pci,2);
	v = &stk->stk[pci->argv[3]];
	if(depositBox(box,name,v) == GDK_FAIL) {
		char msg[1024];
		sprintf(msg,"%s:failed to deposit box\n",name);
		return (int) raiseException(mb,stk->pc,"boxException",msg);
	}
	return GDK_SUCCEED;
}

int CMDbox_take(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	Box box;
	ValPtr v;

	@:OpenBox@
	name = (str) getArgValue(stk,pci,2);
	v = &stk->stk[pci->argv[0]];
	if(takeBox(box,name,v)== GDK_FAIL) {
		char msg[1024];
		sprintf(msg,"%s:failed to take from box\n",name);
		return (int) raiseException(mb,stk->pc,"boxException",msg);
	}
	return GDK_SUCCEED;
}

int CMDbox_release(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	Box box;

	@:OpenBox@
	name = (str) getArgValue(stk,pci,2);
	releaseBox(box,name);
	return GDK_SUCCEED;
}

int CMDbox_releaseAll(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	Box box;

	@:OpenBox@
	releaseAllBox(box);
	return GDK_SUCCEED;
}

int CMDbox_discard(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	Box box;

	@:OpenBox@
	name = (str) getArgValue(stk,pci,2);
	if( discardBox(box,name) == GDK_FAIL){
		char msg[1024];
		sprintf(msg,"failed to discard '%s' from box '%s'\n",
			name, box->name);
		return (int) raiseException(mb,stk->pc,"boxException",msg);
	}
	return GDK_SUCCEED;
}

int CMDbox_toString(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
	Box box;

	@:OpenBox@
	return GDK_SUCCEED;
}

int CMDbox_iterator(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	str name;
        Box box;
        lng *cursor;
        ValPtr v;

        @:OpenBox@
        cursor= (lng*) getArgValue(stk,pci,0);
        v= &stk->stk[pci->argv[2]];
        return nextBoxElement(box, cursor, v);
}
