@t Monet Performance Monitor
@a Martin Kersten
@* Introduction
A key issue in developing fast programs using the Monet database
back-end requires a keen eye on where performance is lost.
Although performance tracking and measurements are highly
application dependent, a simple to use tool makes life
a lot easier.

Inspired by programs like xosview and xload, we
provide a simple Java application that reads a stream
of log events generated by the Monet kernel upon request.

Activation of the performance monitor has a global effect,
i.e. all concurrent actions on the kernel are traced.

@+ Monet Event Logger
The Monet Event Logger generates records of each event of
interest indicated by a log filter, i.e. a pattern over
module and function names. 

The log record contents is derived from counters being
(de-)activated. The log record is stored as an xml-document
for postprocessing.

A complete list of recognized counters is shown below.
@T

mpm.activate("time");	# wall-clock time
mpm.activate("client");	# client name
mpm.activate("cpu");	# cpu time in nano-seconds 
mpm.activate("mal");	# actual MAL instruction executed
mpm.activate("prop");   #  destination variable properties
mpm.activate("mallinfo");#  memory allocation information
mpm.activate("rusage"); #  IO activity

@-

@mal
module profiler;

command activate(name:str)= CMDactivateProfiler
	comment "Make the specified counter active.";

command deactivate(name:str)= CMDdeactivateProfiler
	comment "Deactivate the counter";

command setFilter(mod:str,fcn:str)= CMDsetFilterProfiler
	comment "Generate an event record for all function calls that
	satisfy the 'regular' expression mod.fcn. A wildcard (*) can be
	used as name to identify all"

command clrFilter(mod:str,fcn:str)= CMDclrFilterProfiler
	comment "Clear the performance trace bit of the selected functions.";

command setLogFile(fnme:str)= CMDsetFileProfiler
	comment "Send the log event records to a given file \n");

command setStartPoint(mod:str,fcn:str)= CMDstartPointProfiler
	comment "Start performance tracing upon calling mod.fcn\n");

command setEndPoint(mod:str,fcn:str)= CMDendPointProfiler
	comment "Start performance tracing upon calling mod.fcn\n");

command start()= CMDstartProfiler
	comment "Start performance tracing\n");

command stop()= CMDstopProfiler
	comment "Stop performance tracing\n");

@+ Implementation
The commands merely encapsulate the functionality provided by
mal_profiler, which should be explicitly compiled with the kernel, because
its generates a noticable overhead.
@h
/*
 * The contents of this file are subject to the Monet Public
 * License Version 1.1 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at 
 * http://www.monetsolutions.com/Download/Licensing/MonetPL-1.1.html
 * 
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 * 
 * The Original Code is the Monet Database System.
 * 
 * The Initial Developer of the Original Code is CWI.
 * Portions created by CWI are Copyright (C) 1997-2001 CWI.  
 * All Rights Reserved.
 * 
 * Contributor(s): Martin Kersten <Martin.Kersten@cwi.nl>
 */
#include "monet.h"
#include <stdarg.h>
#include <time.h>
#include "gdk.h"
#include "mal_stack.h"
#include "mal_resolve.h"
#include "mal_squeezer.h"
#include "mal_client.h"

@-
Using the Monet Performance Profiler is contrainted by the mal_profiler.
@= checkProfiler
	#ifndef MALprofiler
		GDKerror("Monet not compiled for performance monitoring\n");
		return GDK_FAIL;
	#endif
@c
#include "profiler.h"

int CMDactivateProfiler(int *res, str *name){
	@:checkProfiler@
	activateCounter(*name);
	return GDK_SUCCEED;
}

int CMDdeactivateProfiler(int *res, str *name){
	@:checkProfiler@
	deactivateCounter(*name);
	return GDK_SUCCEED;
}

int CMDsetFilterProfiler(int *res, str *mod, str *fcn){
	@:checkProfiler@
	eventFilter(getClient()->nspace, *mod, *fcn);
	return GDK_SUCCEED;
}
int CMDclrFilterProfiler(int *res, str *mod, str *fcn){
	@:checkProfiler@
	resetFilter(getClient()->nspace, *mod, *fcn);
	return GDK_SUCCEED;
}

int CMDsetFileProfiler(int *res, str *fnme){
	@:checkProfiler@
	printf("# Send the Monet performance events to a file\n");
	setLogFile(getClient()->nspace, *fnme);
	return GDK_SUCCEED;
}

int CMDstartPointProfiler(int *res, str *mod, str *fcn){
	@:checkProfiler@
	printf("# Send the Monet performance events to a file\n");
	setStartPoint(getClient()->nspace, *mod, *fcn);
	return GDK_SUCCEED;
}

int CMDendPointProfiler(int *res, str *mod, str *fcn){
	@:checkProfiler@
	printf("# Send the Monet performance events to a file\n");
	setStartPoint(getClient()->nspace, *mod, *fcn);
	return GDK_SUCCEED;
}

int CMDstopProfiler(int *res){
	@:checkProfiler@
	printf("# Stop the performance monitor\n");
	stopEventLogger();
	return GDK_SUCCEED;
}
int CMDstartProfiler(int *res){
	@:checkProfiler@
	printf("# Start the performance monitor\n");
	return GDK_SUCCEED;
}

