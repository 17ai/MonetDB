@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f sciql
@t SciQL runtime
@a N.Nes, M.Kersten, J.Zhang, M.Ivanova
@+ SciQL
This module contains the additions for the SciQL extensions of SQL.
This current focus is on testing the code generation.
@mal
module sciql;
pattern newDimension(sch:str, tab:str, col:str, kind:int, start:any_1, stop:any_1, step:any_1):bat[:oid,:any_1]
address SCI1D
comment "Define the dimension of a vector";

pattern newDimension(sch:str, tab:str, col:str, kind:int,
	start1:any_1, stop1:any_1, step1:any_1,
	col2:str, start2:any_2, stop2:any_2, step2:any_2
)(:bat[:oid,:any_1], :bat[:oid,:any_2])
address SCI2D
comment "Define the dimensions of a 2D space";

pattern newDimension(sch:str, tab:str, col:str, kind:int,
	start1:any_1, stop1:any_1, step1:any_1,
	col2:str, start2:any_2, stop2:any_2, step2:any_2,
	col3:str, start3:any_3, stop3:any_3, step3:any_3
)(:bat[:oid,:any_1], :bat[:oid,:any_2], :bat[:oid,:any_3])
address SCI3D
comment "Define the dimensions of a 3D space";

pattern newDimension(sch:str, tab:str, col:str, kind:int,
	start1:any_1, stop1:any_1, step1:any_1,
	col2:str, start2:any_2, stop2:any_2, step2:any_2,
	col3:str, start3:any_3, stop3:any_3, step3:any_3,
	col4:str, start4:any_4, stop4:any_4, step4:any_4
)(:bat[:oid,:any_1], :bat[:oid,:any_2], :bat[:oid,:any_3], :bat[:oid,:any_4])
address SCI3D
comment "Define the dimensions of a 4D space";

pattern setDefault(b:bat[:oid,:any_1], def:any_2):bat[:oid,:any_2]
address SCIsetDefault
comment "Create an array instance initialized with default values);
@h
#ifndef _SCIQL_H_
#define _SCIQL_H_
#include "sql.h"	/* includes sql_backend.h */

sql5_export str SQL1D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
sql5_export str SQL2D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
sql5_export str SQL3D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
sql5_export str SQL4D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
sql5_export str SQLdefault(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);

#endif /* _SCIQL_H_ */

@c
#include "monetdb_config.h"
#include "sql_user.h"
#include "sql_mvc.h"
#include "bat5.h"

str SCI1D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) cntxt;
	(void) mb;
	(void) stk;
	(void) pci;
	throw(MAL,"sciql.newDimension",PROGRAM_NYI);
}

str SCI2D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) cntxt;
	(void) mb;
	(void) stk;
	(void) pci;
	throw(MAL,"sciql.newDimension",PROGRAM_NYI);
}

str SCI3D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) cntxt;
	(void) mb;
	(void) stk;
	(void) pci;
	throw(MAL,"sciql.newDimension",PROGRAM_NYI);
}

str SCI4D(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) cntxt;
	(void) mb;
	(void) stk;
	(void) pci;
	throw(MAL,"sciql.newDimension",PROGRAM_NYI);
}

str SCIdefault(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	(void) cntxt;
	(void) mb;
	(void) stk;
	(void) pci;
	throw(MAL,"sciql.setDefault",PROGRAM_NYI);
}
