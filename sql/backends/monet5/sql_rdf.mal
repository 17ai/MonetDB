# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2015 MonetDB B.V.
# All Rights Reserved.

pattern rdfshred (location:str, gname:str, schema:str)
address SQLrdfShred
comment "Procedure that wraps around the shredder of the rdf module in MAL.
Shredding an RDF data file from location results in 7 new tables (6 
permutations of SPO and a mapping) in the RDF schema and an entry to table 
rdf.graph We can then query with SQL queries the RDF triple storeby quering 
tables gid_spo, gid_pso etc., where gid is looked up in rdf.graph";

pattern rdfreorganize (schema:str, table:str, threshold:int, expmode:int)
address SQLrdfreorganize
comment "This procedure call a function from rdf module to extract the relational schema 
from rdf triples. Then, do re-organizing the rdf triples table by clustering according 
to the subject. ";

pattern rdfretrievesubschema (oldschema:str, count:int, keyword:str)
address SQLrdfRetrieveSubschema
comment "Procedure that creates a new schema containing views. 
The views link to the base schema. Wrapper around retrieval() in rdfretrieval.c.";

pattern rdfscan_old(query:str, schema:str)
address SQLrdfScan_old
comment "Old RDF scan operator which query in special form with list of RPs and OPs";

pattern rdfidtostr(id:oid):str
address	SQLrdfidtostr
comment "Convert from oid to string";

pattern batsql.rdfidtostr(v:bat[:oid,:oid]):bat[:oid, :str]
address	SQLrdfidtostr_bat
comment "Convert from oid to string";

pattern rdfdeserialize()
address	SQLrdfdeserialize
comment "Deserialize dump BATs to a SimpleCS set";

pattern rdfprepare()
address	SQLrdfprepare
comment "Preparation before executing sparql queries";

command rdfstrtoid(urlstr:str):oid
address	SQLrdfstrtoid
comment "Convert from string to encoded id";

#x:oid contains list of property, their lower bound, their upper bound (if these bounds exist)
pattern rdfscan{unsafe}(nprop:int, nrqrop:int, x:oid...)(:bat[:oid,:any]...)
address SQLrdfScan
comment "RDFscan operator which return results from exceptional values";

