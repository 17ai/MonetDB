# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2016 MonetDB B.V.
# All Rights Reserved.

module iot;

pattern query(qry:str, maxcalls:int)
address IOTquery
comment "Add a new continuous query.";

pattern query(qry:str)
address IOTquery
comment "Add a new continuous query.";

pattern query(name:str,def:str,maxcalls:int)
address IOTqueryProc
comment "Add a new continuous query.";

pattern query(name:str,def:str)
address IOTqueryProc
comment "Add a new continuous query.";

pattern resume(sch:str,nme:str):void
address PNresume
comment "Activate a continuous query";

pattern resume():void
address PNresume
comment "Activate all continuous queries";

pattern pause(sch:str,nme:str):void
address PNpause
comment "Deactivate a continuous query";

pattern pause():void
address PNpause
comment "Deactivate all continuous queries";

pattern wait(t:int):void
address PNwait
comment "Wait for some microseconds";

pattern stop():void
address PNstop
comment "Wait for all actions ceased";

pattern receptor(sch:str,nme:str,dir:str)
address IOTreceptor
comment "External basket location";

command errors()(nme:bat[:str],error:bat[:str])
address BSKTtableerrors
comment "Return a table the erroneous events found during query processing";

command error(sch:str,fcn:str,msg:str)
address BSKTerror
comment "Save an exception message";

pattern iot.heartbeat(sch:str,tbl:str,N:int)
address BSKTheartbeat
comment "Set an delay to N milliseconds";

pattern iot.heartbeat(sch:str,tbl:str,N:lng)
address BSKTheartbeat
comment "Set an delay to N milliseconds";

pattern iot.getheartbeat(sch:str,tbl:str):lng
address BSKTgetheartbeat
comment "Get the hearbeat delay";

pattern iot.tumble(sch:str,tbl:str,N:int)
address BSKTsettumble
comment "Set the window tumbling at most N events from the stream";

pattern iot.gettumble(sch:str,tbl:str):int
address BSKTgettumble
comment "Get the window tumbling size of the stream";

unsafe pattern iot.window(sch:str,tbl:str,N:int)
address BSKTwindow
comment "Use a window of precisely N events";

pattern iot.getwindow(sch:str,tbl:str):int
address BSKTgetwindow
comment "Set the window tumbling at most N events from the stream";

pattern iot.show(sch:str,tbl:str)
address PNshow
comment "Show the continuous MAL plan";

pattern iot.import(sch:str, tbl:str, dir:str):void
address BSKTimport
comment "Import a single directory with the binary files for a stream table";

pattern iot.export(sch:str, tbl:str, dir:str):void
address BSKTexport
comment "Export a stream table to binary files";

pattern iot.baskets()(sch:bat[:str],nme:bat[:str], status:bat[:str], winsize:bat[:int], winstride:bat[:int], timeslice:bat[:int], 
timestride:bat[:int], heartbeat:bat[:int], seen:bat[:timestamp], events:bat[:int])
address BSKTtable
comment "Inspect the iot baskets";

