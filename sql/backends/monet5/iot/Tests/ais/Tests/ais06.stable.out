stdout of test 'ais06` in directory 'sql/backends/monet5/iot/Tests/ais` itself:


# 22:36:57 >  
# 22:36:57 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=32280" "--set" "mapi_usock=/var/tmp/mtest-17740/.s.monetdb.32280" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/mk/iot//Linux/var/MonetDB/mTests_sql_backends_monet5_iot_Tests_ais"
# 22:36:57 >  

# MonetDB 5 server v11.24.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5_iot_Tests_ais', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2016 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:32280/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17740/.s.monetdb.32280
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/iot loaded

Ready.
#WARNING To speedup user.km_distance a bulk operator implementation is needed
#    X_97:bat[:dbl] := mal.multiplex("user":str,"km_distance":str,X_83:bat[:dbl],X_88:bat[:dbl],X_92:bat[:dbl],X_96:bat[:dbl]);

# 22:36:57 >  
# 22:36:57 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17740" "--port=32280"
# 22:36:57 >  

#SET SCHEMA ais;
#SET optimizer = 'iot_pipe';
#CREATE FUNCTION km_distance(lat1 FLOAT, lon1 FLOAT, lat2 FLOAT, lon2 FLOAT) RETURNS FLOAT
#BEGIN
#	DECLARE deg_to_rad FLOAT, deg_to_rad_div FLOAT, aux FLOAT;
#	SET deg_to_rad = pi() / 180;
#	SET deg_to_rad_div = deg_to_rad / 2;
#	SET aux = sys.power(sys.sin((lat2 - lat1) * deg_to_rad_div), 2) + sys.cos(lat1 * deg_to_rad) * sys.cos(lat2 * deg_to_rad) * sys.power(sys.sin((lon2 - lon1) * deg_to_rad_div), 2);
#	RETURN 12742 * sys.atan(sys.sqrt(aux), sys.sqrt(1 - aux));
#END;
#CREATE STREAM TABLE vessels6 (implicit_timestamp timestamp, mmsi int, lat real, lon real, nav_status tinyint, sog real, rotais smallint);
#CREATE STREAM TABLE stations (implicit_timestamp timestamp, mmsi int, lat real, lon real);
#INSERT INTO iot.webserverstreams SELECT tabl.id, 2 , 8, 's' FROM sys.tables tabl INNER JOIN sys.schemas sch ON tabl.schema_id = sch.id WHERE tabl.name = 'vessels6' AND sch.name = 'ais';
[ 1	]
#INSERT INTO iot.webserverstreams SELECT tabl.id, 2 , 10, 's' FROM sys.tables tabl INNER JOIN sys.schemas sch ON tabl.schema_id = sch.id WHERE tabl.name = 'stations' AND sch.name = 'ais';
[ 1	]
#CREATE TABLE ais06r (calc_time timestamp, smmsi int, vmmsi int, distance float);
#CREATE PROCEDURE ais06q()
#BEGIN
#	INSERT INTO ais06r
#		WITH data1 AS (SELECT mmsi, lat, lon FROM vessels6 WHERE (implicit_timestamp, mmsi) IN (SELECT max(implicit_timestamp), mmsi FROM vessels6 GROUP BY mmsi)), 
#		data2 AS (SELECT mmsi, lat, lon FROM stations WHERE (implicit_timestamp, mmsi) IN (SELECT max(implicit_timestamp), mmsi FROM stations GROUP BY mmsi)), 
#		calculations AS (SELECT d1.mmsi AS smmsi, d2.mmsi AS vmmsi, km_distance(d1.lat, d1.lon, d2.lat, d2.lon) AS distance FROM data1 d1 CROSS JOIN data2 d2),
#DELETE FROM iot.webserverstreams;
[ 2	]
#DROP PROCEDURE ais06q;
#DROP FUNCTION km_distance;
#DROP TABLE stations;
#DROP TABLE vessels6;
#DROP TABLE ais06r;

# 22:36:57 >  
# 22:36:57 >  "Done."
# 22:36:57 >  

