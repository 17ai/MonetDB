stdout of test 'iot14` in directory 'sql/backends/monet5/iot` itself:


# 07:12:23 >  
# 07:12:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31597" "--set" "mapi_usock=/var/tmp/mtest-15370/.s.monetdb.31597" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/mk/iot//Linux/var/MonetDB/mTests_sql_backends_monet5_iot"
# 07:12:23 >  

# MonetDB 5 server v11.24.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5_iot', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2016 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:31597/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-15370/.s.monetdb.31597
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/iot loaded

Ready.

# 07:12:23 >  
# 07:12:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-15370" "--port=31597"
# 07:12:23 >  

#set schema iot;
#set optimizer='iot_pipe';
#create stream table sdel (t timestamp, sensor integer, val decimal(8,2)) ;
#create procedure sdel00()
#begin
#	delete from sdel where sensor = 3;
#end;
#call iot.show('iot','sdel00');
% .explain # table_name
% mal # name
% clob # type
% 29 # length
function user.petri_0():void;
    sql.transaction();
    user.iot_sdel00();
    sql.commit();
end user.petri_0;
#call iot.show('iot','sdel00');
% .explain # table_name
% mal # name
% clob # type
% 61 # length
unsafe function user.iot_sdel00():void;
    X_0 := sql.mvc();
    X_20 := basket.register(X_0,"iot","sdel",0);
    X_24 := basket.lock(X_20,"iot","sdel");
barrier X_49 := language.dataflow();
    C_1:bat[:oid] := basket.tid(X_0,"iot","sdel");
    X_4:bat[:int] := basket.bind(X_20,"iot","sdel","sensor");
    C_10 := algebra.subselect(X_4,3,3,true,false,false);
    X_14 := algebra.projection(C_10,C_1);
    basket.delete(X_20,"iot","sdel",X_14);
    X_25 := basket.tumble(X_24,"iot","sdel");
exit X_49;
catch SQLexception:str;
    iot.error("user","sdel00",SQLexception);
exit SQLexception:str;
catch MALexception:str;
    iot.error("user","sdel00",MALexception);
exit MALexception:str;
    basket.unlock(X_25,"iot","sdel");
end user.iot_sdel00;
#inline               actions= 0 time=1 usec 
#candidates           actions= 1 time=0 usec 
#remap                actions= 0 time=2 usec 
#iot                  actions= 1 time=18 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=5 usec 
#evaluate             actions= 0 time=2 usec 
#aliases              actions= 0 time=5 usec 
#mergetable           actions= 0 time=18 usec 
#deadcode             actions= 0 time=5 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 4 time=3 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=30 time=15 usec 
#matpack              actions= 0 time=3 usec 
#dataflow             actions=26 time=17 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=12 usec 
#total                actions= 1 time=200 usec 
#select * from sdel;
% iot.sdel,	iot.sdel,	iot.sdel # table_name
% t,	sensor,	val # name
% timestamp,	int,	decimal # type
% 26,	1,	10 # length
#insert into sdel values('2005-09-23 12:34:26.736',1,12.34);
[ 1	]
#insert into sdel values('2005-09-23 12:34:26.736',3,12.34);
[ 1	]
#insert into sdel values('2005-09-23 12:34:26.736',4,12.34);
[ 1	]
#insert into sdel values('2005-09-23 12:34:26.736',3,12.34);
[ 1	]
#select * from sdel;
% iot.sdel,	iot.sdel,	iot.sdel # table_name
% t,	sensor,	val # name
% timestamp,	int,	decimal # type
% 26,	1,	10 # length
[ 2005-09-23 12:34:26.736000,	1,	12.34	]
[ 2005-09-23 12:34:26.736000,	3,	12.34	]
[ 2005-09-23 12:34:26.736000,	4,	12.34	]
[ 2005-09-23 12:34:26.736000,	3,	12.34	]
#call iot.stop();
#pnstop waiting for  0 queries 
#select 'final state';
% .L # table_name
% single_value # name
% char # type
% 11 # length
[ "final state"	]
#select * from sdel;
% iot.sdel,	iot.sdel,	iot.sdel # table_name
% t,	sensor,	val # name
% timestamp,	int,	decimal # type
% 26,	1,	10 # length
[ 2005-09-23 12:34:26.736000,	1,	12.34	]
[ 2005-09-23 12:34:26.736000,	4,	12.34	]
#drop procedure sdel00;
#drop table sdel;

# 07:12:23 >  
# 07:12:23 >  "Done."
# 07:12:23 >  

