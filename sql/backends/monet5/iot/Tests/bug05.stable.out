stdout of test 'bug05` in directory 'sql/backends/monet5/iot` itself:


# 15:45:08 >  
# 15:45:08 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34341" "--set" "mapi_usock=/var/tmp/mtest-17329/.s.monetdb.34341" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/mk/iot//Linux/var/MonetDB/mTests_sql_backends_monet5_iot"
# 15:45:08 >  

# MonetDB 5 server v11.24.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5_iot', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2016 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:34341/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17329/.s.monetdb.34341
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/iot loaded

Ready.

# 15:45:08 >  
# 15:45:08 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17329" "--port=34341"
# 15:45:08 >  

#SET optimizer = 'iot_pipe';
#CREATE STREAM TABLE testing (a timestamp, b int, c real);
#CREATE TABLE testout (a timestamp, b int, c real);
#CREATE PROCEDURE cquery()
#BEGIN	
#	INSERT INTO testout SELECT * FROM testing;
#END;
#INSERT INTO testing VALUES (now(), 1, 1);
[ 1	]
#INSERT INTO testing VALUES (now(), 2, 2);
[ 1	]
#INSERT INTO testing VALUES (now(), 3, 3);
[ 1	]
#CALL iot.show('sys', 'cquery');
% .explain # table_name
% mal # name
% clob # type
% 29 # length
function user.petri_0():void;
    sql.transaction();
    user.sys_cquery();
    sql.commit();
end user.petri_0;
#CALL iot.show('sys', 'cquery');
% .explain # table_name
% mal # name
% clob # type
% 65 # length
unsafe function user.sys_cquery():void;
    X_0 := sql.mvc();
    X_24 := basket.register(X_0,"sys","testing",0);
barrier X_52 := language.dataflow();
    C_1:bat[:oid] := basket.tid(X_0,"sys","testing");
    X_4:bat[:timestamp] := basket.bind(X_24,"sys","testing","a");
exit X_52;
    X_9 := sql.append(X_24,"sys","testout","a",X_4);
    X_11:bat[:int] := basket.bind(X_9,"sys","testing","b");
    X_15 := sql.append(X_9,"sys","testout","b",X_11);
    X_16:bat[:flt] := basket.bind(X_15,"sys","testing","c");
    X_20 := sql.append(X_15,"sys","testout","c",X_16);
    X_28 := basket.tumble(X_20,"sys","testing");
    basket.commit(X_28,"sys","testing");
catch SQLexception:str;
    iot.error("user","cquery",SQLexception);
exit SQLexception:str;
catch MALexception:str;
    iot.error("user","cquery",MALexception);
exit MALexception:str;
end user.sys_cquery;
#inline               actions= 0 time=1 usec 
#candidates           actions= 1 time=1 usec 
#remap                actions= 0 time=2 usec 
#iot                  actions= 1 time=26 usec 
#costmodel            actions= 1 time=0 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 0 time=2 usec 
#aliases              actions= 0 time=5 usec 
#mergetable           actions= 0 time=17 usec 
#deadcode             actions= 0 time=4 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=3 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=32 time=6 usec 
#matpack              actions= 0 time=2 usec 
#dataflow             actions=29 time=15 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=13 usec 
#total                actions= 1 time=193 usec 
#DROP PROCEDURE cquery;
#DROP TABLE testout;
#DROP TABLE testing;

# 15:45:08 >  
# 15:45:08 >  "Done."
# 15:45:08 >  

