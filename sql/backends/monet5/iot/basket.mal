# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2016 MonetDB B.V.
# All Rights Reserved.

module basket;

pattern bind(sch:str,tbl:str,col:str):bat[:any]
address BSKTbind
comment "access the stream basket column";

pattern register(sch:str,tbl:str):void
address BSKTregister
comment "Initialize a new basket based on a specific table definition";

pattern activate(sch:str,tbl:str):void
address BSKTactivate
comment "Re-activate the stream";

pattern deactivate(sch:str,tbl:str):void
address BSKTdeactivate
comment "Deactivate the stream";

pattern append(mvc:int, sch:str, tbl:str, col:str, val:any):int
address BSKTappend
comment "Append new tuples to a basket";

pattern delete(mvc:int, sch:str, tbl:str, val:bat[:oid]):int
address BSKTdelete
comment "Append new tuples to a basket";

pattern commit(mvc:any, sch:str, tbl:str):void
address BSKTcommit
comment "Make the basket available for the scheduler";

pattern update(sch:str,tbl:str, cols:any...)
address BSKTupdate
comment "Dump the new tuples into the basket";

pattern update(sch:str,tbl:str, cols:bat[:any]...)
address BSKTupdate
comment "Dump the new tuples into the basket";

pattern clear_table(sch:str,tbl:str):lng
address BSKTclear
comment "Remove the basket";

command drop(sch:str,tbl:str):void
address BSKTdrop
comment "Remove the basket";

command iot.threshold(sch:str,tbl:str,N:int):bit
address BSKTthreshold
comment "Set an acceptance threshold of N events before inspecting";

command iot.beat(sch:str,tbl:str,N:lng):bit
address BSKTbeat
comment "Set an delay to N milliseconds";

command iot.window(sch:str,tbl:str,N:lng):void
address BSKTwindow
comment "Use a window of precisely N events and slide afterwards";

command iot.window(sch:str,tbl:str,N:lng, S:lng):void
address BSKTwindow
comment "Use a window of precisely N events and slide S events afterwards";

command reset():void
address BSKTreset
comment "Remove all baskets";

pattern finish(sch:str, tbl:str):void
address BSKTfinish
comment "Empty the basket using the prevaling policy";

pattern iot.basket(sch:str, tbl:str, dir:str):void
address BSKTpushBasket
comment "Push a directory with the binary files";

pattern iot.baskets()(sch:bat[:str],nme:bat[:str], status:bat[:str], threshold:bat[:int], winsize:bat[:int], winstride:bat[:int], timeslice:bat[:int], 
timestride:bat[:int], beat:bat[:int], seen:bat[:timestamp], events:bat[:int])
address BSKTtable
comment "Inspect the iot baskets";

command errors() (l:bat[:str],m:bat[:str])
address BSKTtableerrors
comment "Return the table with all errors";
