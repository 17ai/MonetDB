stdout of test 'pyapi22` in directory 'sql/backends/monet5` itself:


# 13:00:01 >  
# 13:00:01 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35894" "--set" "mapi_usock=/var/tmp/mtest-10726/.s.monetdb.35894" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/mytherin/opt/var/MonetDB/mTests_sql_backends_monet5" "--set" "mal_listing=0" "--set" "embedded_r=true" "--set" "embedded_py=true"
# 13:00:01 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.684 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://mytherin-N750JV:35894/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-10726/.s.monetdb.35894
# Start processing logs sql/sql_logs version 52200
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/Python module loaded
# MonetDB/R   module loaded

Ready.
Printing _values dictionary
Items: 5
a,3
33,[3, 37, 'hello']
c,[44 55]
b,hello
22.77,[1 -- 3]
End

Printing _values dictionary
Items: 0
End

Printing _values dictionary
Items: 5
a,3
33,[3, 37, 'hello']
c,[44 55]
b,hello
22.77,[1 -- 3]
End


# 13:00:02 >  
# 13:00:02 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-10726" "--port=35894"
# 13:00:02 >  

#START TRANSACTION;
#CREATE FUNCTION initialize_values() RETURNS TABLE(a BOOLEAN) LANGUAGE PYTHON
#{
#    _values['a'] = 3
#    _values['b'] = "hello"
#    _values[33] = [3, 37, "hello"]
#    _values['c'] = numpy.array([44, 55])
#    _values[22.77] = numpy.ma.masked_array([1, 2, 3], [0, 1, 0])
#    return True
#};
#CREATE FUNCTION clear_values() RETURNS TABLE(a BOOLEAN) LANGUAGE PYTHON
#{
#    for key in _values.keys():
#        del _values[key]
#    return True
#};
#CREATE FUNCTION store_values() RETURNS TABLE(keys STRING, vals STRING) LANGUAGE PYTHON
#{
#    import cPickle
#    result = dict()
#    result['keys'] = [cPickle.dumps(x) for x in _values.keys()]
#    result['vals'] = [cPickle.dumps(x) for x in _values.values()]
#    return result
#};
#CREATE FUNCTION restore_values(keys STRING, vals STRING) RETURNS BOOLEAN LANGUAGE PYTHON
#{
#    import cPickle
#    for key, value in zip([cPickle.loads(x) for x in keys], [cPickle.loads(x) for x in vals]):
#        _values[key] = value
#    return True
#};
#CREATE FUNCTION print_values() RETURNS TABLE(a BOOLEAN) LANGUAGE PYTHON
#{
#    print("Printing _values dictionary")
#    print("Items: %d" % len(_values))
#    for key,val in _values.iteritems():
#        print str(key) + ',' + str(val)
#    print("End\n")
#    return True
#};
#SELECT * FROM initialize_values();
% . # table_name
% a # name
% boolean # type
% 5 # length
[ true	]
#SELECT * FROM print_values();
% . # table_name
% a # name
% boolean # type
% 5 # length
[ true	]
#CREATE TABLE values_storage AS SELECT * FROM store_values() WITH DATA;
#SELECT * FROM clear_values();
% . # table_name
% a # name
% boolean # type
% 5 # length
[ true	]
#SELECT * FROM print_values();
% . # table_name
% a # name
% boolean # type
% 5 # length
[ true	]
#SELECT restore_values(keys, vals) FROM values_storage;
% sys.L # table_name
% restore_values_keys # name
% boolean # type
% 5 # length
[ true	]
#SELECT * FROM print_values();
% . # table_name
% a # name
% boolean # type
% 5 # length
[ true	]
#DROP TABLE values_storage;
#ROLLBACK;

# 13:00:02 >  
# 13:00:02 >  "Done."
# 13:00:02 >  

