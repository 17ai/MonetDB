stdout of test 'rewrite_like_into_likesubselect.Bug-3179` in directory 'sql/test/BugTracker-2012` itself:


# 13:28:50 >  
# 13:28:50 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=4" "--set" "mapi_open=true" "--set" "mapi_port=31819" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_test_BugTracker-2012" "--set" "mal_listing=0"
# 13:28:50 >  

# MonetDB 5 server v11.14.0
# This is an unreleased version
# Serving database 'mTests_test_BugTracker-2012', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.778 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://niels.nesco.mine.nu:31819/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 13:28:50 >  
# 13:28:50 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=niels" "--port=31819"
# 13:28:50 >  

#start transaction;
#explain select name,func from functions where name like '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 138 # length
function user.s4_1():void;
    X_0:void := querylog.define("explain select name,func from functions where name like \\'%optimizers%\\';", "sequential_pipe", 36:int);
    X_33 := bat.new(nil:str);
    X_40 := bat.append(X_33, "sys.functions");
    X_50 := bat.append(X_40, "sys.functions");
    X_35 := bat.new(nil:str);
    X_42 := bat.append(X_35, "name");
    X_51 := bat.append(X_42, "func");
    X_36 := bat.new(nil:str);
    X_44 := bat.append(X_36, "varchar");
    X_53 := bat.append(X_44, "varchar");
    X_37 := bat.new(nil:int);
    X_46 := bat.append(X_37, 256:int);
    X_54 := bat.append(X_46, 8196:int);
    X_39 := bat.new(nil:int);
    X_48 := bat.append(X_39, 0:int);
    X_56 := bat.append(X_48, 0:int);
    X_3 := sql.mvc();
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    C_67 := algebra.likeselect(X_7, C_4, "%optimizers%", "", false);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    C_68 := algebra.likeselect(X_13, nil:bat[:oid], "%optimizers%", "", false);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    C_70 := algebra.likeselect(X_10, C_4, "%optimizers%", "", false);
    C_27 := sql.subdelta(C_67, C_4, C_12, C_68, C_70);
    X_30 := sql.projectdelta(C_27, X_7, C_12, X_13, X_10);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_31 := sql.projectdelta(C_27, X_17, C_20, X_21, X_19);
    sql.resultSet(X_50, X_51, X_53, X_54, X_56, X_30, X_31);
end user.s4_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=6 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 0 time=7 usec 
#pushselect           actions= 5 time=25 usec 
#aliases              actions= 3 time=7 usec 
#mergetable           actions= 0 time=29 usec 
#deadcode             actions= 2 time=5 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=23 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=29 time=9 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=16 usec 
#total                actions= 1 time=269 usec 
#explain select name,func from functions where name not like '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 142 # length
function user.s6_1():void;
    X_0:void := querylog.define("explain select name,func from functions where name not like \\'%optimizers%\\';", "sequential_pipe", 36:int);
    X_33 := bat.new(nil:str);
    X_40 := bat.append(X_33, "sys.functions");
    X_50 := bat.append(X_40, "sys.functions");
    X_35 := bat.new(nil:str);
    X_42 := bat.append(X_35, "name");
    X_51 := bat.append(X_42, "func");
    X_36 := bat.new(nil:str);
    X_44 := bat.append(X_36, "varchar");
    X_53 := bat.append(X_44, "varchar");
    X_37 := bat.new(nil:int);
    X_46 := bat.append(X_37, 256:int);
    X_54 := bat.append(X_46, 8196:int);
    X_39 := bat.new(nil:int);
    X_48 := bat.append(X_39, 0:int);
    X_56 := bat.append(X_48, 0:int);
    X_3 := sql.mvc();
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    C_67 := algebra.likeselect(X_7, C_4, "%optimizers%", "", true);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    C_68 := algebra.likeselect(X_13, nil:bat[:oid], "%optimizers%", "", true);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    C_70 := algebra.likeselect(X_10, C_4, "%optimizers%", "", true);
    C_27 := sql.subdelta(C_67, C_4, C_12, C_68, C_70);
    X_30 := sql.projectdelta(C_27, X_7, C_12, X_13, X_10);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_31 := sql.projectdelta(C_27, X_17, C_20, X_21, X_19);
    sql.resultSet(X_50, X_51, X_53, X_54, X_56, X_30, X_31);
end user.s6_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=6 usec 
#evaluate             actions= 1 time=12 usec 
#emptybind            actions= 0 time=8 usec 
#pushselect           actions= 5 time=23 usec 
#aliases              actions= 3 time=7 usec 
#mergetable           actions= 0 time=29 usec 
#deadcode             actions= 2 time=6 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=24 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=29 time=9 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=16 usec 
#total                actions= 1 time=278 usec 
#explain select name,func from functions where name ilike '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 139 # length
function user.s8_1():void;
    X_0:void := querylog.define("explain select name,func from functions where name ilike \\'%optimizers%\\';", "sequential_pipe", 36:int);
    X_33 := bat.new(nil:str);
    X_40 := bat.append(X_33, "sys.functions");
    X_50 := bat.append(X_40, "sys.functions");
    X_35 := bat.new(nil:str);
    X_42 := bat.append(X_35, "name");
    X_51 := bat.append(X_42, "func");
    X_36 := bat.new(nil:str);
    X_44 := bat.append(X_36, "varchar");
    X_53 := bat.append(X_44, "varchar");
    X_37 := bat.new(nil:int);
    X_46 := bat.append(X_37, 256:int);
    X_54 := bat.append(X_46, 8196:int);
    X_39 := bat.new(nil:int);
    X_48 := bat.append(X_39, 0:int);
    X_56 := bat.append(X_48, 0:int);
    X_3 := sql.mvc();
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    C_67 := algebra.ilikeselect(X_7, C_4, "%optimizers%", "", false);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    C_68 := algebra.ilikeselect(X_13, nil:bat[:oid], "%optimizers%", "", false);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    C_70 := algebra.ilikeselect(X_10, C_4, "%optimizers%", "", false);
    C_27 := sql.subdelta(C_67, C_4, C_12, C_68, C_70);
    X_30 := sql.projectdelta(C_27, X_7, C_12, X_13, X_10);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_31 := sql.projectdelta(C_27, X_17, C_20, X_21, X_19);
    sql.resultSet(X_50, X_51, X_53, X_54, X_56, X_30, X_31);
end user.s8_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=6 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 0 time=7 usec 
#pushselect           actions= 5 time=21 usec 
#aliases              actions= 3 time=7 usec 
#mergetable           actions= 0 time=28 usec 
#deadcode             actions= 2 time=6 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=22 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=29 time=15 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=16 usec 
#total                actions= 1 time=265 usec 
#explain select name,func from functions where name not ilike '%optimizers%';
% .explain # table_name
% mal # name
% clob # type
% 143 # length
function user.s10_1():void;
    X_0:void := querylog.define("explain select name,func from functions where name not ilike \\'%optimizers%\\';", "sequential_pipe", 36:int);
    X_33 := bat.new(nil:str);
    X_40 := bat.append(X_33, "sys.functions");
    X_50 := bat.append(X_40, "sys.functions");
    X_35 := bat.new(nil:str);
    X_42 := bat.append(X_35, "name");
    X_51 := bat.append(X_42, "func");
    X_36 := bat.new(nil:str);
    X_44 := bat.append(X_36, "varchar");
    X_53 := bat.append(X_44, "varchar");
    X_37 := bat.new(nil:int);
    X_46 := bat.append(X_37, 256:int);
    X_54 := bat.append(X_46, 8196:int);
    X_39 := bat.new(nil:int);
    X_48 := bat.append(X_39, 0:int);
    X_56 := bat.append(X_48, 0:int);
    X_3 := sql.mvc();
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    C_67 := algebra.ilikeselect(X_7, C_4, "%optimizers%", "", true);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    C_68 := algebra.ilikeselect(X_13, nil:bat[:oid], "%optimizers%", "", true);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    C_70 := algebra.ilikeselect(X_10, C_4, "%optimizers%", "", true);
    C_27 := sql.subdelta(C_67, C_4, C_12, C_68, C_70);
    X_30 := sql.projectdelta(C_27, X_7, C_12, X_13, X_10);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_31 := sql.projectdelta(C_27, X_17, C_20, X_21, X_19);
    sql.resultSet(X_50, X_51, X_53, X_54, X_56, X_30, X_31);
end user.s10_1;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 1 time=5 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 0 time=7 usec 
#pushselect           actions= 5 time=21 usec 
#aliases              actions= 3 time=7 usec 
#mergetable           actions= 0 time=28 usec 
#deadcode             actions= 2 time=5 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 3 time=6 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=2 usec 
#reorder              actions= 1 time=22 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=29 time=8 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=15 usec 
#total                actions= 1 time=256 usec 
#create function contains(str string, substr string)
#returns boolean
#begin
#	  return str like '%'||substr||'%';
#end; 
#create function not_contains(str string, substr string)
#returns boolean
#begin
#	  return str not like '%'||substr||'%';
#end; 
#create function icontains(str string, substr string)
#returns boolean
#begin
#	  return str ilike '%'||substr||'%';
#end; 
#create function not_icontains(str string, substr string)
#returns boolean
#begin
#	  return str not ilike '%'||substr||'%';
#end; 
#explain select name,func from functions where contains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 142 # length
function user.s20_1():void;
    X_65:void := querylog.define("-- no query", "sequential_pipe", 12:int);
    X_36 := bat.new(nil:str);
    X_43 := bat.append(X_36, "sys.functions");
    X_53 := bat.append(X_43, "sys.functions");
    X_38 := bat.new(nil:str);
    X_45 := bat.append(X_38, "name");
    X_54 := bat.append(X_45, "func");
    X_39 := bat.new(nil:str);
    X_47 := bat.append(X_39, "varchar");
    X_56 := bat.append(X_47, "varchar");
    X_40 := bat.new(nil:int);
    X_49 := bat.append(X_40, 256:int);
    X_57 := bat.append(X_49, 8196:int);
    X_42 := bat.new(nil:int);
    X_51 := bat.append(X_42, 0:int);
    X_59 := bat.append(X_51, 0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    X_16 := sql.projectdelta(C_4, X_7, C_12, X_13, X_10);
    X_76:bat[:bit] := batalgebra.like(X_16, "%optimizers%":str);
    C_30 := algebra.select(X_76, true, true, true, false, false);
    X_33 := algebra.projection(C_30, X_16);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_23 := sql.projectdelta(C_4, X_17, C_20, X_21, X_19);
    X_34 := algebra.projection(C_30, X_23);
    X_0:void := querylog.define("explain select name,func from functions where contains(name, \\'optimizers\\');", "sequential_pipe", 37:int);
    sql.resultSet(X_53, X_54, X_56, X_57, X_59, X_33, X_34);
end user.s20_1;
#inline               actions= 0 time=6 usec 
#remap                actions= 1 time=59 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 5 time=10 usec 
#evaluate             actions= 4 time=25 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 2 time=18 usec 
#aliases              actions= 6 time=10 usec 
#mergetable           actions= 0 time=30 usec 
#deadcode             actions= 3 time=6 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=11 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=24 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=73 time=13 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=15 usec 
#total                actions= 1 time=366 usec 
#explain select name,func from functions where not_contains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 146 # length
function user.s22_1():void;
    X_65:void := querylog.define("-- no query", "sequential_pipe", 12:int);
    X_36 := bat.new(nil:str);
    X_43 := bat.append(X_36, "sys.functions");
    X_53 := bat.append(X_43, "sys.functions");
    X_38 := bat.new(nil:str);
    X_45 := bat.append(X_38, "name");
    X_54 := bat.append(X_45, "func");
    X_39 := bat.new(nil:str);
    X_47 := bat.append(X_39, "varchar");
    X_56 := bat.append(X_47, "varchar");
    X_40 := bat.new(nil:int);
    X_49 := bat.append(X_40, 256:int);
    X_57 := bat.append(X_49, 8196:int);
    X_42 := bat.new(nil:int);
    X_51 := bat.append(X_42, 0:int);
    X_59 := bat.append(X_51, 0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    X_16 := sql.projectdelta(C_4, X_7, C_12, X_13, X_10);
    X_76:bat[:bit] := batalgebra.not_like(X_16, "%optimizers%":str);
    C_30 := algebra.select(X_76, true, true, true, false, false);
    X_33 := algebra.projection(C_30, X_16);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_23 := sql.projectdelta(C_4, X_17, C_20, X_21, X_19);
    X_34 := algebra.projection(C_30, X_23);
    X_0:void := querylog.define("explain select name,func from functions where not_contains(name, \\'optimizers\\');", "sequential_pipe", 37:int);
    sql.resultSet(X_53, X_54, X_56, X_57, X_59, X_33, X_34);
end user.s22_1;
#inline               actions= 0 time=4 usec 
#remap                actions= 1 time=53 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 5 time=9 usec 
#evaluate             actions= 4 time=20 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 2 time=19 usec 
#aliases              actions= 6 time=8 usec 
#mergetable           actions= 0 time=30 usec 
#deadcode             actions= 3 time=6 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 5 time=11 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=24 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=73 time=12 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=15 usec 
#total                actions= 1 time=350 usec 
#explain select name,func from functions where icontains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 143 # length
function user.s24_1():void;
    X_65:void := querylog.define("-- no query", "sequential_pipe", 12:int);
    X_36 := bat.new(nil:str);
    X_43 := bat.append(X_36, "sys.functions");
    X_53 := bat.append(X_43, "sys.functions");
    X_38 := bat.new(nil:str);
    X_45 := bat.append(X_38, "name");
    X_54 := bat.append(X_45, "func");
    X_39 := bat.new(nil:str);
    X_47 := bat.append(X_39, "varchar");
    X_56 := bat.append(X_47, "varchar");
    X_40 := bat.new(nil:int);
    X_49 := bat.append(X_40, 256:int);
    X_57 := bat.append(X_49, 8196:int);
    X_42 := bat.new(nil:int);
    X_51 := bat.append(X_42, 0:int);
    X_59 := bat.append(X_51, 0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    X_16 := sql.projectdelta(C_4, X_7, C_12, X_13, X_10);
    X_76:bat[:bit] := batalgebra.ilike(X_16, "%optimizers%":str);
    C_30 := algebra.select(X_76, true, true, true, false, false);
    X_33 := algebra.projection(C_30, X_16);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_23 := sql.projectdelta(C_4, X_17, C_20, X_21, X_19);
    X_34 := algebra.projection(C_30, X_23);
    X_0:void := querylog.define("explain select name,func from functions where icontains(name, \\'optimizers\\');", "sequential_pipe", 37:int);
    sql.resultSet(X_53, X_54, X_56, X_57, X_59, X_33, X_34);
end user.s24_1;
#inline               actions= 0 time=4 usec 
#remap                actions= 1 time=52 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 5 time=9 usec 
#evaluate             actions= 4 time=20 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 2 time=18 usec 
#aliases              actions= 6 time=8 usec 
#mergetable           actions= 0 time=28 usec 
#deadcode             actions= 3 time=7 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 5 time=11 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=23 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=73 time=12 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=16 usec 
#total                actions= 1 time=341 usec 
#explain select name,func from functions where not_icontains(name, 'optimizers');
% .explain # table_name
% mal # name
% clob # type
% 147 # length
function user.s26_1():void;
    X_65:void := querylog.define("-- no query", "sequential_pipe", 12:int);
    X_36 := bat.new(nil:str);
    X_43 := bat.append(X_36, "sys.functions");
    X_53 := bat.append(X_43, "sys.functions");
    X_38 := bat.new(nil:str);
    X_45 := bat.append(X_38, "name");
    X_54 := bat.append(X_45, "func");
    X_39 := bat.new(nil:str);
    X_47 := bat.append(X_39, "varchar");
    X_56 := bat.append(X_47, "varchar");
    X_40 := bat.new(nil:int);
    X_49 := bat.append(X_40, 256:int);
    X_57 := bat.append(X_49, 8196:int);
    X_42 := bat.new(nil:int);
    X_51 := bat.append(X_42, 0:int);
    X_59 := bat.append(X_51, 0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3, "sys", "functions");
    X_7:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 0:int);
    (C_12:bat[:oid], X_13:bat[:str]) := sql.bind(X_3, "sys", "functions", "name", 2:int);
    X_10:bat[:str] := sql.bind(X_3, "sys", "functions", "name", 1:int);
    X_16 := sql.projectdelta(C_4, X_7, C_12, X_13, X_10);
    X_76:bat[:bit] := batalgebra.not_ilike(X_16, "%optimizers%":str);
    C_30 := algebra.select(X_76, true, true, true, false, false);
    X_33 := algebra.projection(C_30, X_16);
    X_17:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 0:int);
    (C_20:bat[:oid], X_21:bat[:str]) := sql.bind(X_3, "sys", "functions", "func", 2:int);
    X_19:bat[:str] := sql.bind(X_3, "sys", "functions", "func", 1:int);
    X_23 := sql.projectdelta(C_4, X_17, C_20, X_21, X_19);
    X_34 := algebra.projection(C_30, X_23);
    X_0:void := querylog.define("explain select name,func from functions where not_icontains(name, \\'optimizers\\');", "sequential_pipe", 37:int);
    sql.resultSet(X_53, X_54, X_56, X_57, X_59, X_33, X_34);
end user.s26_1;
#inline               actions= 0 time=5 usec 
#remap                actions= 1 time=66 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 5 time=9 usec 
#evaluate             actions= 4 time=19 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 2 time=18 usec 
#aliases              actions= 6 time=9 usec 
#mergetable           actions= 0 time=29 usec 
#deadcode             actions= 3 time=6 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=11 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=24 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=73 time=13 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=15 usec 
#total                actions= 1 time=354 usec 
#rollback;

# 13:28:51 >  
# 13:28:51 >  "Done."
# 13:28:51 >  

