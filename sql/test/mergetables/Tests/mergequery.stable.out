stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#CREATE TABLE answ( LIKE complete);
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .explain # table_name
% mal # name
% clob # type
% 110 # length
function user.s13_1{autoCommit=true}(A0:dbl,A1:dbl):void;
barrier X_205 := language.dataflow();
    X_4 := sql.mvc();
    X_5:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_11:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part1","x",0);
    X_8:bat[:oid,:oid]  := sql.tid(X_4,"sys","part1");
    X_86 := algebra.subselect(X_11,X_8,A0,A1,true,true,false);
    (X_14,r1_14) := sql.bind(X_4,"sys","part1","x",2);
    X_87 := algebra.subselect(r1_14,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_17:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part1","x",1);
    X_89 := algebra.subselect(X_17,X_8,A0,A1,true,true,false);
    X_19 := sql.subdelta(X_86,X_8,X_14,X_87,X_89);
    X_21 := sql.projectdelta(X_19,X_11,X_14,r1_14,X_17);
    X_22 := bat.append(X_5,X_21,true);
    X_101:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part2","x",0,0,4);
    X_94:bat[:oid,:oid]  := sql.tid(X_4,"sys","part2",0,4);
    X_142 := algebra.subselect(X_101,X_94,A0,A1,true,true,false);
    (X_105:bat[:oid,:oid] ,X_106:bat[:oid,:dbl] ) := sql.bind(X_4,"sys","part2","x",2,0,4);
    X_146 := algebra.subselect(X_106,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_150 := sql.subdelta(X_142,X_94,X_105,X_146);
    X_155 := sql.projectdelta(X_150,X_101,X_105,X_106);
    X_102:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part2","x",0,1,4);
    X_96:bat[:oid,:oid]  := sql.tid(X_4,"sys","part2",1,4);
    X_143 := algebra.subselect(X_102,X_96,A0,A1,true,true,false);
    (X_107:bat[:oid,:oid] ,X_108:bat[:oid,:dbl] ) := sql.bind(X_4,"sys","part2","x",2,1,4);
    X_147 := algebra.subselect(X_108,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_151 := sql.subdelta(X_143,X_96,X_107,X_147);
    X_157 := sql.projectdelta(X_151,X_102,X_107,X_108);
    X_103:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part2","x",0,2,4);
    X_98:bat[:oid,:oid]  := sql.tid(X_4,"sys","part2",2,4);
    X_144 := algebra.subselect(X_103,X_98,A0,A1,true,true,false);
    (X_109:bat[:oid,:oid] ,X_110:bat[:oid,:dbl] ) := sql.bind(X_4,"sys","part2","x",2,2,4);
    X_148 := algebra.subselect(X_110,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_152 := sql.subdelta(X_144,X_98,X_109,X_148);
    X_159 := sql.projectdelta(X_152,X_103,X_109,X_110);
    X_104:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part2","x",0,3,4);
    X_100:bat[:oid,:oid]  := sql.tid(X_4,"sys","part2",3,4);
    X_145 := algebra.subselect(X_104,X_100,A0,A1,true,true,false);
    (X_111:bat[:oid,:oid] ,X_112:bat[:oid,:dbl] ) := sql.bind(X_4,"sys","part2","x",2,3,4);
    X_149 := algebra.subselect(X_112,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_24:bat[:oid,:dbl]  := sql.bind(X_4,"sys","part2","x",1);
    X_91 := algebra.subselect(X_24,X_100,A0,A1,true,true,false);
    X_153 := sql.subdelta(X_145,X_100,X_111,X_149,X_91);
    X_161 := sql.projectdelta(X_153,X_104,X_111,X_112,X_24);
    X_170 := mat.packIncrement(X_155,4);
    X_171 := mat.packIncrement(X_170,X_157);
    X_172 := mat.packIncrement(X_171,X_159);
    X_26 := mat.packIncrement(X_172,X_161);
    X_27 := bat.append(X_22,X_26,true);
    language.pass(X_8);
    language.pass(X_11);
    language.pass(X_14);
    language.pass(r1_14);
    language.pass(X_17);
    language.pass(X_94);
    language.pass(X_101);
    language.pass(X_105);
    language.pass(X_106);
    language.pass(X_96);
    language.pass(X_102);
    language.pass(X_107);
    language.pass(X_108);
    language.pass(X_98);
    language.pass(X_103);
    language.pass(X_109);
    language.pass(X_110);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_100);
    language.pass(X_104);
    language.pass(X_111);
    language.pass(X_112);
    language.pass(X_24);
exit X_205;
    X_28 := sql.append(X_4,"sys","answ","x",X_27);
barrier X_208 := language.dataflow();
    X_32:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_35:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part1","y",0);
    (X_39,r1_53) := sql.bind(X_28,"sys","part1","y",2);
    X_42:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part1","y",1);
    X_44 := sql.projectdelta(X_19,X_35,X_39,r1_53,X_42);
    X_45 := bat.append(X_32,X_44,true);
    X_113:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part2","y",0,0,4);
    (X_117:bat[:oid,:oid] ,X_118:bat[:oid,:dbl] ) := sql.bind(X_28,"sys","part2","y",2,0,4);
    X_162 := sql.projectdelta(X_150,X_113,X_117,X_118);
    X_114:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part2","y",0,1,4);
    (X_119:bat[:oid,:oid] ,X_120:bat[:oid,:dbl] ) := sql.bind(X_28,"sys","part2","y",2,1,4);
    X_163 := sql.projectdelta(X_151,X_114,X_119,X_120);
    X_115:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part2","y",0,2,4);
    (X_121:bat[:oid,:oid] ,X_122:bat[:oid,:dbl] ) := sql.bind(X_28,"sys","part2","y",2,2,4);
    X_164 := sql.projectdelta(X_152,X_115,X_121,X_122);
    X_116:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part2","y",0,3,4);
    (X_123:bat[:oid,:oid] ,X_124:bat[:oid,:dbl] ) := sql.bind(X_28,"sys","part2","y",2,3,4);
    X_47:bat[:oid,:dbl]  := sql.bind(X_28,"sys","part2","y",1);
    X_165 := sql.projectdelta(X_153,X_116,X_123,X_124,X_47);
    X_174 := mat.packIncrement(X_162,4);
    X_175 := mat.packIncrement(X_174,X_163);
    X_176 := mat.packIncrement(X_175,X_164);
    X_48 := mat.packIncrement(X_176,X_165);
    X_49 := bat.append(X_45,X_48,true);
exit X_208;
    X_51 := sql.append(X_28,"sys","answ","y",X_49);
barrier X_211 := language.dataflow();
    X_52:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_53:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part1","z",0);
    (X_56,r1_78) := sql.bind(X_51,"sys","part1","z",2);
    X_58:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part1","z",1);
    X_59 := sql.projectdelta(X_19,X_53,X_56,r1_78,X_58);
    X_60 := bat.append(X_52,X_59,true);
    X_127:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part2","z",0,0,4);
    (X_134:bat[:oid,:oid] ,X_135:bat[:oid,:dbl] ) := sql.bind(X_51,"sys","part2","z",2,0,4);
    X_166 := sql.projectdelta(X_150,X_127,X_134,X_135);
    X_129:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part2","z",0,1,4);
    (X_136:bat[:oid,:oid] ,X_137:bat[:oid,:dbl] ) := sql.bind(X_51,"sys","part2","z",2,1,4);
    X_167 := sql.projectdelta(X_151,X_129,X_136,X_137);
    X_131:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part2","z",0,2,4);
    (X_138:bat[:oid,:oid] ,X_139:bat[:oid,:dbl] ) := sql.bind(X_51,"sys","part2","z",2,2,4);
    X_168 := sql.projectdelta(X_152,X_131,X_138,X_139);
    X_133:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part2","z",0,3,4);
    (X_140:bat[:oid,:oid] ,X_141:bat[:oid,:dbl] ) := sql.bind(X_51,"sys","part2","z",2,3,4);
    X_63:bat[:oid,:dbl]  := sql.bind(X_51,"sys","part2","z",1);
    X_169 := sql.projectdelta(X_153,X_133,X_140,X_141,X_63);
    X_178 := mat.packIncrement(X_166,4);
    X_179 := mat.packIncrement(X_178,X_167);
    X_180 := mat.packIncrement(X_179,X_168);
    X_65 := mat.packIncrement(X_180,X_169);
    X_66 := bat.append(X_60,X_65,true);
exit X_211;
    X_67 := sql.append(X_51,"sys","answ","z",X_66);
    X_69 := aggr.count(X_66);
    sql.affectedRows(X_67,X_69,"");
end s13_1;
# querylog.define("explain insert into answ\nselect * from complete where x>=1.0 and x <=2.0;","default_pipe")
#INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
[ 4	]
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 132 # length
function user.s14_1{autoCommit=true}(A0:dbl,A1:dbl,A2:dbl,A3:dbl):void;
barrier X_237 := language.dataflow();
    X_6 := sql.mvc();
    X_7:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_13:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part1","x",0);
    X_21:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part1","y",0);
    X_10:bat[:oid,:oid]  := sql.tid(X_6,"sys","part1");
    X_90 := algebra.subselect(X_21,X_10,A2,A3,true,true,false);
    (X_23,r1_27) := sql.bind(X_6,"sys","part1","y",2);
    X_91 := algebra.subselect(r1_27,nil:bat[:oid,:oid],A2,A3,true,true,false);
    X_25:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part1","y",1);
    X_93 := algebra.subselect(X_25,X_10,A2,A3,true,true,false);
    X_26 := sql.subdelta(X_90,X_10,X_23,X_91,X_93);
    X_94 := algebra.subselect(X_13,X_26,A0,A1,true,true,false);
    (X_16,r1_16) := sql.bind(X_6,"sys","part1","x",2);
    X_95 := algebra.subselect(r1_16,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_19:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part1","x",1);
    X_97 := algebra.subselect(X_19,X_26,A0,A1,true,true,false);
    X_28 := sql.subdelta(X_94,X_26,X_16,X_95,X_97);
    X_29 := sql.projectdelta(X_28,X_13,X_16,r1_16,X_19);
    X_30 := bat.append(X_7,X_29,true);
    X_246:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","x",0,0,4);
    X_111:bat[:oid,:dbl]  := mosaic.decompress(X_246);
    X_123:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","y",0,0,4);
    X_104:bat[:oid,:oid]  := sql.tid(X_6,"sys","part2",0,4);
    X_152 := algebra.subselect(X_123,X_104,A2,A3,true,true,false);
    (X_127:bat[:oid,:oid] ,X_128:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","y",2,0,4);
    X_157 := algebra.subselect(X_128,nil:bat[:oid,:oid],A2,A3,true,true,false);
    X_164 := sql.subdelta(X_152,X_104,X_127,X_157);
    X_168 := algebra.subselect(X_111,X_164,A0,A1,true,true,false);
    (X_115:bat[:oid,:oid] ,X_116:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","x",2,0,4);
    X_172 := algebra.subselect(X_116,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_176 := sql.subdelta(X_168,X_164,X_115,X_172);
    X_180 := sql.projectdelta(X_176,X_111,X_115,X_116);
    X_247:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","x",0,1,4);
    X_112:bat[:oid,:dbl]  := mosaic.decompress(X_247);
    X_124:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","y",0,1,4);
    X_106:bat[:oid,:oid]  := sql.tid(X_6,"sys","part2",1,4);
    X_153 := algebra.subselect(X_124,X_106,A2,A3,true,true,false);
    (X_129:bat[:oid,:oid] ,X_130:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","y",2,1,4);
    X_159 := algebra.subselect(X_130,nil:bat[:oid,:oid],A2,A3,true,true,false);
    X_165 := sql.subdelta(X_153,X_106,X_129,X_159);
    X_169 := algebra.subselect(X_112,X_165,A0,A1,true,true,false);
    (X_117:bat[:oid,:oid] ,X_118:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","x",2,1,4);
    X_173 := algebra.subselect(X_118,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_177 := sql.subdelta(X_169,X_165,X_117,X_173);
    X_181 := sql.projectdelta(X_177,X_112,X_117,X_118);
    X_248:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","x",0,2,4);
    X_113:bat[:oid,:dbl]  := mosaic.decompress(X_248);
    X_125:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","y",0,2,4);
    X_108:bat[:oid,:oid]  := sql.tid(X_6,"sys","part2",2,4);
    X_154 := algebra.subselect(X_125,X_108,A2,A3,true,true,false);
    (X_131:bat[:oid,:oid] ,X_132:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","y",2,2,4);
    X_161 := algebra.subselect(X_132,nil:bat[:oid,:oid],A2,A3,true,true,false);
    X_166 := sql.subdelta(X_154,X_108,X_131,X_161);
    X_170 := algebra.subselect(X_113,X_166,A0,A1,true,true,false);
    (X_119:bat[:oid,:oid] ,X_120:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","x",2,2,4);
    X_174 := algebra.subselect(X_120,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_178 := sql.subdelta(X_170,X_166,X_119,X_174);
    X_182 := sql.projectdelta(X_178,X_113,X_119,X_120);
    X_249:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","x",0,3,4);
    X_114:bat[:oid,:dbl]  := mosaic.decompress(X_249);
    X_126:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","y",0,3,4);
    X_110:bat[:oid,:oid]  := sql.tid(X_6,"sys","part2",3,4);
    X_155 := algebra.subselect(X_126,X_110,A2,A3,true,true,false);
    (X_133:bat[:oid,:oid] ,X_134:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","y",2,3,4);
    X_163 := algebra.subselect(X_134,nil:bat[:oid,:oid],A2,A3,true,true,false);
    X_38:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","y",1);
    X_99 := algebra.subselect(X_38,X_110,A2,A3,true,true,false);
    X_167 := sql.subdelta(X_155,X_110,X_133,X_163,X_99);
    X_171 := algebra.subselect(X_114,X_167,A0,A1,true,true,false);
    (X_121:bat[:oid,:oid] ,X_122:bat[:oid,:dbl] ) := sql.bind(X_6,"sys","part2","x",2,3,4);
    X_175 := algebra.subselect(X_122,nil:bat[:oid,:oid],A0,A1,true,true,false);
    X_34:bat[:oid,:dbl]  := sql.bind(X_6,"sys","part2","x",1);
    X_101 := algebra.subselect(X_34,X_167,A0,A1,true,true,false);
    X_179 := sql.subdelta(X_171,X_167,X_121,X_175,X_101);
    X_183 := sql.projectdelta(X_179,X_114,X_121,X_122,X_34);
    X_196 := mat.packIncrement(X_180,4);
    X_197 := mat.packIncrement(X_196,X_181);
    X_198 := mat.packIncrement(X_197,X_182);
    X_40 := mat.packIncrement(X_198,X_183);
    X_41 := bat.append(X_30,X_40,true);
    language.pass(X_10);
    language.pass(X_26);
    language.pass(X_13);
    language.pass(X_16);
    language.pass(r1_16);
    language.pass(X_19);
    language.pass(X_104);
    language.pass(X_164);
    language.pass(X_111);
    language.pass(X_115);
    language.pass(X_116);
    language.pass(X_106);
    language.pass(X_165);
    language.pass(X_112);
    language.pass(X_117);
    language.pass(X_118);
    language.pass(X_108);
    language.pass(X_166);
    language.pass(X_113);
    language.pass(X_119);
    language.pass(X_120);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_110);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_167);
    language.pass(X_114);
    language.pass(X_121);
    language.pass(X_122);
    language.pass(X_34);
exit X_237;
    X_42 := sql.append(X_6,"sys","answ","x",X_41);
barrier X_240 := language.dataflow();
    X_44:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_47 := sql.projectdelta(X_28,X_21,X_23,r1_27,X_25);
    X_48 := bat.append(X_44,X_47,true);
    X_184 := sql.projectdelta(X_176,X_123,X_127,X_128);
    X_185 := sql.projectdelta(X_177,X_124,X_129,X_130);
    X_186 := sql.projectdelta(X_178,X_125,X_131,X_132);
    X_187 := sql.projectdelta(X_179,X_126,X_133,X_134,X_38);
    X_200 := mat.packIncrement(X_184,4);
    X_201 := mat.packIncrement(X_200,X_185);
    X_202 := mat.packIncrement(X_201,X_186);
    X_50 := mat.packIncrement(X_202,X_187);
    X_51 := bat.append(X_48,X_50,true);
exit X_240;
    X_52 := sql.append(X_42,"sys","answ","y",X_51);
barrier X_243 := language.dataflow();
    X_55:bat[:oid,:dbl]  := bat.new(nil:oid,nil:dbl);
    X_56:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part1","z",0);
    (X_60,r1_87) := sql.bind(X_52,"sys","part1","z",2);
    X_63:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part1","z",1);
    X_65 := sql.projectdelta(X_28,X_56,X_60,r1_87,X_63);
    X_66 := bat.append(X_55,X_65,true);
    X_137:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part2","z",0,0,4);
    (X_144:bat[:oid,:oid] ,X_145:bat[:oid,:dbl] ) := sql.bind(X_52,"sys","part2","z",2,0,4);
    X_192 := sql.projectdelta(X_176,X_137,X_144,X_145);
    X_139:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part2","z",0,1,4);
    (X_146:bat[:oid,:oid] ,X_147:bat[:oid,:dbl] ) := sql.bind(X_52,"sys","part2","z",2,1,4);
    X_193 := sql.projectdelta(X_177,X_139,X_146,X_147);
    X_141:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part2","z",0,2,4);
    (X_148:bat[:oid,:oid] ,X_149:bat[:oid,:dbl] ) := sql.bind(X_52,"sys","part2","z",2,2,4);
    X_194 := sql.projectdelta(X_178,X_141,X_148,X_149);
    X_143:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part2","z",0,3,4);
    (X_150:bat[:oid,:oid] ,X_151:bat[:oid,:dbl] ) := sql.bind(X_52,"sys","part2","z",2,3,4);
    X_68:bat[:oid,:dbl]  := sql.bind(X_52,"sys","part2","z",1);
    X_195 := sql.projectdelta(X_179,X_143,X_150,X_151,X_68);
    X_204 := mat.packIncrement(X_192,4);
    X_205 := mat.packIncrement(X_204,X_193);
    X_206 := mat.packIncrement(X_205,X_194);
    X_69 := mat.packIncrement(X_206,X_195);
    X_70 := bat.append(X_66,X_69,true);
exit X_243;
    X_71 := sql.append(X_52,"sys","answ","z",X_70);
    X_73 := aggr.count(X_70);
    sql.affectedRows(X_71,X_73,"");
end s14_1;
# querylog.define("explain insert into answ\nselect * from complete\nwhere x between 0 and 2 and y between 0 and 2;","default_pipe")
#INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
[ 6	]
#DROP TABLE complete;
#DROP TABLE part1;
#DROP TABLE part2;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

