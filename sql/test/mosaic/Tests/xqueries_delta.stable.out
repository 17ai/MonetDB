stdout of test 'xqueries_delta` in directory 'sql/test/mosaic` itself:


# 21:39:36 >  
# 21:39:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38894" "--set" "mapi_usock=/var/tmp/mtest-26302/.s.monetdb.38894" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/mosaic//Linux/var/MonetDB/mTests_sql_test_mosaic" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 21:39:36 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mosaic', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:38894/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-26302/.s.monetdb.38894
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 21:39:36 >  
# 21:39:36 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-26302" "--port=38894"
# 21:39:36 >  

#set optimizer='sequential_pipe';
#drop table tmp3;
#create table tmp3( i integer, b boolean, f real,t timestamp);
#insert into tmp3 values
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
#(1, true, 0.314,'2014-08-23 11:34:54.000000'),
[ 86	]
#alter table tmp3 set read only;
#explain select count(*) from tmp3 where i <4;
% .explain # table_name
% mal # name
% clob # type
% 101 # length
function user.s6_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i <4;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.thetasubselect(X_10,X_4,A0,"<");
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s6_1;
#select count(*) from tmp3 where i <4;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 44	]
#explain select count(*) from tmp3 where i = 7;
% .explain # table_name
% mal # name
% clob # type
% 102 # length
function user.s7_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i = 7;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.subselect(X_10,X_4,A0,A0,true,true,false);
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s7_1;
#select count(*) from tmp3 where i = 7;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 1 # length
[ 2	]
#select count(*) from tmp3 where f <0.316;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 42	]
#select count(*) from tmp3 where b = true;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 66	]
#alter table tmp3 alter column i set storage 'delta';
#alter table tmp3 alter column b set storage 'delta';
#alter table tmp3 alter column f set storage 'delta';
#select count(*) from tmp3;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 86	]
#explain select count(*) from tmp3 where i <4;
% .explain # table_name
% mal # name
% clob # type
% 101 # length
function user.s14_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i <4;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.thetasubselect(X_10,X_4,A0,"<");
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s14_1;
#select count(*) from tmp3 where i <4;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 44	]
#explain select count(*) from tmp3 where i = 7;
% .explain # table_name
% mal # name
% clob # type
% 102 # length
function user.s15_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i = 7;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.subselect(X_10,X_4,A0,A0,true,true,false);
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s15_1;
#select count(*) from tmp3 where i = 7;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 1 # length
[ 2	]
#select count(*) from tmp3 where f <0.316;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 42	]
#select count(*) from tmp3 where b = true;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 66	]
#alter table tmp3 alter column i set storage NULL;
#alter table tmp3 alter column b set storage NULL;
#alter table tmp3 alter column f set storage NULL;
#explain select count(*) from tmp3 where i <4;
% .explain # table_name
% mal # name
% clob # type
% 101 # length
function user.s21_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i <4;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.thetasubselect(X_10,X_4,A0,"<");
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s21_1;
#select count(*) from tmp3 where i <4;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 44	]
#explain select count(*) from tmp3 where i = 7;
% .explain # table_name
% mal # name
% clob # type
% 102 # length
function user.s22_1{autoCommit=true}(A0:int):void;
    X_23:void  := querylog.define("explain select count(*) from tmp3 where i = 7;","sequential_pipe");
    X_3 := sql.mvc();
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","tmp3","i",0);
    X_10 := X_7;
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","tmp3");
    X_11 := mosaic.subselect(X_10,X_4,A0,A0,true,true,false);
    X_13 := mosaic.leftfetchjoin(X_11,X_10);
    X_14 := aggr.count(X_13);
    sql.exportValue(1,"sys.L1","L1","wrd",64,0,7,X_14,"");
end user.s22_1;
#select count(*) from tmp3 where i = 7;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 1 # length
[ 2	]
#select count(*) from tmp3 where f <0.316;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 42	]
#select count(*) from tmp3 where b = true;
% sys.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 66	]
#alter table tmp3 set read write;

# 21:39:36 >  
# 21:39:36 >  "Done."
# 21:39:36 >  

