# Query:
# CREATE ARRAY A1( x integer DIMENSION[4], v float DEFAULT 0.0);
#
# Note: additional operations required for explicit indices
# Note: base arrays are initialized once in most situations considered!
#       (appends are allowed)
# Note: What is the storage model ? explicit dimensions? or implicit?
#       explicit model, after definition we have to instanciate the array
#       create the x- and y- bats, initialize with their value

# x:bat[:oid,:int]:= sciql.newDimension("sys","A1","x",0,0,4,1);

function user.s0_1{autoCommit=true}():void;
	sql.mvc();
	sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
	sql.exportOperation("");
end s0_1;

# Query:
# CREATE ARRAY A2 ( x integer DIMENSION[0:4:1], v float DEFAULT 0.0);
function user.s1_1{autoCommit=true}():void;
	sql.mvc();
	sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
	sql.exportOperation("");
end s1_1;

# Query:
# CREATE SEQUENCE range AS integer START WITH 0 INCREMENT BY 1 MAXVALUE 3;
# CREATE ARRAY A3 ( x integer DIMENSION range, v float DEFAULT 0.0);
function user.s2_1{autoCommit=true}():void;
	sql.mvc();
	sql.catalog(5,"sys":str,140473281519496:ptr,0:int);
	sql.exportOperation("");
end s2_1;
function user.s3_1{autoCommit=true}():void;
	sql.mvc();
	sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
	sql.exportOperation("");
end s3_1;

