# Query: CREATE ARRAY matrix (
#            x integer DIMENSION[4],
#            y integer DIMENSION[4],
#            val float DEFAULT 0.0 );

#(x:bat[:oid,:int],y:bat[:oid,:int]) := sciql.newDimension("sys","matrix","x",0,0,4,1,"y",0,4,1);

function user.s0_1{autoCommit=true}():void;
    sql.mvc();
    sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
    sql.exportOperation("");
end s0_1;

# Query: CREATE ARRAY stripes(
#            x integer DIMENSION[4],
#            y integer DIMENSION[4] CHECK(mod(y,2) = 1),
#            val float DEFAULT 0.0);

function user.s1_1{autoCommit=true}():void;
    sql.mvc();
    sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
    sql.exportOperation("");
end s1_1;

# Query: CREATE ARRAY diagonal(
#            x integer DIMENSION[4],
#            y integer DIMENSION[4] CHECK(x = y),
#            val float DEFAULT 0.0);

function user.s2_1{autoCommit=true}():void;
    sql.mvc();
    sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
    sql.exportOperation("");
end s2_1;

# Query: CREATE ARRAY sparse(
#            x integer DIMENSION[4],
#            y integer DIMENSION[4],
#            val float DEFAULT 0.0 CHECK(val>=0));

function user.s3_1{autoCommit=true}():void;
    sql.mvc();
    sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
    sql.exportOperation("");
end s3_1;

# Query: CREATE ARRAY stripes2(
#            x integer DIMENSION,
#            y integer DIMENSION,
#            val float DEFAULT 0.0);

function user.s1_1{autoCommit=true}():void;
    sql.mvc();
    sql.catalog(63,"sys":str,140473280789176:ptr,0:int); # DDL_CREATE_ARRAY==63
    sql.exportOperation("");
end s1_1;

