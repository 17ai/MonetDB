stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1319:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",49:int);
barrier X_1438 := language.dataflow();
    X_1362 := bat.new(nil:str);
    X_1369 := bat.append(X_1362,".test");
    X_1379 := bat.append(X_1369,".test");
    X_1364 := bat.new(nil:str);
    X_1371 := bat.append(X_1364,"x");
    X_1380 := bat.append(X_1371,"y");
    X_1365 := bat.new(nil:str);
    X_1373 := bat.append(X_1365,"double");
    X_1382 := bat.append(X_1373,"double");
    X_1366 := bat.new(nil:int);
    X_1375 := bat.append(X_1366,53:int);
    X_1383 := bat.append(X_1375,53:int);
    X_1368 := bat.new(nil:int);
    X_1377 := bat.append(X_1368,0:int);
    X_1384 := bat.append(X_1377,0:int);
    X_1354:bat[:dbl] := bat.new(nil:dbl);
    X_1322 := sql.mvc();
    X_1408:bat[:dbl] := sql.bind(X_1322,"sys","test2","x",0:int,0:int,2:int);
    C_1405:bat[:oid] := sql.tid(X_1322,"sys","test2",0:int,2:int);
    C_1413 := algebra.subselect(X_1408,C_1405,4:dbl,6:dbl,true,true,false);
    X_1415 := algebra.projection(C_1413,X_1408);
    X_1409:bat[:dbl] := sql.bind(X_1322,"sys","test2","x",0:int,1:int,2:int);
    C_1407:bat[:oid] := sql.tid(X_1322,"sys","test2",1:int,2:int);
    C_1414 := algebra.subselect(X_1409,C_1407,4:dbl,6:dbl,true,true,false);
    X_1416 := algebra.projection(C_1414,X_1409);
    X_1427 := mat.packIncrement(X_1415,2:int);
    X_1339 := mat.packIncrement(X_1427,X_1416);
    X_1356 := bat.append(X_1354,X_1339,true);
    X_1344:bat[:dbl] := sql.bind(X_1322,"sys","test3","x",0:int);
    C_1342:bat[:oid] := sql.tid(X_1322,"sys","test3");
    C_1350 := algebra.subselect(X_1344,C_1342,4:dbl,6:dbl,true,true,false);
    X_1351 := algebra.projection(C_1350,X_1344);
    X_1357 := bat.append(X_1356,X_1351,true);
    X_1358:bat[:dbl] := bat.new(nil:dbl);
    X_1410:bat[:dbl] := sql.bind(X_1322,"sys","test2","y",0:int,0:int,2:int);
    X_1417 := algebra.projection(C_1413,X_1410);
    X_1411:bat[:dbl] := sql.bind(X_1322,"sys","test2","y",0:int,1:int,2:int);
    X_1418 := algebra.projection(C_1414,X_1411);
    X_1429 := mat.packIncrement(X_1417,2:int);
    X_1340 := mat.packIncrement(X_1429,X_1418);
    X_1359 := bat.append(X_1358,X_1340,true);
    X_1346:bat[:dbl] := sql.bind(X_1322,"sys","test3","y",0:int);
    X_1352 := algebra.projection(C_1350,X_1346);
    X_1360 := bat.append(X_1359,X_1352,true);
    language.pass(X_1408);
    language.pass(X_1409);
    language.pass(X_1344);
    language.pass(C_1413);
    language.pass(C_1414);
    language.pass(C_1350);
exit X_1438;
    sql.resultSet(X_1379,X_1380,X_1382,X_1383,X_1384,X_1357,X_1360);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=4 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1454:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",63:int);
barrier X_1590 := language.dataflow();
    X_1509 := bat.new(nil:str);
    X_1516 := bat.append(X_1509,".test");
    X_1526 := bat.append(X_1516,".test");
    X_1511 := bat.new(nil:str);
    X_1518 := bat.append(X_1511,"x");
    X_1527 := bat.append(X_1518,"y");
    X_1512 := bat.new(nil:str);
    X_1520 := bat.append(X_1512,"double");
    X_1529 := bat.append(X_1520,"double");
    X_1513 := bat.new(nil:int);
    X_1522 := bat.append(X_1513,53:int);
    X_1530 := bat.append(X_1522,53:int);
    X_1515 := bat.new(nil:int);
    X_1524 := bat.append(X_1515,0:int);
    X_1531 := bat.append(X_1524,0:int);
    X_1501:bat[:dbl] := bat.new(nil:dbl);
    X_1457 := sql.mvc();
    X_1560:bat[:dbl] := sql.bind(X_1457,"sys","test2","x",0:int,0:int,2:int);
    C_1557:bat[:oid] := sql.tid(X_1457,"sys","test2",0:int,2:int);
    C_1565 := algebra.subselect(X_1560,C_1557,4:dbl,6:dbl,true,true,false);
    X_1567 := algebra.projection(C_1565,X_1560);
    X_1561:bat[:dbl] := sql.bind(X_1457,"sys","test2","x",0:int,1:int,2:int);
    C_1559:bat[:oid] := sql.tid(X_1457,"sys","test2",1:int,2:int);
    C_1566 := algebra.subselect(X_1561,C_1559,4:dbl,6:dbl,true,true,false);
    X_1568 := algebra.projection(C_1566,X_1561);
    X_1579 := mat.packIncrement(X_1567,2:int);
    X_1480 := mat.packIncrement(X_1579,X_1568);
    X_1503 := bat.append(X_1501,X_1480,true);
    X_1485:bat[:dbl] := sql.bind(X_1457,"sys","test3","x",0:int);
    C_1483:bat[:oid] := sql.tid(X_1457,"sys","test3");
    C_1497 := algebra.subselect(X_1485,C_1483,4:dbl,6:dbl,true,true,false);
    X_1498 := algebra.projection(C_1497,X_1485);
    X_1504 := bat.append(X_1503,X_1498,true);
    X_1505:bat[:dbl] := bat.new(nil:dbl);
    X_1562:bat[:dbl] := sql.bind(X_1457,"sys","test2","y",0:int,0:int,2:int);
    X_1569 := algebra.projection(C_1565,X_1562);
    X_1563:bat[:dbl] := sql.bind(X_1457,"sys","test2","y",0:int,1:int,2:int);
    X_1570 := algebra.projection(C_1566,X_1563);
    X_1581 := mat.packIncrement(X_1569,2:int);
    X_1481 := mat.packIncrement(X_1581,X_1570);
    X_1506 := bat.append(X_1505,X_1481,true);
    X_1487:bat[:dbl] := sql.bind(X_1457,"sys","test3","y",0:int);
    X_1499 := algebra.projection(C_1497,X_1487);
    X_1507 := bat.append(X_1506,X_1499,true);
    language.pass(X_1560);
    language.pass(X_1561);
    language.pass(X_1485);
    language.pass(C_1565);
    language.pass(C_1566);
    language.pass(C_1497);
exit X_1590;
    sql.resultSet(X_1526,X_1527,X_1529,X_1530,X_1531,X_1504,X_1507);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions=26 time=587 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1607:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",37:int);
barrier X_1710 := language.dataflow();
    X_1634 := bat.new(nil:str);
    X_1641 := bat.append(X_1634,"sys.test");
    X_1650 := bat.append(X_1641,"sys.test");
    X_1636 := bat.new(nil:str);
    X_1643 := bat.append(X_1636,"x");
    X_1651 := bat.append(X_1643,"y");
    X_1637 := bat.new(nil:str);
    X_1644 := bat.append(X_1637,"double");
    X_1653 := bat.append(X_1644,"double");
    X_1638 := bat.new(nil:int);
    X_1646 := bat.append(X_1638,53:int);
    X_1654 := bat.append(X_1646,53:int);
    X_1640 := bat.new(nil:int);
    X_1648 := bat.append(X_1640,0:int);
    X_1655 := bat.append(X_1648,0:int);
    X_1610 := sql.mvc();
    X_1680:bat[:dbl] := sql.bind(X_1610,"sys","test3","y",0:int,0:int,2:int);
    X_1678:bat[:dbl] := sql.bind(X_1610,"sys","test3","x",0:int,0:int,2:int);
    C_1675:bat[:oid] := sql.tid(X_1610,"sys","test3",0:int,2:int);
    C_1683 := algebra.subselect(X_1678,C_1675,4:dbl,6:dbl,true,true,false);
    C_1685 := algebra.subselect(X_1680,C_1683,0:dbl,2:dbl,true,true,false);
    X_1687 := algebra.projection(C_1685,X_1678);
    X_1681:bat[:dbl] := sql.bind(X_1610,"sys","test3","y",0:int,1:int,2:int);
    X_1679:bat[:dbl] := sql.bind(X_1610,"sys","test3","x",0:int,1:int,2:int);
    C_1677:bat[:oid] := sql.tid(X_1610,"sys","test3",1:int,2:int);
    C_1684 := algebra.subselect(X_1679,C_1677,4:dbl,6:dbl,true,true,false);
    C_1686 := algebra.subselect(X_1681,C_1684,0:dbl,2:dbl,true,true,false);
    X_1688 := algebra.projection(C_1686,X_1679);
    X_1699 := mat.packIncrement(X_1687,2:int);
    X_1630 := mat.packIncrement(X_1699,X_1688);
    X_1689 := algebra.projection(C_1685,X_1680);
    X_1690 := algebra.projection(C_1686,X_1681);
    X_1701 := mat.packIncrement(X_1689,2:int);
    X_1631 := mat.packIncrement(X_1701,X_1690);
    language.pass(X_1678);
    language.pass(X_1679);
    language.pass(C_1685);
    language.pass(X_1680);
    language.pass(C_1686);
    language.pass(X_1681);
exit X_1710;
    sql.resultSet(X_1650,X_1651,X_1653,X_1654,X_1655,X_1630,X_1631);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=6 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 8 time=27 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 4 time=15 usec 
#aliases              actions=11 time=13 usec 
#mitosis              actions= 1 time=32 usec 
#mergetable           actions= 4 time=67 usec 
#deadcode             actions= 5 time=12 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions= 9 time=11 usec 
#commonTerms          actions= 0 time=9 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=9 usec 
#reorder              actions= 1 time=38 usec 
#matpack              actions= 2 time=10 usec 
#dataflow             actions=27 time=34 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=4 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=35 usec 
#total                actions=26 time=466 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1730:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",45:int);
barrier X_1845 := language.dataflow();
    X_1764 := bat.new(nil:str);
    X_1771 := bat.append(X_1764,"sys.test");
    X_1781 := bat.append(X_1771,"sys.test");
    X_1766 := bat.new(nil:str);
    X_1773 := bat.append(X_1766,"x");
    X_1782 := bat.append(X_1773,"y");
    X_1767 := bat.new(nil:str);
    X_1775 := bat.append(X_1767,"double");
    X_1784 := bat.append(X_1775,"double");
    X_1768 := bat.new(nil:int);
    X_1777 := bat.append(X_1768,53:int);
    X_1785 := bat.append(X_1777,53:int);
    X_1770 := bat.new(nil:int);
    X_1779 := bat.append(X_1770,0:int);
    X_1786 := bat.append(X_1779,0:int);
    X_1733 := sql.mvc();
    X_1815:bat[:dbl] := sql.bind(X_1733,"sys","test3","y",0:int,0:int,2:int);
    X_1813:bat[:dbl] := sql.bind(X_1733,"sys","test3","x",0:int,0:int,2:int);
    C_1810:bat[:oid] := sql.tid(X_1733,"sys","test3",0:int,2:int);
    C_1818 := algebra.subselect(X_1813,C_1810,4:dbl,6:dbl,true,true,false);
    C_1820 := algebra.subselect(X_1815,C_1818,0:dbl,2:dbl,true,true,false);
    X_1822 := algebra.projection(C_1820,X_1813);
    X_1816:bat[:dbl] := sql.bind(X_1733,"sys","test3","y",0:int,1:int,2:int);
    X_1814:bat[:dbl] := sql.bind(X_1733,"sys","test3","x",0:int,1:int,2:int);
    C_1812:bat[:oid] := sql.tid(X_1733,"sys","test3",1:int,2:int);
    C_1819 := algebra.subselect(X_1814,C_1812,4:dbl,6:dbl,true,true,false);
    C_1821 := algebra.subselect(X_1816,C_1819,0:dbl,2:dbl,true,true,false);
    X_1823 := algebra.projection(C_1821,X_1814);
    X_1834 := mat.packIncrement(X_1822,2:int);
    X_1760 := mat.packIncrement(X_1834,X_1823);
    X_1824 := algebra.projection(C_1820,X_1815);
    X_1825 := algebra.projection(C_1821,X_1816);
    X_1836 := mat.packIncrement(X_1824,2:int);
    X_1761 := mat.packIncrement(X_1836,X_1825);
    language.pass(X_1813);
    language.pass(X_1814);
    language.pass(C_1820);
    language.pass(X_1815);
    language.pass(C_1821);
    language.pass(X_1816);
exit X_1845;
    sql.resultSet(X_1781,X_1782,X_1784,X_1785,X_1786,X_1760,X_1761);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1868:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",53:int);
barrier X_1993 := language.dataflow();
    X_1908 := bat.new(nil:str);
    X_1915 := bat.append(X_1908,"sys.test");
    X_1925 := bat.append(X_1915,"sys.test");
    X_1910 := bat.new(nil:str);
    X_1917 := bat.append(X_1910,"x");
    X_1926 := bat.append(X_1917,"y");
    X_1911 := bat.new(nil:str);
    X_1919 := bat.append(X_1911,"double");
    X_1928 := bat.append(X_1919,"double");
    X_1912 := bat.new(nil:int);
    X_1921 := bat.append(X_1912,53:int);
    X_1929 := bat.append(X_1921,53:int);
    X_1914 := bat.new(nil:int);
    X_1923 := bat.append(X_1914,0:int);
    X_1930 := bat.append(X_1923,0:int);
    X_1871 := sql.mvc();
    X_1963:bat[:dbl] := sql.bind(X_1871,"sys","test3","y",0:int,0:int,2:int);
    X_1961:bat[:dbl] := sql.bind(X_1871,"sys","test3","x",0:int,0:int,2:int);
    C_1958:bat[:oid] := sql.tid(X_1871,"sys","test3",0:int,2:int);
    C_1966 := algebra.subselect(X_1961,C_1958,4:dbl,6:dbl,true,true,false);
    C_1968 := algebra.subselect(X_1963,C_1966,0:dbl,2:dbl,true,true,false);
    X_1970 := algebra.projection(C_1968,X_1961);
    X_1964:bat[:dbl] := sql.bind(X_1871,"sys","test3","y",0:int,1:int,2:int);
    X_1962:bat[:dbl] := sql.bind(X_1871,"sys","test3","x",0:int,1:int,2:int);
    C_1960:bat[:oid] := sql.tid(X_1871,"sys","test3",1:int,2:int);
    C_1967 := algebra.subselect(X_1962,C_1960,4:dbl,6:dbl,true,true,false);
    C_1969 := algebra.subselect(X_1964,C_1967,0:dbl,2:dbl,true,true,false);
    X_1971 := algebra.projection(C_1969,X_1962);
    X_1982 := mat.packIncrement(X_1970,2:int);
    X_1904 := mat.packIncrement(X_1982,X_1971);
    X_1972 := algebra.projection(C_1968,X_1963);
    X_1973 := algebra.projection(C_1969,X_1964);
    X_1984 := mat.packIncrement(X_1972,2:int);
    X_1905 := mat.packIncrement(X_1984,X_1973);
    language.pass(X_1961);
    language.pass(X_1962);
    language.pass(C_1968);
    language.pass(X_1963);
    language.pass(C_1969);
    language.pass(X_1964);
exit X_1993;
    sql.resultSet(X_1925,X_1926,X_1928,X_1929,X_1930,X_1904,X_1905);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

