stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1223:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",49:int);
barrier X_1342 := language.dataflow();
    X_1266 := bat.new(nil:str);
    X_1273 := bat.append(X_1266,".test");
    X_1283 := bat.append(X_1273,".test");
    X_1268 := bat.new(nil:str);
    X_1275 := bat.append(X_1268,"x");
    X_1284 := bat.append(X_1275,"y");
    X_1269 := bat.new(nil:str);
    X_1277 := bat.append(X_1269,"double");
    X_1286 := bat.append(X_1277,"double");
    X_1270 := bat.new(nil:int);
    X_1279 := bat.append(X_1270,53:int);
    X_1287 := bat.append(X_1279,53:int);
    X_1272 := bat.new(nil:int);
    X_1281 := bat.append(X_1272,0:int);
    X_1288 := bat.append(X_1281,0:int);
    X_1258:bat[:dbl] := bat.new(nil:dbl);
    X_1226 := sql.mvc();
    X_1347:bat[:dbl] := sql.bind(X_1226,"sys","test2","x",0:int,0:int,2:int);
    X_1312:bat[:dbl] := mosaic.decompress(X_1347);
    C_1309:bat[:oid] := sql.tid(X_1226,"sys","test2",0:int,2:int);
    C_1317 := algebra.select(X_1312,C_1309,4:dbl,6:dbl,true,true,false);
    X_1319 := algebra.projection(C_1317,X_1312);
    X_1348:bat[:dbl] := sql.bind(X_1226,"sys","test2","x",0:int,1:int,2:int);
    X_1313:bat[:dbl] := mosaic.decompress(X_1348);
    C_1311:bat[:oid] := sql.tid(X_1226,"sys","test2",1:int,2:int);
    C_1318 := algebra.select(X_1313,C_1311,4:dbl,6:dbl,true,true,false);
    X_1320 := algebra.projection(C_1318,X_1313);
    X_1331 := mat.packIncrement(X_1319,2:int);
    X_1243 := mat.packIncrement(X_1331,X_1320);
    X_1260 := bat.append(X_1258,X_1243,true);
    X_1349:bat[:dbl] := sql.bind(X_1226,"sys","test3","x",0:int);
    X_1248:bat[:dbl] := mosaic.decompress(X_1349);
    C_1246:bat[:oid] := sql.tid(X_1226,"sys","test3");
    C_1254 := algebra.select(X_1248,C_1246,4:dbl,6:dbl,true,true,false);
    X_1255 := algebra.projection(C_1254,X_1248);
    X_1261 := bat.append(X_1260,X_1255,true);
    X_1262:bat[:dbl] := bat.new(nil:dbl);
    X_1314:bat[:dbl] := sql.bind(X_1226,"sys","test2","y",0:int,0:int,2:int);
    X_1321 := mosaic.projection(C_1317,X_1314);
    X_1315:bat[:dbl] := sql.bind(X_1226,"sys","test2","y",0:int,1:int,2:int);
    X_1322 := mosaic.projection(C_1318,X_1315);
    X_1333 := mat.packIncrement(X_1321,2:int);
    X_1244 := mat.packIncrement(X_1333,X_1322);
    X_1263 := bat.append(X_1262,X_1244,true);
    X_1250:bat[:dbl] := sql.bind(X_1226,"sys","test3","y",0:int);
    X_1256 := mosaic.projection(C_1254,X_1250);
    X_1264 := bat.append(X_1263,X_1256,true);
    language.pass(X_1312);
    language.pass(X_1313);
    language.pass(X_1248);
    language.pass(C_1317);
    language.pass(C_1318);
    language.pass(C_1254);
exit X_1342;
    sql.resultSet(X_1283,X_1284,X_1286,X_1287,X_1288,X_1261,X_1264);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#evaluate             actions= 6 time=21 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 8 time=15 usec 
#aliases              actions=12 time=12 usec 
#mitosis              actions= 1 time=29 usec 
#mergetable           actions= 3 time=61 usec 
#deadcode             actions= 4 time=10 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 8 time=10 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=35 usec 
#matpack              actions= 2 time=9 usec 
#dataflow             actions=27 time=44 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=4 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions=26 time=442 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1362:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",63:int);
barrier X_1498 := language.dataflow();
    X_1417 := bat.new(nil:str);
    X_1424 := bat.append(X_1417,".test");
    X_1434 := bat.append(X_1424,".test");
    X_1419 := bat.new(nil:str);
    X_1426 := bat.append(X_1419,"x");
    X_1435 := bat.append(X_1426,"y");
    X_1420 := bat.new(nil:str);
    X_1428 := bat.append(X_1420,"double");
    X_1437 := bat.append(X_1428,"double");
    X_1421 := bat.new(nil:int);
    X_1430 := bat.append(X_1421,53:int);
    X_1438 := bat.append(X_1430,53:int);
    X_1423 := bat.new(nil:int);
    X_1432 := bat.append(X_1423,0:int);
    X_1439 := bat.append(X_1432,0:int);
    X_1409:bat[:dbl] := bat.new(nil:dbl);
    X_1365 := sql.mvc();
    X_1503:bat[:dbl] := sql.bind(X_1365,"sys","test2","x",0:int,0:int,2:int);
    X_1468:bat[:dbl] := mosaic.decompress(X_1503);
    C_1465:bat[:oid] := sql.tid(X_1365,"sys","test2",0:int,2:int);
    C_1473 := algebra.select(X_1468,C_1465,4:dbl,6:dbl,true,true,false);
    X_1475 := algebra.projection(C_1473,X_1468);
    X_1504:bat[:dbl] := sql.bind(X_1365,"sys","test2","x",0:int,1:int,2:int);
    X_1469:bat[:dbl] := mosaic.decompress(X_1504);
    C_1467:bat[:oid] := sql.tid(X_1365,"sys","test2",1:int,2:int);
    C_1474 := algebra.select(X_1469,C_1467,4:dbl,6:dbl,true,true,false);
    X_1476 := algebra.projection(C_1474,X_1469);
    X_1487 := mat.packIncrement(X_1475,2:int);
    X_1388 := mat.packIncrement(X_1487,X_1476);
    X_1411 := bat.append(X_1409,X_1388,true);
    X_1505:bat[:dbl] := sql.bind(X_1365,"sys","test3","x",0:int);
    X_1393:bat[:dbl] := mosaic.decompress(X_1505);
    C_1391:bat[:oid] := sql.tid(X_1365,"sys","test3");
    C_1405 := algebra.select(X_1393,C_1391,4:dbl,6:dbl,true,true,false);
    X_1406 := algebra.projection(C_1405,X_1393);
    X_1412 := bat.append(X_1411,X_1406,true);
    X_1413:bat[:dbl] := bat.new(nil:dbl);
    X_1470:bat[:dbl] := sql.bind(X_1365,"sys","test2","y",0:int,0:int,2:int);
    X_1477 := mosaic.projection(C_1473,X_1470);
    X_1471:bat[:dbl] := sql.bind(X_1365,"sys","test2","y",0:int,1:int,2:int);
    X_1478 := mosaic.projection(C_1474,X_1471);
    X_1489 := mat.packIncrement(X_1477,2:int);
    X_1389 := mat.packIncrement(X_1489,X_1478);
    X_1414 := bat.append(X_1413,X_1389,true);
    X_1395:bat[:dbl] := sql.bind(X_1365,"sys","test3","y",0:int);
    X_1407 := mosaic.projection(C_1405,X_1395);
    X_1415 := bat.append(X_1414,X_1407,true);
    language.pass(X_1468);
    language.pass(X_1469);
    language.pass(X_1393);
    language.pass(C_1473);
    language.pass(C_1474);
    language.pass(C_1405);
exit X_1498;
    sql.resultSet(X_1434,X_1435,X_1437,X_1438,X_1439,X_1412,X_1415);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=5 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#evaluate             actions=20 time=59 usec 
#emptybind            actions= 0 time=0 usec 
#pushselect           actions= 8 time=17 usec 
#aliases              actions=26 time=24 usec 
#mitosis              actions= 1 time=29 usec 
#mergetable           actions= 3 time=62 usec 
#deadcode             actions= 4 time=11 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 9 time=11 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=36 usec 
#matpack              actions= 2 time=9 usec 
#dataflow             actions=27 time=34 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=4 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions=26 time=505 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1519:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",37:int);
barrier X_1622 := language.dataflow();
    X_1546 := bat.new(nil:str);
    X_1553 := bat.append(X_1546,"sys.test");
    X_1562 := bat.append(X_1553,"sys.test");
    X_1548 := bat.new(nil:str);
    X_1555 := bat.append(X_1548,"x");
    X_1563 := bat.append(X_1555,"y");
    X_1549 := bat.new(nil:str);
    X_1556 := bat.append(X_1549,"double");
    X_1565 := bat.append(X_1556,"double");
    X_1550 := bat.new(nil:int);
    X_1558 := bat.append(X_1550,53:int);
    X_1566 := bat.append(X_1558,53:int);
    X_1552 := bat.new(nil:int);
    X_1560 := bat.append(X_1552,0:int);
    X_1567 := bat.append(X_1560,0:int);
    X_1522 := sql.mvc();
    X_1627:bat[:dbl] := sql.bind(X_1522,"sys","test3","y",0:int,0:int,2:int);
    X_1592:bat[:dbl] := mosaic.decompress(X_1627);
    X_1628:bat[:dbl] := sql.bind(X_1522,"sys","test3","x",0:int,0:int,2:int);
    X_1590:bat[:dbl] := mosaic.decompress(X_1628);
    C_1587:bat[:oid] := sql.tid(X_1522,"sys","test3",0:int,2:int);
    C_1595 := algebra.select(X_1590,C_1587,4:dbl,6:dbl,true,true,false);
    C_1597 := algebra.select(X_1592,C_1595,0:dbl,2:dbl,true,true,false);
    X_1599 := algebra.projection(C_1597,X_1590);
    X_1629:bat[:dbl] := sql.bind(X_1522,"sys","test3","y",0:int,1:int,2:int);
    X_1593:bat[:dbl] := mosaic.decompress(X_1629);
    X_1630:bat[:dbl] := sql.bind(X_1522,"sys","test3","x",0:int,1:int,2:int);
    X_1591:bat[:dbl] := mosaic.decompress(X_1630);
    C_1589:bat[:oid] := sql.tid(X_1522,"sys","test3",1:int,2:int);
    C_1596 := algebra.select(X_1591,C_1589,4:dbl,6:dbl,true,true,false);
    C_1598 := algebra.select(X_1593,C_1596,0:dbl,2:dbl,true,true,false);
    X_1600 := algebra.projection(C_1598,X_1591);
    X_1611 := mat.packIncrement(X_1599,2:int);
    X_1542 := mat.packIncrement(X_1611,X_1600);
    X_1601 := algebra.projection(C_1597,X_1592);
    X_1602 := algebra.projection(C_1598,X_1593);
    X_1613 := mat.packIncrement(X_1601,2:int);
    X_1543 := mat.packIncrement(X_1613,X_1602);
    language.pass(X_1590);
    language.pass(X_1591);
    language.pass(C_1597);
    language.pass(X_1592);
    language.pass(C_1598);
    language.pass(X_1593);
exit X_1622;
    sql.resultSet(X_1562,X_1563,X_1565,X_1566,X_1567,X_1542,X_1543);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=6 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 8 time=23 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 4 time=13 usec 
#aliases              actions=11 time=10 usec 
#mitosis              actions= 1 time=35 usec 
#mergetable           actions= 4 time=57 usec 
#deadcode             actions= 5 time=10 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions= 9 time=9 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=5 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=29 usec 
#matpack              actions= 2 time=7 usec 
#dataflow             actions=27 time=29 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=29 usec 
#total                actions=26 time=400 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1647:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",45:int);
barrier X_1762 := language.dataflow();
    X_1681 := bat.new(nil:str);
    X_1688 := bat.append(X_1681,"sys.test");
    X_1698 := bat.append(X_1688,"sys.test");
    X_1683 := bat.new(nil:str);
    X_1690 := bat.append(X_1683,"x");
    X_1699 := bat.append(X_1690,"y");
    X_1684 := bat.new(nil:str);
    X_1692 := bat.append(X_1684,"double");
    X_1701 := bat.append(X_1692,"double");
    X_1685 := bat.new(nil:int);
    X_1694 := bat.append(X_1685,53:int);
    X_1702 := bat.append(X_1694,53:int);
    X_1687 := bat.new(nil:int);
    X_1696 := bat.append(X_1687,0:int);
    X_1703 := bat.append(X_1696,0:int);
    X_1650 := sql.mvc();
    X_1767:bat[:dbl] := sql.bind(X_1650,"sys","test3","y",0:int,0:int,2:int);
    X_1732:bat[:dbl] := mosaic.decompress(X_1767);
    X_1768:bat[:dbl] := sql.bind(X_1650,"sys","test3","x",0:int,0:int,2:int);
    X_1730:bat[:dbl] := mosaic.decompress(X_1768);
    C_1727:bat[:oid] := sql.tid(X_1650,"sys","test3",0:int,2:int);
    C_1735 := algebra.select(X_1730,C_1727,4:dbl,6:dbl,true,true,false);
    C_1737 := algebra.select(X_1732,C_1735,0:dbl,2:dbl,true,true,false);
    X_1739 := algebra.projection(C_1737,X_1730);
    X_1769:bat[:dbl] := sql.bind(X_1650,"sys","test3","y",0:int,1:int,2:int);
    X_1733:bat[:dbl] := mosaic.decompress(X_1769);
    X_1770:bat[:dbl] := sql.bind(X_1650,"sys","test3","x",0:int,1:int,2:int);
    X_1731:bat[:dbl] := mosaic.decompress(X_1770);
    C_1729:bat[:oid] := sql.tid(X_1650,"sys","test3",1:int,2:int);
    C_1736 := algebra.select(X_1731,C_1729,4:dbl,6:dbl,true,true,false);
    C_1738 := algebra.select(X_1733,C_1736,0:dbl,2:dbl,true,true,false);
    X_1740 := algebra.projection(C_1738,X_1731);
    X_1751 := mat.packIncrement(X_1739,2:int);
    X_1677 := mat.packIncrement(X_1751,X_1740);
    X_1741 := algebra.projection(C_1737,X_1732);
    X_1742 := algebra.projection(C_1738,X_1733);
    X_1753 := mat.packIncrement(X_1741,2:int);
    X_1678 := mat.packIncrement(X_1753,X_1742);
    language.pass(X_1730);
    language.pass(X_1731);
    language.pass(C_1737);
    language.pass(X_1732);
    language.pass(C_1738);
    language.pass(X_1733);
exit X_1762;
    sql.resultSet(X_1698,X_1699,X_1701,X_1702,X_1703,X_1677,X_1678);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=6 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions=16 time=41 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 4 time=12 usec 
#aliases              actions=19 time=11 usec 
#mitosis              actions= 1 time=26 usec 
#mergetable           actions= 4 time=54 usec 
#deadcode             actions= 5 time=9 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions=12 time=11 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=5 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=29 usec 
#matpack              actions= 2 time=8 usec 
#dataflow             actions=27 time=28 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=28 usec 
#total                actions=26 time=420 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1790:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",53:int);
barrier X_1915 := language.dataflow();
    X_1830 := bat.new(nil:str);
    X_1837 := bat.append(X_1830,"sys.test");
    X_1847 := bat.append(X_1837,"sys.test");
    X_1832 := bat.new(nil:str);
    X_1839 := bat.append(X_1832,"x");
    X_1848 := bat.append(X_1839,"y");
    X_1833 := bat.new(nil:str);
    X_1841 := bat.append(X_1833,"double");
    X_1850 := bat.append(X_1841,"double");
    X_1834 := bat.new(nil:int);
    X_1843 := bat.append(X_1834,53:int);
    X_1851 := bat.append(X_1843,53:int);
    X_1836 := bat.new(nil:int);
    X_1845 := bat.append(X_1836,0:int);
    X_1852 := bat.append(X_1845,0:int);
    X_1793 := sql.mvc();
    X_1920:bat[:dbl] := sql.bind(X_1793,"sys","test3","y",0:int,0:int,2:int);
    X_1885:bat[:dbl] := mosaic.decompress(X_1920);
    X_1921:bat[:dbl] := sql.bind(X_1793,"sys","test3","x",0:int,0:int,2:int);
    X_1883:bat[:dbl] := mosaic.decompress(X_1921);
    C_1880:bat[:oid] := sql.tid(X_1793,"sys","test3",0:int,2:int);
    C_1888 := algebra.select(X_1883,C_1880,4:dbl,6:dbl,true,true,false);
    C_1890 := algebra.select(X_1885,C_1888,0:dbl,2:dbl,true,true,false);
    X_1892 := algebra.projection(C_1890,X_1883);
    X_1922:bat[:dbl] := sql.bind(X_1793,"sys","test3","y",0:int,1:int,2:int);
    X_1886:bat[:dbl] := mosaic.decompress(X_1922);
    X_1923:bat[:dbl] := sql.bind(X_1793,"sys","test3","x",0:int,1:int,2:int);
    X_1884:bat[:dbl] := mosaic.decompress(X_1923);
    C_1882:bat[:oid] := sql.tid(X_1793,"sys","test3",1:int,2:int);
    C_1889 := algebra.select(X_1884,C_1882,4:dbl,6:dbl,true,true,false);
    C_1891 := algebra.select(X_1886,C_1889,0:dbl,2:dbl,true,true,false);
    X_1893 := algebra.projection(C_1891,X_1884);
    X_1904 := mat.packIncrement(X_1892,2:int);
    X_1826 := mat.packIncrement(X_1904,X_1893);
    X_1894 := algebra.projection(C_1890,X_1885);
    X_1895 := algebra.projection(C_1891,X_1886);
    X_1906 := mat.packIncrement(X_1894,2:int);
    X_1827 := mat.packIncrement(X_1906,X_1895);
    language.pass(X_1883);
    language.pass(X_1884);
    language.pass(C_1890);
    language.pass(X_1885);
    language.pass(C_1891);
    language.pass(X_1886);
exit X_1915;
    sql.resultSet(X_1847,X_1848,X_1850,X_1851,X_1852,X_1826,X_1827);
end user.main;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=6 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#evaluate             actions=24 time=48 usec 
#emptybind            actions= 0 time=1 usec 
#pushselect           actions= 4 time=14 usec 
#aliases              actions=27 time=13 usec 
#mitosis              actions= 1 time=25 usec 
#mergetable           actions= 4 time=54 usec 
#deadcode             actions= 5 time=9 usec 
#aliases              actions= 0 time=0 usec 
#constants            actions=13 time=11 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=4 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=29 usec 
#matpack              actions= 2 time=8 usec 
#dataflow             actions=27 time=28 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=28 usec 
#total                actions=26 time=426 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

