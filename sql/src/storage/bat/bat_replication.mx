@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f bat_replication
@a R.A. Goncalves

@h
#ifndef BAT_REPLIC_H
#define BAT_REPLIC_H

#include "sql_types.h"
#include "bat_sequence.h"
#include "bat_logger.h"
#include "bat_store.h"


extern sql_column* create_column(sql_trans *tr, sql_table* t, char* table, char* type, int digits);
extern int create_host_table(sql_trans *tr, sql_schema *s);
extern int create_replication_table(sql_trans *tr, sql_schema *s);
extern int create_replication_columns(sql_trans *tr, sql_schema *s);
extern void table_insert_location(sql_trans* tr,sql_schema* s,char *host, char* ip, int port, char* user,char* passwd);
#endif /*BAT_REPLIC_H */


@c

#include "bat_replication.h"

/*This fiunciton was created to convert a string to a subtype, internal function*/



sql_column*
create_column(sql_trans *tr, sql_table* t, char* table, char* type, int digits)
{
	sql_subtype tpe;
        if (!sql_find_subtype(&tpe, type, digits, 0))
                return NULL;
	return sql_trans_create_column(tr, t, table, &tpe);
}

/*Function to create the table that contais all the information about the hosts*/
int
create_host_table(sql_trans *tr, sql_schema *s){
        sql_table *t;
        t = sql_trans_create_table(tr, s, "hosts", NULL, 1, 0, 0, 1, LOCATION, REPLICATION);
        
	create_column(tr, t, "location", "int",32);
	create_column(tr, t, "dbname", "varchar",1024);
	create_column(tr, t, "ip", "varchar",1024);
	create_column(tr, t, "port", "int",32);
	create_column(tr, t, "user", "varchar",1024);
	create_column(tr, t, "password", "varchar",1024);
        return 0;
}


/*Function to create the table for the replication metadata*/
int
create_replication_table(sql_trans *tr, sql_schema *s){
        sql_table *t;
        t = sql_trans_create_table(tr, s, "replication", NULL, 1, 0, 0, 1, LOCATION, REPLICATION);
        
	create_column(tr, t, "replication_id", "int",32); 	
	create_column(tr, t, "in/out", "int",9); 		/*If the table is used for a remote view(OUT-1) or use a remote table(IN-0)*/
	create_column(tr, t, "push/pull", "int",9); 		/*The kind of refresh*/
        create_column(tr, t, "refresh_time", "int",32);		/*time for cycle refresh, -1 no cycle refresh*/
        create_column(tr, t, "t_rev_plus", "int",32);		/*t revision for +deltas*/
        create_column(tr, t, "t_rev_min", "int",32);		/*t revision for -deltas*/
	return 0;
}

/*Function to create the columns table to contain information about all remote columns for a specific view*/
int
create_replication_columns(sql_trans *tr, sql_schema *s){
        sql_table *t;
        t = sql_trans_create_table(tr, s, "replication_columns", NULL, 1, 0, 0, 1, LOCATION, REPLICATION);
        
	create_column(tr, t, "column_id", "int",32); 	
	create_column(tr, t, "replication_id", "int",32); 	/*To help the refresh operation*/	
	create_column(tr, t, "column_name", "varchar",1024); 	/*Name of the remote column*/
        create_column(tr, t, "table_name", "varchar",1024);	/*Name of the remote table from where the column was selected*/
	return 0;
}


/*Function to help the insertion of new locations*/
void
table_insert_location(sql_trans* tr,sql_schema* s,char *host, char* ip, int port, char* user,char* passwd){
	sql_table* t = find_sql_table(s,"hosts",LOCATION);
	int location;
	if(strcmp(host,GDKgetenv("gdk_dbname"))==0)
		location = 0;
	else
		location = store_next_oid();
	table_insert(tr, t, &location, host , ip, &port, user, passwd);
}


