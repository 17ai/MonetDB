.. _websockets_api:

**************
WebSockets API
**************

Bellow is listed the available request and response messages for the WebSockets API.

Requests
========

The client must always provide a JSON string in a request with a request field indicating the intended action to perform in the server, followed by the other specific fields depending on the request.

.. important:: The :code:`request` field on the JSON request must always be lowercase!

The following sections explain the available :code:`request` fields.

subscribe
---------

Subscribes for new basket creations from a specific stream. Whenever a basket is created, the server sends a notification message indicating the number of inserted tuples in the new basket. The user has to specify the stream's name and schema. To subscribe to a temperature stream, the following would suffice:

.. code-block:: json

    {
        "request": "subscribe",
        "schema": "measures",
        "stream": "temperature"
    }

unsubscribe
-----------

Unsubscribes a previous subscribed stream for a client. The user has to specify the stream's name and schema. The example is the same as above, just changing the request keyword.

.. code-block:: json

    {
        "request": "unsubscribe",
        "schema": "measures",
        "stream": "temperature"
    }

read
----

Reads output result from baskets generated by a stream.

.. important:: The user has not to be subscribed to the stream in order to read data from it!

It's possible to provide an offset, a limit and a basket number where the read should start. The request will always provide a result, even if the query provides no tuples to read. The user has to specify the stream's name and schema. A possible query for the temperatures stream:

.. code-block:: json

    {
        "request": "read",
        "basket": 2,
        "offset": 10,
        "limit": 100
    }

info
----

Retrieves information about a giving stream if a stream's name and schema are provided, or all the existing streams in the system otherwise. To request information of temperature stream:

.. code-block:: json

    {
        "request": "info",
        "schema": "measures",
        "stream": "temperature"
    }

Responses
=========

The response messages, are also provided with JSON. They contain a :code:`response` field, identifying the type of the message.

error
-----

An internal error occurred in the server during a client's request. The :code:`message` contains a string explaining the error. The following error message happens when the user attempts to unsubscribed to a non subscribed stream:

.. code-block:: json

    {
        "response": "error",
        "message": "Stream measures.temperature is not present in the user's subscriptions!"
    }

subscribed
----------

Message confirming the subscription to new baskets notifications of a stream.

.. code-block:: json

    {
        "response": "subscribed",
        "schema": "measures",
        "stream": "temperature"
    }

unsubscribed
------------

Message confirming the removal of a subscription to new baskets notifications of a stream.

.. code-block:: json

    {
        "response": "unsubscribed",
        "schema": "measures",
        "stream": "temperature"
    }

removed
-------

If a stream is removed on MonetDB's engine, but the client is still subscribed, then this message is sent.

.. code-block:: json

    {
        "response": "removed",
        "schema": "measures",
        "stream": "temperature"
    }

notification
------------

Notification of a new basket creation from a subscribed stream. The message contains the basket number and the number of tuples in the new basket. A possible notification example for the above stream:

.. code-block:: json

    {
        "response": "notification",
        "schema": "measures",
        "stream": "temperature",
        "basket": 2,
        "count": 50
    }

read
----

Response message for a read query. Contains the reconstructed tuples listening. The tuples are listened in the say they are inserted in the RESTful Webserver. If a column has a null value, the JSON's :code:`null` value will be listened. A possible query result for the above stream:

.. code-block:: json

    {
        "response": "read",
        "schema": "measures",
        "stream": "temperature",
        "count": 3,
        "tuples": [
            {
                "sensorid": "living room",
                "temperature": 32.6,
                "implicit_timestamp": "2016-06-17T09:23:22+00:00"
            },
            {
                "sensorid": "kitchen",
                "temperature": 34.2,
                "implicit_timestamp": "2016-06-17T09:23:22+00:00"
            },
            {
                "sensorid": "bathroom",
                "temperature": 28.9,
                "implicit_timestamp": "2016-06-17T09:23:22+00:00"
            }
        ]
    }

info
----

Message with details about a stream including both columns and baskets details. Note that the possible types list are restricted to the MonetDB kernel. A possible example for the above stream:

.. code-block:: json

    {
        "response": "info",
        "schema": "measures",
        "stream": "temperature",
        "columns": [
            {
                "name": "sensorid",
                "type": "clob",
                "nullable": false,
                "default": "living room"
            },
            {
                "name": "temperature",
                "type": "real",
                "nullable": false,
                "default": null
            },
            {
                "name": "implicit_timestamp",
                "type": "timestamp with time zone",
                "nullable": false,
                "default": null
            }
        ],
        "baskets_count": 3,
        "baskets_listing": [
            {
                "number": 1,
                "count": 20
            },
            {
                "number": 2,
                "count": 25
            },
            {
                "number": 3,
                "count": 12
            }
        ]
    }

data
----

Returns a info message regarding all the streams in the system. An example with the temperatures stream:

.. code-block:: json

    {
        "response": "data",
        "streams_count": 1,
        "streams_listing": [
            {
                "schema": "measures",
                "stream": "temperature",
                "columns": [
                    {
                        "name": "sensorid",
                        "type": "clob",
                        "nullable": false,
                        "default": "living room"
                    },
                    {
                        "name": "temperature",
                        "type": "real",
                        "nullable": false,
                        "default": null
                    },
                    {
                        "name": "implicit_timestamp",
                        "type": "timestamp with time zone",
                        "nullable": false,
                        "default": null
                    }
                ],
                "baskets_count": 3,
                "baskets_listing": [
                    {
                        "number": 1,
                        "count": 20
                    },
                    {
                        "number": 2,
                        "count": 25
                    },
                    {
                        "number": 3,
                        "count": 12
                    }
                ]
            }
        ]
    }
