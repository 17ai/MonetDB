Usage
=====

The SOAP RPC support is implemented as a module, "pf_soap", in pathfinder.  It
contains a SOAP RPC receiver and a SOAP RPC sender (henceforth just SOAP sender
and SOAP receiver).

- The SOAP receiver can be started in Mserver with the command
  "soap_receiver_start();", after the module "pf_soap" has been loaded.
  The HTTP protocol is used for the communication, so the SOAP receiver
  listens, by default, to port 8080.  The default port number can be
  changed by using "soap_receiver_start(<portnr>)" instead.

- The SOAP sender is automatically called if a RPC call is made in an
  XQuery query.
  
  An XQuery function call is interpretted as an RPC if a special
  namespace identifier is used.  Currently, this special namespace
  identifier is defined as "soap".  All RPC functions need an additional
  leading string parameter, which holds the destination URI in the form
  "<uri>[:port]".

Example 1
---------

Suppose we have the following module definition available via the URI
"http://www.cwi.nl/~zhang/soap/soap.xq":

    ----------------------------------------------------------------------
    | module namespace soap = "http://www.cwi.nl/~zhang/soap/soap.xq";   |
    |                                                                    |
    | declare function soap:add($v1 as xs:decimal, $v2 as xs:decimal*)   |
    |     as xs:decimal*                                                 |
    | {                                                                  |
    |     let $res := $v1                                                |
    |     for $i in $v2                                                  |   
    |         return $res + $i                                           |
    | };                                                                 |
    ----------------------------------------------------------------------

The following XQeury query calls this function through SOAP RPC:

    ----------------------------------------------------------------------
    | import module namespace                                            |
    |     soap = "http://www.cwi.nl/~zhang/soap/soap.xq"                 |
    |     at "http://www.cwi.nl/~zhang/soap/soap.xq";                    |
    |                                                                    |
    | soap:add("a.b.cwi.nl", 40, (20, 40))                               |
    ----------------------------------------------------------------------

Obviously, this query requires that a SOAP receiver is running on port 8080 of
the host "a.b.cwi.nl"


Implementation
==============

Since the special namespace identifier "soap" is used in the above XQeury query,
the call to the function "add" is translated into the following SOAP request
message:

    ----------------------------------------------------------------------
    | <?xml version='1.0' ?>                                             |
    | <env:Envelope xmlnl:env="http://www.w3.org/2003/05/soap-envelope"> |
    |   <env:Header />                                                   |
    |   <env:Body>                                                       |
    |     <SoapRpcRequest                                                |
    |           module="http://www.cwi.nl/~zhang/soap/soap.xq">          |
    |           method="add">                                            |
    |       <iter>                                                       |
    |         <param>                                                    |
    |           <xs:decimal>40</xs:decimal>                              |
    |         </param>                                                   |
    |         <param>                                                    |
    |           <xs:integer>20</xs:integer>                              |
    |           <xs:integer>40</xs:integer>                              |
    |         </param>                                                   |
    |       </iter>                                                      |
    |     </SoapRpcRequest>                                              |
    |   </env:Body>                                                      |
    | </env:Envelope>                                                    |
    ----------------------------------------------------------------------

(NOTE: while writing this documentation, I got the idea of simplify the
structure of the SOAP request message into this form. So the actually structure
of a request message is slightly different, but will soon be adjusted to this
form.)

The tag "iter" is used to separate different iterations, which use will be
explain in section "Loop-lifted RPC".  For now, it is clear that there is only
one iteration in this example.  Within an iteration, the values of a parameter
are separated by the "param" tag.  Since a parameter can be a sequence, every
value is separated by a tag, with the actual type of this value as the name of
the tag.

After having received a SOAP request message, the SOAP receiver retrieves the
following information from the message:
- URI of the module to load
- name of the called method
- number of iterations
- number of arguments
- convert all values from string into the specified type as tag name

Once the SOAP receiver has all these information, it calls a special function
("xquery_method") to load the module and execute the function call.  If no error
occurs, this SOAP response message should be sent back to the caller:

    ----------------------------------------------------------------------
    | <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"> |
    |   <env:Header />                                                   |
    |   <env:Body>                                                       |
    |     <SoapRpcResults                                                |
    |           module="http://www.cwi.nl/~zhang/soap/soap.xq"           |
    |           method="add">                                            |
    |       <iter>                                                       |
    |         <xs:double>60.000000</xs:double>                           |
    |         <xs:double>80.000000</xs:double>                           |
    |       </iter>                                                      |
    |     </SoapRpcResults>                                              |
    |   </env:Body>                                                      |
    | </env:Envelope>                                                    |
    ----------------------------------------------------------------------

But things can go wrong, then a SOAP Fault message will be sent back to the
caller.  For example, if the SOAP receiver can not load the module specified in
our example SOAP RPC call, it will send the following SOAP Fault message:

    ----------------------------------------------------------------------
    | <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"> |
    |   <env:Header />                                                   |
    |   <env:Body>                                                       |
    |     <SoapRpcResults                                                |
    |       module="http://www.cwi.nl/~zhang/soap/soap.xq"               |
    |       method="add">                                                |
    |     <env:Fault>                                                    |
    |       <env:Code>                                                   |
    |         <env:Value>                                                |
    |           env:Sender                                               |
    |         </env:Value>                                               |
    |       </env:Code>                                                  |
    |       <env:Reason>                                                 |
    |         <env:Text xml:lang="en">                                   |
    |           http://www.cwi.nl/~zhang/ssoap/soap.xq:add:              |
    |           xquery_module_load: could not load module.               |
    |         </env:Text>                                                |
    |       </env:Reason>                                                |
    |     </env:Fault>                                                   |
    |   </env:Body>                                                      |
    | </env:Envelope>                                                    |
    ----------------------------------------------------------------------

The structure and the meaning of each tag of a SOAP Fault message are specified
by W3C [reference].  The most important tags are "<env:Code>", which tells who
has cause the problem, the sender or the receiver; and "<env:Reason>", which
contains some human readable text to explain what has gone wrong.


Automatic generation of RPC stub
================================

To call a remote function through SOAP RPC, the called function name should be
prefixed with a special namespace, currently "soap".  If the pathfinder compiler
sees such a function call, it generates a stub implementation, instead of normal
function implementation.  The pathfinder compiler expects that the function is
called with an additional leading string parameter, which holds the destination
URI.  The pathfinder compiler then pass the destination URI, the URI of the
module and the name of the function to the SOAP sender as strings.  The
values of the parameters are first translated into pathfinder's internal
representation, before they are passed to the SOAP sender.

The SOAP sender generates a SOAP RPC request message including the URI of the
module, the function name and the parameter values and sends the message to the
destination URI.  If the RPC call has been carried out successfully, the SOAP
sender retrieves the values from the response message and converts them into the
pathfinder's internal data representation.

In the SOAP RPC implementation of another project, a new node is first
constructed by copying all parameters as its child nodes.  The new node is then
translated into SOAP RPC request message.  With the automatically generated stub
implementation, we avoid this step of element recontruction, which can be very
expensive if a large XML document is given as a parameter.  Thus in our
implementation, we only need to copy the values once, namely, from the
pathfinder' internal data representation to the SOAP request message.  We regard
this copy step as inevitable.


Loop-lifted RPC
===============

Our intention is to use the SOAP RPC implementation for remote XQuery execution
in P2P environment.  In such an environment, it is of great importance to
minimize the number of messages between the sender and the receiver, and the
overhead per message.  

Example 2
---------
Suppose we need to execute RPC calls in a 'for' loop like follwoing:

    ----------------------------------------------------------------------
    | import module namespace                                            |
    |     soap = "http://www.cwi.nl/~zhang/soap/soap.xq"                 |
    |     at "http://www.cwi.nl/~zhang/soap/soap.xq";                    |
    |                                                                    |
    | for $i in (40, 50)                                                 |
    |   return soap:add("a.b.cwi.nl", $i, (20, 40))                      |
    ----------------------------------------------------------------------

A naive implementation of such a 'for' loop would be to send a RPC request to
"a.b.cwi.nl" in each iteration with the correpsonding values.  Obviously, if the
number of iterations is large, communication will take a lot of time; if there
are very few values need to be send, say one integer per iteration, a big
percentage of band-width will be wasted on message overhead.

We can easily improve the naive implementation by marshalling the parameter
values of all iterations into one SOAP RPC request message to send to the
destination.  The destination should then execute all iterations and gather the
results to send them back in one SOAP RPC response message.  This way, we can
reduce the number of message from '2n' ('n' is number of iterations) to 2.  It
is difficult to calculate how much message overhead we can save, but it is clear
that this algorithm uses less band-width than the naive implementation.

We call the second implementation "loop-lifted RPC", since it is inspired by
pathfinder's "loop-lifted staircasejoin" algorithm [reference], in which, a
function in a 'for' loop is not called 'n' times ('n' is the number of
iterations) with each time the values of one iteration, but called only once
with values of all iterations passed to the function in one time.

The "loop-lifted staircasejoin" makes it extremely easy to implememnt the
"loop-lifted RPC" algorithm.  When the stub of 'add' is called, values of all
iterations are already passed to it.  (Values are passed in the order of per
parameter and then per iteration).  All it needs to do is reordering the values
in the order of per iteration and then per parameter and add XML tags where
necessary.  The unmarshalling of the response message is just the other way
around.

The corresponding SOAP RPC request and response messages of Example 2 are as
following:

    ----------------------------------------------------------------------
    | <?xml version='1.0' ?>                                             |
    | <env:Envelope xmlnl:env="http://www.w3.org/2003/05/soap-envelope"> |
    |   <env:Header />                                                   |
    |   <env:Body>                                                       |
    |     <SoapRpcRequest                                                |
    |           module="http://www.cwi.nl/~zhang/soap/soap.xq">          |
    |           method="add">                                            |
    |       <iter>                                                       |
    |         <param>                                                    |
    |           <xs:decimal>40</xs:decimal>                              |
    |         </param>                                                   |
    |         <param>                                                    |
    |           <xs:integer>20</xs:integer>                              |
    |           <xs:integer>40</xs:integer>                              |
    |         </param>                                                   |
    |       </iter>                                                      |
    |       <iter>                                                       |
    |         <param>                                                    |
    |           <xs:decimal>50</xs:decimal>                              |
    |         </param>                                                   |
    |         <param>                                                    |
    |           <xs:integer>20</xs:integer>                              |
    |           <xs:integer>40</xs:integer>                              |
    |         </param>                                                   |
    |       </iter>                                                      |
    |     </SoapRpcRequest>                                              |
    |   </env:Body>                                                      |
    | </env:Envelope>                                                    |
    ----------------------------------------------------------------------

    ----------------------------------------------------------------------
    | <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"> |
    |   <env:Header />                                                   |
    |   <env:Body>                                                       |
    |     <SoapRpcResults                                                |
    |           module="http://www.cwi.nl/~zhang/soap/soap.xq"           |
    |           method="add">                                            |
    |       <iter>                                                       |
    |         <xs:double>60.000000</xs:double>                           |
    |         <xs:double>80.000000</xs:double>                           |
    |       </iter>                                                      |
    |       <iter>                                                       |
    |         <xs:double>70.000000</xs:double>                           |
    |         <xs:double>90.000000</xs:double>                           |
    |       </iter>                                                      |
    |     </SoapRpcResults>                                              |
    |   </env:Body>                                                      |
    | </env:Envelope>                                                    |
    ----------------------------------------------------------------------

References
==========

- other pathfinder papers
- W3C SOAP spec
- The paper which also use SOAP RPC
