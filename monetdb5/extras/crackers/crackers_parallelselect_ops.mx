@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2013 MonetDB B.V.
All Rights Reserved.
@

@f crackers_parallelselect_ops

@c
/*
 * @a Martin Kersten, Stratos Idreos, Stefan Manegold
 * @d March 2006 - July 2007
 * @* ParallelSelect Operators
 *
 *
 * @+ Interface
 *
 *
 * @- Type expansion
 */
@= TypeSwitch
@:@1(int,simple,,int)@
@
@h
/*
 * @- Header file
 */
#ifndef _CRACKERS_PARALLELSELECT_H_
#define _CRACKERS_PARALLELSELECT_H_

/* Exported signatures */
@:TypeSwitch(ParallelSelectFunctions_decl)@

#endif /* _CRACKERS_PARALLELSELECT_H */
/*
 * @- Exported signatures
 */
@= ParallelSelectFunctions_decl
crackers_export str CRKparallelselectBounds_@1(int *vid, int *bid, @1 *low, @1 *hgh, bit *inclusiveLow, bit *inclusiveHgh);
crackers_export str CRKparalleluselectBounds_@1(int *vid, int *bid, @1 *low, @1 *hgh, bit *inclusiveLow, bit *inclusiveHgh);
@
@c
/*
 * @+ Implementation
 *
 *
 * @- C file
 */
#include "monetdb_config.h"
#include "crackers.h"

/*#define CRACK_DEBUG 1*/

/* Local support functions and macros */
@:TypeSwitch(crackOperations)@

/* Exported functions */
@:TypeSwitch(ParallelSelectFunctions_impl)@
/*
 * @- Exported functions
 */
@= ParallelSelectFunctions_impl

str
CRKparallelselectBounds_@1(int *vid, int *bid, @1 *low, @1 *hgh, bit *inclusiveLow, bit *inclusiveHgh){		
	if (@2_EQ(low,ATOMnilptr(TYPE_@1),@3@1))
		return CRKRangeLeftNilTree_@1(vid, bid, hgh, inclusiveHgh, TRUE);
	else if (@2_EQ(hgh,ATOMnilptr(TYPE_@1),@3@1))
		return CRKRangeRightNilTree_@1(vid, bid, low, inclusiveLow, TRUE);
	else
		return CRKRangeTree_@1(vid, bid, low, hgh, inclusiveLow, inclusiveHgh, TRUE);
}

str
CRKparalleluselectBounds_@1(int *vid, int *bid, @1 *low, @1 *hgh, bit *inclusiveLow, bit *inclusiveHgh){
	if (@2_EQ(low,ATOMnilptr(TYPE_@1),@3@1))
		return CRKRangeLeftNilTree_@1(vid, bid, hgh, inclusiveHgh, FALSE);
	else if (@2_EQ(hgh,ATOMnilptr(TYPE_@1),@3@1))
		return CRKRangeRightNilTree_@1(vid, bid, low, inclusiveLow, FALSE);
	else
		return CRKRangeTree_@1(vid, bid, low, hgh, inclusiveLow, inclusiveHgh, FALSE);
}
@
 * @- Local support functions and macros

@= crkThreeTree
        /*printf("crack in three pieces\n");*/
	if (*inclusiveLow == TRUE && *inclusiveHgh == TRUE)
		CRKcrackUnorderedThreeParallel@4_LE_RE_@1(b,*low,*hgh, @2, @3, &vl, &vh);
	if (*inclusiveLow == TRUE && *inclusiveHgh == FALSE)
		CRKcrackUnorderedThreeParallel@4_LE_RO_@1(b,*low,*hgh, @2, @3, &vl, &vh);
	if (*inclusiveLow == FALSE && *inclusiveHgh == TRUE)
		CRKcrackUnorderedThreeParallel@4_LO_RE_@1(b,*low,*hgh, @2, @3, &vl, &vh);
	if (*inclusiveLow == FALSE && *inclusiveHgh == FALSE)
		CRKcrackUnorderedThreeParallel@4_LO_RO_@1(b,*low,*hgh, @2, @3, &vl, &vh);
	
	/*if (vl != -1 && vh != -1){*/
		if (vl>0) _vl=vl-1; else _vl=vl;
		addCrackerIndex_@1(m,low,*inclusiveLow,_vl,c);
		addCrackerIndex_@1(m,hgh,HBound,vh,c);
@
@= crkThreeTreeCopy
        /*printf("crack in three pieces\n");*/
        if (*inclusiveLow == TRUE && *inclusiveHgh == TRUE)
                CRKcrackUnorderedThreeCopyParallel_LE_RE_@1(bo,*low,*hgh, @2, @3, &vl, &vh,b);
        if (*inclusiveLow == TRUE && *inclusiveHgh == FALSE)
                CRKcrackUnorderedThreeCopyParallel_LE_RO_@1(bo,*low,*hgh, @2, @3, &vl, &vh,b);
        if (*inclusiveLow == FALSE && *inclusiveHgh == TRUE)
                CRKcrackUnorderedThreeCopyParallel_LO_RE_@1(bo,*low,*hgh, @2, @3, &vl, &vh,b);
        if (*inclusiveLow == FALSE && *inclusiveHgh == FALSE)
                CRKcrackUnorderedThreeCopyParallel_LO_RO_@1(bo,*low,*hgh, @2, @3, &vl, &vh,b);

	/*if (vl != -1 && vh != -1){*/
		if (vl>0) _vl=vl-1; else _vl=vl;
		addCrackerIndex_@1(m,low,*inclusiveLow,_vl,c);
		addCrackerIndex_@1(m,hgh,HBound,vh,c);
@

@= crkTwoLTree
	/*CRACK in two pieces cl1-ch1 using >incLow bound*/
	if (*inclusiveLow == TRUE)
	{
		CRKscanUnorderedZeroParallel@2_RE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater);
		pl_new=(int *)malloc((ch1-cl1) * sizeof(int));
		pl_new_oid=(oid *)malloc((ch1-cl1) * sizeof(oid));
		CRKreorganizeUnorderedZeroParallel@2_RE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater);
		CRKrestoreUnorderedZeroParallel@2_RE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater, &vl);
	}
	else
	{
		CRKscanUnorderedZeroParallel@2_LE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater);
        	pl_new=(int *)malloc((ch1-cl1) * sizeof(int));
		pl_new_oid=(oid *)malloc((ch1-cl1) * sizeof(oid));
		CRKreorganizeUnorderedZeroParallel@2_LE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater);
		CRKrestoreUnorderedZeroParallel@2_LE_@1(b, pl_new, pl_new_oid, *low, cl1, ch1, nthreads, p_data_less, p_data_greater, &vl);
	}

	if (vl < cl1){
		/*then the left piece is empty*/
		gapL = -1;
	}
	if (vl > ch1){
		/*then the right piece is empty*/
		/*vl--;*/
		gapL = -1;
	}

	vl++; /* We need to take next position because the crack function always returns the last bun of the left piece.
		Instead we want the first bun of the right piece*/
@
@= crkTwoRTree
	/*CRACK in two pieces cl2-ch2 using <incHgh bound*/
	if (*inclusiveHgh == TRUE)
	{
		CRKscanUnorderedZeroParallel@2_LE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater);
		pr_new=(int *)malloc((ch2-cl2) * sizeof(int));
		pr_new_oid=(oid *)malloc((ch2-cl2) * sizeof(oid));
		CRKreorganizeUnorderedZeroParallel@2_LE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater);
       		CRKrestoreUnorderedZeroParallel@2_LE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater, &vh);
	 }
	else
	{
		CRKscanUnorderedZeroParallel@2_RE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater);
		pr_new=(int *)malloc((ch2-cl2) * sizeof(int));
		pr_new_oid=(oid *)malloc((ch2-cl2) * sizeof(oid));
        	CRKreorganizeUnorderedZeroParallel@2_RE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater);
		CRKrestoreUnorderedZeroParallel@2_RE_@1(b, pr_new, pr_new_oid, *hgh, cl2, ch2, nthreads, p_data_less, p_data_greater, &vh);
	}

	/*check for gaps*/
	if (vh < cl2)
		/*then the left piece is empty*/
		gapH = -1;
	if (vh > ch2){
		/*then the right piece is empty*/
		gapH = -1;
		/*vh--;*/
	}
@
@= CreateResult
createView:

	if (!tail)
		view = BATslice(VIEWhead_(b, BAT_READ), vl, vh+1);
	else
		view = BATslice(b, vl, vh+1);
	
	*vid = view->batCacheid;
	BBPkeepref(*vid);

	BBPunfix(b->batCacheid);
	BBPunfix(c->batCacheid);
@
@= RangeParallelSelectBody
	BAT *b,*c,*bo;
	BAT *view;
	int  m;
	oid vl=0, vh=0, posl, posh;
	/* vl and vh are the low and high index values to create the view with the result */
	oid cl1=0, ch1=0, cl2=0, ch2=0;
	/* index values in the case we have to crack
		|cl1...........ch1|.....................|cl2.........ch2|
		if we have to crack only one piece, i.e., if our range falls
		in one piece only then we crack from cl to ch otherwise we use
		the other indices as it is shown */
	oid _vl;
	bit HBound, foundLow=0, foundHgh=0;
	bit LBound=FALSE;
	int *t;
	int gapL = 1;
	int gapH = 1;
	bit rippledDeletions = FALSE;
	struct Node *lowNode=NULL, *hghNode=NULL, *lowNodeNext=NULL, *temp;
	BUN idxFirst;
	bit copy=TRUE;
	int i;

	int *pl_new = NULL;
	oid *pl_new_oid = NULL;
	int *pr_new = NULL;
        oid *pr_new_oid = NULL;
	int *p_data_less = NULL;
	int *p_data_greater = NULL;
	int nthreads=2;


	int pieces=0;
	
	p_data_less=GDKzalloc(nthreads * sizeof(int));
	p_data_greater=GDKzalloc(nthreads * sizeof(int));


	/*FILE *ofp;
	char outputFilename1[] = "/export/scratch2/petraki/experiments_1st_paper/experiments/stochastic/idle_time_2/pieces_cracking.txt";
	ofp = fopen(outputFilename1,"a");
	if (ofp == NULL) {
  		fprintf(stderr, "Can't open output file!\n");
  		exit(1);
	}*/

	
	if (@2_GT(low,hgh,@3@1))
		throw(MAL, "crackers.crack", "illegal range");
	
	if (*inclusiveHgh == TRUE) HBound = FALSE;
	else	HBound = TRUE; 				

	m = existsCrackerIndex(*bid);

	/* if this is the first time we parallelselect something from this bat,
		we have to create the crack index for it and
	   if necessary materialize the head of the bat */
	if (m == -1){
		if (copy){
			if ((bo = BATdescriptor(*bid)) == NULL)
				throw(MAL, "crackers.crackRange", "Cannot access descriptor");
			b = BATcopy(bo, bo->htype, bo->ttype, TRUE);
			if ( bo->htype == TYPE_void)
				b = BATmaterializeh(b);
			b->hsorted = FALSE;
			b->hrevsorted = FALSE;
			b->tsorted = FALSE;
			b->trevsorted = FALSE;
			b->hdense = FALSE;
			b->tdense = FALSE;
			/*BATkey(b,TRUE);*/
			BATkey(BATmirror(b),FALSE);
			b->batRestricted= BAT_READ;
			BATmode(b,PERSISTENT);
			bo->batRestricted= BAT_READ;

			m = newCrackerIndex_@1(*bid,b->batCacheid);

			if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
				throw(MAL, "crackers.crackRange", "Cannot access crack index 1");

			/* Since the index is empty we know we have to crack
			   anyway so crack in three pieces cl-ch */
			posl = BUNfirst(b);
			posh = BUNlast(b)-1;
#ifdef CRACK_DEBUG
			fprintf(stderr,"\nposl= "OIDFMT" posh= "OIDFMT" \n", posl,posh );	
#endif
			/*printf(" "LLFMT" \n ",posh-posl);*/
			@:crkThreeTree@5(@1,posl,posh,@5)@
			pieces = pieces + 3;
			/*fprintf(ofp,"%d\n",pieces);
			fclose(ofp);*/
#ifdef CRACK_DEBUG
			fprintf(stderr,"\ncl1= "OIDFMT" ch1= "OIDFMT" cl2= "OIDFMT" ch2= "OIDFMT" vl= "OIDFMT" vh= "OIDFMT" ", cl1,ch1,cl2,ch2,vl,vh );	
#endif
			
			BBPincref(b->batCacheid,TRUE);
			BBPunfix(bo->batCacheid);
			goto createView;
		}
		else{
			if ((bo = BATdescriptor(*bid)) == NULL)
				throw(MAL, "crackers.crackRange", "Cannot access descriptor");

			b=BATnew(TYPE_oid, bo->ttype,BATcount(bo));
			b->hsorted = FALSE;
			b->hrevsorted = FALSE;
			b->tsorted = FALSE;
			b->trevsorted = FALSE;
			b->hdense = FALSE;
			b->tdense = FALSE;
			BATkey(BATmirror(b),FALSE);
			b->batRestricted= BAT_READ;
			BATmode(b,PERSISTENT);
			BATsetcount(b,BATcount(bo));
			bo->batRestricted= BAT_READ;

			m = newCrackerIndex_@1(*bid,b->batCacheid);

			if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
				throw(MAL, "crackers.crackRange", "Cannot access crack index 2");

			/* Since the index is empty we know we have to crack
			   anyway so crack in three pieces cl-ch */
			posl = BUNfirst(b);
			posh = BUNlast(b)-1;

			/*printf(" "LLFMT" \n ",posh-posl);*/
			@:crkThreeTreeCopy(@1,posl,posh,@5)@
			
			BBPincref(b->batCacheid,TRUE);
			BBPunfix(bo->batCacheid);
		

			goto createView;
		}
	}
	
	/* If an index exists for this bat (so it has been cracked before)
		we search the index to find where our range falls after this
		search if we have a match on the low range vl will hold the
		index value, otherwise it will be -1. The same for hgh and vh
		if there is no match for low then cl will hold the index that
		from there on we have to crack. The same from hgh and ch
		Note that in the case of the low range  we always have to increment
		by one since we want the values that are after this index
		(because of the way the crack index is created).
		Also after the search l and h should point to the low and hgh indices
		(in the crack index) found either as a match or to crack.
		This is used later on to determine which pieces we have to crack */

	/* Check if this bat was previously cracked but the map is not there anymore
		this may happen if we chose to forget the index because of updates, so now we
		have to create a new one and crack in three pieces anyway */
	if (CrackerIndex[m].reCreate == 1){
		reCreateMap_@1(m);
	
		/* Take the index of the bat */
		if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access cracker index");

		/* Take the copy of the bat for which we maintain the index */
		if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access cracker BAT");
	
		posl = BUNfirst(b);
		posh = BUNlast(b)-1;

		@:crkThreeTree@5(@1,posl,posh,@5)@

		goto createView;
	}
	
	/* Take the index of the bat */
	if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 3");

	/* Take the copy of the bat for which we maintain the index */
	if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 4");

	idxFirst = BUNfirst(c);

	/* deal with pending deletions if any */

	if (CrackerIndex[m].mergeDeletions >= 0){
		str msg = parallelselectMergeDeletionsPart_@1(bid, low, inclusiveLow, hgh, inclusiveHgh, &rippledDeletions, m);
		if (msg != NULL)
			throw(MAL, "crackers.crackRange", "%s", msg);
	}
	
	if (CrackerIndex[m].mergeDeletions == 2 && rippledDeletions == FALSE){
		lowNode = findNodeL_@1(*low, *inclusiveLow, CrackerIndex[m].Tree, c, idxFirst, NULL);
                if (lowNode == NULL){
                        lowNodeNext = NULL;
                        temp = CrackerIndex[m].Tree;
                        if (temp->deleted == FALSE)
                                lowNodeNext = temp;
                        while (temp->left != NULL){
                                temp = temp->left;
                                if (temp->deleted == FALSE)
                                        lowNodeNext = temp;
                        }
                } else
                        lowNodeNext = findNextPiece(lowNode);

		shiftHoles_@1(lowNode, lowNodeNext, b, c, idxFirst, hgh, inclusiveHgh, m);	
	}

	/* deal with pending insertions if any */
	if (CrackerIndex[m].mergeInsertions >= 0){
		str msg;
		msg = parallelselectMergeInsertionsPart_@1(bid, low, inclusiveLow, hgh, inclusiveHgh, m);
                if (msg != NULL)
                        throw(MAL, "crackers.crackRange", "%s", msg);
	}

	

	
	/* find out where in the index the low falls */
	
	foundLow = GetLow_@1(*low, *inclusiveLow, CrackerIndex[m].Tree, c, BUNfirst(c), &cl1, &ch1, 0, BUNlast(b)-(oid)1,&LBound);

	/* find out where in the index the high falls */
	foundHgh = GetHgh_@1(*hgh, *inclusiveHgh, CrackerIndex[m].Tree, c, BUNfirst(c), &cl2, &ch2, 0, BUNlast(b)-(oid)1);
	
	/*printAVLTree(CrackerIndex[m].Tree, c, BUNfirst(c));*/
	/*BATprint(BATdescriptor(CrackerIndex[m].cbid));*/ /*Print the cracker column BAT*/
	/*BATprint(BATdescriptor(CrackerIndex[m].cid));  print the cracker index for BAT*/
	t=(int *)Tloc(b,BUNfirst(b));

#ifdef CRACK_DEBUG
	fprintf(stderr,"FoundLow=%d  FoundHgh=%d\n",foundLow,foundHgh);
	fprintf(stderr,"cl1= "OIDFMT" ch1= "OIDFMT" cl2= "OIDFMT" ch2= "OIDFMT" vl= "OIDFMT" vh= "OIDFMT",...t=%d , LBound=%d \n", cl1,ch1,cl2,ch2,vl,vh,*t,LBound );
#endif

	/*need to increase one position for the low bound only since we always store the previous position in the index*/
	if (cl1 != 0 && LBound==FALSE) cl1++;
	if (cl2 != 0) cl2++;

#ifdef CRACK_DEBUG
	fprintf(stderr,"cl1= "OIDFMT" ch1= "OIDFMT" cl2= "OIDFMT" ch2= "OIDFMT" vl= "OIDFMT" vh= "OIDFMT" \n\n", cl1,ch1,cl2,ch2,vl,vh );
#endif

	/* find the hols if any in the pieces to crack so that cracking does not touch deleted buns */
        if (CrackerIndex[m].mergeDeletions == 2){
		oid holsLow = 0, holsHgh = 0;
		/* if not done before while shifting hols find lowNode and lowNodeNext */
		if (rippledDeletions == TRUE){
			lowNode = findNodeL_@1(*low, *inclusiveLow, CrackerIndex[m].Tree, c, idxFirst, NULL);
       	         	if (lowNode == NULL){
                        	lowNodeNext = NULL;
                   		temp = CrackerIndex[m].Tree;
                        	if (temp->deleted == FALSE)
                                	lowNodeNext = temp;
                        	while (temp->left != NULL){
                                	temp = temp->left;
                                	if (temp->deleted == FALSE)
                                	        lowNodeNext = temp;
                        	}
                	} else
                        	lowNodeNext = findNextPiece(lowNode);
		}

		hghNode = findNodeH_@1(*hgh, *inclusiveHgh, CrackerIndex[m].Tree, c, idxFirst, NULL);
		if (lowNodeNext != NULL)
			holsLow = lowNodeNext->hols;

		if (hghNode != NULL)
			holsHgh = hghNode->hols;

		/* so if there are hols the positions where we crack are appropriately decreased */
		ch1 -= holsLow;
		ch2 -= holsHgh;
	}

	/* If one or both of the result view bounds were not found using the
	index then we have to crack */
	if (foundLow == 0 || foundHgh == 0) {
		if (foundLow == 0 && foundHgh == 0) {
                        /* We have to do two cracks separatelly */

                        /* For the cl bound and the next one in the index*/
                        @:crkTwoLTree@5(@1,@5)@
                        t = (int *) Tloc(b, BUNfirst(b));

			foundHgh = GetHgh_@1(*hgh, *inclusiveHgh, CrackerIndex[m].Tree, c, BUNfirst(c), &cl2, &ch2, 0, BUNlast(b)-(oid)1);
                        if (cl2 != 0) cl2++;
                        for(i=0;i<nthreads;i++)
                        {
	                        p_data_less[i]=0;
        		        p_data_greater[i]=0;
                        }


                        /* For the ch bound and the previous one in the index*/
                        @:crkTwoRTree@5(@1,@5)@

                        if (IndexSize < IndexStop) {
                                if (vl > 0)
                                        _vl = vl - 1;
                                else
                                        _vl = vl;
                                if (gapL>0)
                                {
                                        addCrackerIndex_@1(m, low, *inclusiveLow, _vl, c);
                                        pieces = pieces + 1;
                                }
                                if (gapH>0)
                                {
                                        addCrackerIndex_@1(m, hgh, HBound, vh, c);
                                        pieces = pieces + 1;
                                }
                                if ((vl == 1) && (*t == *low) && (*inclusiveLow == TRUE))
                                        vl = vl - 1;
                        }

		}else if (foundLow == 0) {
			@:crkTwoLTree@5(@1,@5)@
			t = (int *) Tloc(b, BUNfirst(b));
			if (IndexSize < IndexStop) {
				if (vl > 0)
					_vl = vl - 1;
				else
					_vl = vl;
				if (gapL>0)
				{
					addCrackerIndex_@1(m, low, *inclusiveLow, _vl, c);
					pieces = pieces + 1;
				}
				if ((vl == 1) && (*t == *low) && (*inclusiveLow == TRUE))
					vl = vl - 1;
			}
			vh = ch2;
		} else if (foundHgh == 0) {
			if(foundLow==0)
			{
				foundHgh = GetHgh_@1(*hgh, *inclusiveHgh, CrackerIndex[m].Tree, c, BUNfirst(c), &cl2, &ch2, 0, BUNlast(b)-(oid)1);
				if (cl2 != 0) cl2++;
				for(i=0;i<nthreads;i++)
				{
					p_data_less[i]=0;
					p_data_greater[i]=0;
				}
			}
			@:crkTwoRTree@5(@1,@5)@
			t = (int *) Tloc(b, BUNfirst(b));
			if (IndexSize < IndexStop)
				if (gapH>0)
				{
					addCrackerIndex_@1(m, hgh, HBound, vh, c);
					pieces = pieces + 1;
				}
			vl = cl1;
			if ((vl == 0) && (*t < *low) && (*inclusiveLow == TRUE))
				vl = vl + 1;
		}
	} else {
		t = (int *) Tloc(b, BUNfirst(b));
		vl = cl1;
		if ((vl == 0) && (*t < *low) && (*inclusiveLow == TRUE))
			vl = vl + 1;
		vh = ch2;
	}

	/*fprintf(ofp,"%d\n",pieces);
	fclose(ofp);*/

	@:CreateResult()@
	return MAL_SUCCEED;
@
@= crackOperations

static oid
shiftHoles_@1(struct Node *lowNode, struct Node *lowNodeNext, BAT *b, BAT *c, BUN idxFirst, @1 *hgh, bit *inclusiveHgh, int position){
	oid holSize = 0, LposCr = 0, HposCr = 0, holPiece = 0, buns;
	oid *fh;
	@1 *ft;
	oid *hghPos = NULL;
	struct Node *hghNode, *stopNode;

	fh = (oid*)Hloc(b, BUNfirst(b));
	ft = (@1 *)Tloc(b, BUNfirst(b));
	stopNode = findNodeH_@1(*hgh, *inclusiveHgh, CrackerIndex[position].Tree, c, idxFirst, NULL);

	while (1){
		if (lowNode == NULL)
			hghNode = lowNodeNext;
		 else
			hghNode = findNextPiece(lowNode);
		
		/* find deletes that belong in this piece */
		if (lowNode != NULL && hghNode != NULL){
       	 	        hghPos = (oid*)Hloc(c, idxFirst + hghNode->position);
      		        LposCr = *(oid*)Hloc(c, idxFirst + lowNode->position) + holSize;
        	        HposCr = *hghPos;
		} else
		if (lowNode == NULL && hghNode != NULL){
       	 	        hghPos = (oid*)Hloc(c, idxFirst + hghNode->position);
			LposCr = 0;
       	 	        HposCr = *hghPos;
		} else
		if (lowNode != NULL && hghNode == NULL){
			LposCr = *(oid*)Hloc(c, idxFirst + lowNode->position) + holSize;
       	                HposCr = BATcount(b)-1;
		}

		if (hghNode != NULL)
			holPiece = hghNode->hols;
		else
			holPiece = 0;

		HposCr -= holPiece;
		buns = HposCr - LposCr;
		/* no need to to shift if nothing has been deleted from previous pieces */
		if (holSize > 0 && buns > 0){
			if (holSize >= buns){
				memcpy(fh+(LposCr-(holSize-1)), fh+(LposCr+1), buns*sizeof(oid));
				memcpy(ft+(LposCr-(holSize-1)), ft+(LposCr+1), buns*sizeof(@1 ));
			}
			else{
				memcpy(fh+(LposCr-(holSize-1)), fh+(LposCr+1+(buns-holSize)), holSize*sizeof(oid));
				memcpy(ft+(LposCr-(holSize-1)), ft+(LposCr+1+(buns-holSize)), holSize*sizeof(@1 ));
			}
		}
		holSize += holPiece;
		if (hghNode != NULL){
			if (hghNode == stopNode)
				break;
			hghNode->hols = 0;
			lowNode = hghNode;
			*hghPos = *hghPos - holSize;
		} else
			break;
	}

	if (holSize > 0){
		if (hghNode == NULL){
			/*BUN crkLast = BUNlast(b) - holSize;
			b->batBuns->free = crkLast - b->batBuns->base;*/
	       		BATsetcount(b, BUNlast(b)-holSize);
		} else
	                hghNode->hols = holSize;
	}

	return holSize;
}


static str
parallelselectMergeDeletionsPart_@1(int *bid, @1 *low, bit *inclusiveLow, @1 *hgh, bit *inclusiveHgh, bit *rippledDeletions, int position){
	BAT *u;
	oid updates, updatesStart, updatesEnd;
	BUN l;
	@1 *lt, *updLast, *t0 ;

	if (CrackerIndex[position].did == -1) return NULL;
	if ((u = BATdescriptor(CrackerIndex[position].did)) == NULL)
		return "Cannot access the deletions BAT";			

	if (CrackerIndex[position].mergeInsertions > 0){
                        BAT *insertions, *intersect;
                        if (CrackerIndex[position].iid < 0) goto findDeletes; 
                        if ((insertions = BATdescriptor(CrackerIndex[position].iid)) == NULL)
                                goto findDeletes;
                        if (BATcount(insertions)==0) {
                                BBPunfix(insertions->batCacheid);
                                goto findDeletes;
                        }

                        intersect = BATsintersect(insertions,u);

                        if (BATcount(intersect)>0){
                                insertions = BATdel(insertions,intersect,TRUE);
                                u = BATdel(u,intersect,TRUE);
                        }

                        BBPunfix(intersect->batCacheid);
                        BBPunfix(insertions->batCacheid);
        }

	findDeletes:;
	
	updates = BATcount(u);
	if (updates == 0){
		BBPunfix(u->batCacheid);
                return NULL; /* no qualifying values in the deletions */
        }

	/* if necessary, sort in place the deletions bat */
	if (u->tsorted == FALSE){
		u->batRestricted = BAT_WRITE;
		BATmirror(BATorder(BATmirror(u)));
	}

	/* binary search to find the position of the lowest requested value in the deletions*/
	l  = SORTfndfirst(u,low);
	lt = (@1*)Tloc(u,l);
	t0 = (@1*)Tloc(u,BUNfirst(u));
	updLast = (@1*)Tloc(u, BUNlast(u));

        /* no qualifying values in the deletions */
	if (lt == updLast){
		BBPunfix(u->batCacheid);	
		return NULL; 
	}

	if (@2_EQ(lt,low,@3@1) && *inclusiveLow == FALSE){
		while (lt < updLast && @2_EQ(lt,low,@3@1))
			lt ++;
	} 
			
	if (lt == updLast){
		BBPunfix(u->batCacheid);	
		return NULL; /* no qualifying values in the deletions */
	}

	if ( @2_GT(lt,hgh,@3@1) || (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh==FALSE) ){
		BBPunfix(u->batCacheid);	
		return NULL; /* no qualifying values in the deletions */ 	
	}

	updatesStart = (oid) (lt-t0);	
	
	/* binary search to find the position of the highest requested value in the deletions */
        l = SORTfndfirst(u, hgh);
	lt = (@1*)Tloc(u,l);
	if (lt < updLast){
		if (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh == TRUE){	
			while (lt < updLast && @2_EQ(lt,hgh,@3@1))
                         	lt ++;
			lt--;
		} else
		if (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh == FALSE)
                        lt --;
		else
		if ( @2_GT(lt,hgh,@3@1) )
                        lt --;
	}

	if (lt == updLast) lt--;
	updatesEnd = (oid) (lt-t0);

	BBPunfix(u->batCacheid);
		
	if (CrackerIndex[position].mergeDeletions == 0){	
		/* merge completely */
		mergeDeletions_@1_oid(bid, &CrackerIndex[position].did, 0, updates-1);
		CrackerIndex[position].mergeDeletions = -1 ;
		CrackerIndex[position].did = -1;

	} else if (CrackerIndex[position].mergeDeletions == 1)
		/* merge only the requested values */			
		mergeDeletionsGradually_@1_oid(bid, &CrackerIndex[position].did, updatesStart, updatesEnd);
			
	else if (CrackerIndex[position].mergeDeletions == 2){
		/* merge only the requested values using the ripple strategy */
		mergeDeletionsGraduallyRipple_@1_oid(bid, &CrackerIndex[position].did, updatesStart, updatesEnd, low, *inclusiveLow, hgh, *inclusiveHgh);	
		*rippledDeletions = TRUE;
	}

	return NULL;
}


static str
parallelselectMergeInsertionsPart_@1(int *bid, @1 *low, bit *inclusiveLow, @1 *hgh, bit *inclusiveHgh, int position){
	BAT *u,*b;
	oid updates, updatesStart, updatesEnd;
	BUN l;
	@1 *lt, *updLast, *t0;

	if (CrackerIndex[position].iid == -1) return NULL;
	if ((u = BATdescriptor(CrackerIndex[position].iid)) == NULL)
		return "Cannot access insertions BAT";			

	updates = BATcount(u);
	if (updates == 0){
        	BBPunfix(u->batCacheid);
                return NULL; /* no qualifying values in the insertions */
        }

	/* if necessary, sort in place the insertions bat */
	if (u->tsorted == FALSE){
		u->batRestricted = BAT_WRITE;
		BATmirror(BATorder(BATmirror(u)));
	}

	/* binary search to find the position of the lowest requested value in the insertions */
	l = SORTfndfirst(u,low);
	lt = (@1*)Tloc(u,l);
	t0 = (@1*)Tloc(u, BUNfirst(u));
	updLast = (@1*)Tloc(u, BUNlast(u));
	if (lt == updLast){
		BBPunfix(u->batCacheid);	
		return NULL; /* no qualifying values in the insertions */
	}
	if (@2_EQ(lt,low,@3@1) && *inclusiveLow == FALSE){
		while (lt < updLast && @2_EQ(lt,low,@3@1))
			lt ++;
	} 			
	if (lt == updLast){
		BBPunfix(u->batCacheid);	
		return NULL; /* no qualifying values in the insertions */
	}
	if ( @2_GT(lt,hgh,@3@1) || (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh==FALSE) ){
		BBPunfix(u->batCacheid);	
		return NULL; /* no qualifying values in the insertions */ 	
	}
	updatesStart = (oid) (lt-t0);	
	
	/* binary search to find the position of the highest requested value in the insertions */
        l  = SORTfndfirst(u, hgh);
	lt = (@1*)Tloc(u,l);
	if (lt < updLast){
		if (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh == TRUE){	
			while (lt < updLast && @2_EQ(lt,hgh,@3@1))
                            	lt ++;
			lt--;
		} else
		if (@2_EQ(lt,hgh,@3@1) && *inclusiveHgh == FALSE)
                        lt --;
		else
		if ( @2_GT(lt,hgh,@3@1) )
                        lt --;
	}

	if (lt == updLast) lt--;
	updatesEnd = (oid) (lt-t0);	
	if (CrackerIndex[position].mergeInsertions == 0){	
		/* merge completely */
		BBPunfix(u->batCacheid);

		mergeInsertionsB_@1_oid(bid, &CrackerIndex[position].iid, 0, updates-1);
		CrackerIndex[position].mergeInsertions = -1 ;
		CrackerIndex[position].iid = -1;

	} else if (CrackerIndex[position].mergeInsertions == 1){
		/* merge only the requested values */			
		BBPunfix(u->batCacheid);
		mergeInsertionsBGradually_@1_oid(bid, &CrackerIndex[position].iid, updatesStart, updatesEnd);
	}
	 else if (CrackerIndex[position].mergeInsertions == 2){
		/* merge only the requested values using the ripple strategy */
		if ((b = BATdescriptor(CrackerIndex[position].cbid)) == NULL)
                        throw(MAL, "crackers.crackRange", "Cannot access crack index 5");
		mergeInsertionsBRipple_@1_oid(b, u, updatesStart, updatesEnd, hgh, *inclusiveHgh, position);	
		BBPunfix(u->batCacheid);
		BBPunfix(b->batCacheid);
	}	
	return NULL;
}

/* This function takes a range and returns a view with the result. 
To do that, we first search the index to determine which parts of the result we already
know and which parts we have to crack. Then we crack, if necessary,
the appropriate pieces, update the index and return the result */
static str
CRKRangeTree_@1(int *vid, int *bid, @1 *low, @1 *hgh, bit *inclusiveLow, bit *inclusiveHgh, bit tail){	
	@:RangeParallelSelectBody(@1,@2,@3,@4,)@
}

static str
CRKRangeLeftNilTree_@1(int *vid, int *bid, @1 *hgh, bit *inclusiveHgh, bit tail){
	BAT *b,*c,*bo;
	BAT *view;
	int  m;
	oid vl=0, vh=0;
	oid cl2=0, ch2=0;
	bit HBound,foundHgh=0;
	int gapH = 1;

	int *pr_new = NULL;
        oid *pr_new_oid = NULL;
        int *p_data_less = NULL;
        int *p_data_greater = NULL;
        int nthreads=2;

        p_data_less=(int *)malloc(nthreads * sizeof(int));
        p_data_greater=(int *)malloc(nthreads * sizeof(int));
	
	
	if (*inclusiveHgh == TRUE) HBound = FALSE;
	else	HBound = TRUE; 				

	m = existsCrackerIndex(*bid);

	/* if this is the first time we parallelselect something from this bat,
		we have to create the crack indx for it and
	   if necessary materialize the head of the bat */
	if (m == -1){
		if ((bo = BATdescriptor(*bid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access descriptor");
		b = BATcopy(bo, bo->htype, bo->ttype, TRUE);
		if ( bo->htype == TYPE_void)
			b = BATmaterializeh(b);
		b->hsorted = FALSE;
		b->hrevsorted = FALSE;
		b->tsorted = FALSE;
		b->trevsorted = FALSE;
		b->hdense = FALSE;
		b->tdense = FALSE;
		b->batRestricted= BAT_READ;
		BATmode(b,PERSISTENT);
		bo->batRestricted= BAT_READ;

		m = newCrackerIndex_@1(*bid,b->batCacheid);

		if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 6");

		cl2 = BUNfirst(b);
		ch2 = BUNlast(b)-(oid)1;
		@:crkTwoRTree(@1)@
		if (gapH>0) addCrackerIndex_@1(m,hgh,HBound,vh,c);
		vl = BUNfirst(b);
		
		BBPincref(b->batCacheid,TRUE);
		BBPunfix(bo->batCacheid);
		goto createView;
	}
	
	if (CrackerIndex[m].cid == -1){
		reCreateMap_@1(m);
	
		/* Take the index of the bat */
		if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 7");

		/* Take the copy of the bat for which we maintain the index */
		if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 8");
	
		cl2 = BUNfirst(b);
		ch2 = BUNlast(b)-(oid)1;
		@:crkTwoRTree(@1)@
		if (gapH>0) addCrackerIndex_@1(m,hgh,HBound,vh,c);
		vl = BUNfirst(b);

		goto createView;
	}

	/* Take the index of the bat */
	if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 9");

	/* Take the copy of the bat for which we maintain the index */
	if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 10");

	vl = BUNfirst(b); 

	/* find out where in the index the high falls */
	foundHgh = GetHgh_@1(*hgh, HBound, CrackerIndex[m].Tree, c, BUNfirst(c), &cl2, &ch2, 0, BUNlast(b)-(oid)1);

	/*need to increase one position for the low bound only since we always store the previous position in the index*/
	if (cl2 != 0) cl2++;

	if (foundHgh == 0){
		@:crkTwoRTree(@1)@
		if (IndexSize <IndexStop)
			 if (gapH>0) addCrackerIndex_@1(m,hgh,HBound,vh,c);
	} 	
	else
		vh = ch2;
		
	@:CreateResult()@
	return MAL_SUCCEED;
}

static str
CRKRangeRightNilTree_@1(int *vid, int *bid, @1 *low, bit *inclusiveLow, bit tail){
	BAT *b,*c,*bo;
	BAT *view;
	int  m;
	oid vl=0, vh=0;
	oid cl1=0, ch1=0;
	bit foundLow=0;
	int gapL = 1;
	bit LBound=FALSE;

	int *pl_new = NULL;
	oid *pl_new_oid = NULL;
        int *p_data_less = NULL;
        int *p_data_greater = NULL;
        int nthreads=2;

        p_data_less=(int *)malloc(nthreads * sizeof(int));
        p_data_greater=(int *)malloc(nthreads * sizeof(int));


	m = existsCrackerIndex(*bid);

	/* if this is the first time we parallelselect something from this bat,
		we have to create the crack indx for it and
	   if necessary materialize the head of the bat */
	if (m == -1){
		if ((bo = BATdescriptor(*bid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access descriptor");
		b = BATcopy(bo, bo->htype, bo->ttype, TRUE);
		if ( bo->htype == TYPE_void)
			b = BATmaterializeh(b);
		b->hsorted = FALSE;
		b->hrevsorted = FALSE;
		b->tsorted = FALSE;
		b->trevsorted = FALSE;
		b->hdense = FALSE;
		b->tdense = FALSE;
		b->batRestricted= BAT_READ;
		BATmode(b,PERSISTENT);
		bo->batRestricted= BAT_READ;

		m = newCrackerIndex_@1(*bid,b->batCacheid);

		if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 11");

		cl1 = BUNfirst(b);
		ch1 = BUNlast(b)-(oid)1;
		@:crkTwoLTree(@1)@
		if (gapL>0)  addCrackerIndex_@1(m,low,*inclusiveLow,vl,c);
		vh = BUNlast(b)-(oid)1;
		
		BBPincref(b->batCacheid,TRUE);
		BBPunfix(bo->batCacheid);
		goto createView;
	}
	
	if (CrackerIndex[m].cid == -1){
		reCreateMap_@1(m);
	
		/* Take the index of the bat */
		if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 12");

		/* Take the copy of the bat for which we maintain the index */
		if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
			throw(MAL, "crackers.crackRange", "Cannot access crack index 13");
	
		cl1 = BUNfirst(b);
		ch1 = BUNlast(b)-(oid)1;
		@:crkTwoLTree(@1)@
		if (gapL>0) addCrackerIndex_@1(m,low,*inclusiveLow,vl,c);
		vh = BUNlast(b)-(oid)1;

		goto createView;
	}


	/* Take the index of the bat */
	if ((c = BATdescriptor(CrackerIndex[m].cid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 14");

	/* Take the copy of the bat for which we maintain the index */
	if ((b = BATdescriptor(CrackerIndex[m].cbid)) == NULL)
		throw(MAL, "crackers.crackRange", "Cannot access crack index 15");

	vh = BUNlast(b)-(oid)1;


	/* find out where in the index the low falls */
	foundLow = GetLow_@1(*low,*inclusiveLow, CrackerIndex[m].Tree, c, BUNfirst(c), &cl1, &ch1, 0, BUNlast(b)-(oid)1,&LBound);

	/*need to increase one position for the low bound only since we always store the previous position in the index*/
	if (cl1 != 0) cl1++;

	if (foundLow == 0){
		@:crkTwoLTree(@1)@
		if (IndexSize <IndexStop)
			if (gapL>0) addCrackerIndex_@1(m,low,*inclusiveLow,vl,c);
	} 	
	else
		vl = cl1;
		
	@:CreateResult()@
	return MAL_SUCCEED;
}
@
