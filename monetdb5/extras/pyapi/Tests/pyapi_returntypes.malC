#########################
#########################
## --CORRECT RETURNS-- ##
#########################
#########################

####################
# --SINGLE VALUE-- #
####################
# return a single integer value
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return(33)");
io.print(r);

# return a single float value
r:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return(12.31)");
io.print(r);

# return a single string value
r:bat[:oid,:str] := pyapi.eval(nil:ptr,"return(\"test\")");
io.print(r);

#####################
# --PYTHON ARRAYS-- #
#####################
# return an array with a single value
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return([33])");
io.print(r);

# return an array containing a single array
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return([[33]])");
io.print(r);

# return an array containing two arrays
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return([[33], [42]])");
io.print(r, s);

# return an array containing three arrays
(r:bat[:oid,:int], s:bat[:oid,:int], t:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return([[33], [42], [66]])");
io.print(r, s, t);

# return an array containing two arrays containing strings
(r:bat[:oid,:str], s:bat[:oid,:str]) := pyapi.eval(nil:ptr,"return([[\"Hello\", \"Hello Again\"], [\"Hello Again Again\",\"That's quite enough.\"]])");
io.print(r,s);

####################
# --NUMPY ARRAYS-- #
####################
# return a single numpy array
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return(numpy.array([33,11,332,51,88]))");
io.print(r);

# return an array containing two numpy arrays
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return([numpy.array([33]), numpy.array([44])])");
io.print(r, s);

# return a numpy array containing two arrays of unequal size
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.array([[33,24,55], [44,66, 345, 77, 66]]))");
io.print(s);

# return a numpy array containing two numpy arrays of unequal size
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.array([numpy.array([33]), numpy.array([44, 45, 77])]))");
io.print(s);

# return a multi-dimensional numpy array containing integers
#(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.array([[33, 24, 55], [44, 66,345]]))");
#io.print(r,s);

# return a multi-dimensional numpy array containing doubles 
(r:bat[:oid,:dbl], s:bat[:oid,:dbl]) := pyapi.eval(nil:ptr,"return(numpy.array([[27.42, 18.62, 33.81], [12.55, 41.44, 20.88]]))");
io.print(r,s);

# return a multi-dimensional numpy array containing strings
(r:bat[:oid,:str], s:bat[:oid,:str]) := pyapi.eval(nil:ptr,"return(numpy.array([[\"Hëllo\", \"Hello Again\"], [\"Hello Again Again\",\"That's quite enough.\"]]))");
io.print(r,s);

# return a multi-dimensional numpy array containing unicode strings
bstr:= bat.new(:oid,:str);
bat.append(bstr,"Hannes Mühleisen":str);
bat.append(bstr,"héllo":str);
bat.append(bstr,"éáú üüäãö":str);
bat.append(bstr,"幺巾乡阜阝测试一些中国符号":str);
bat.append(bstr,"いくつかの日本のシンボルをテストします":str);
(r:bat[:oid,:str], s:bat[:oid,:str]) := pyapi.eval(nil:ptr,"return(numpy.array([arg1, arg1]))",bstr);
io.print(r,s);

# return a multi-dimensional numpy array containing integers, but store them in a string BAT
(r:bat[:oid,:str], s:bat[:oid,:str]) := pyapi.eval(nil:ptr,"return(numpy.array([[33, 24, 55], [44, 66,345]]))");
io.print(r,s);

#####################
# --MASKED ARRAYS-- #
#####################
# return a single masked array
r:bat[:oid,:int] := pyapi.eval(nil:ptr, "return(numpy.ma.masked_array([862,43,24],[1,1,0]))");
io.print(r);

# return a single masked array in an array
r:bat[:oid,:int] := pyapi.eval(nil:ptr, "return([numpy.ma.masked_array([862,43,24],[1,1,0])])");
io.print(r);

# return a single masked array in a numpy array (this is kind of weird, it removes the entire masked array so it's a single numpy array)
r:bat[:oid,:int] := pyapi.eval(nil:ptr, "return(numpy.array([numpy.ma.masked_array([862,43,24],[1,1,0])]))");
io.print(r);

# return a single masked array containing strings
r:bat[:oid,:str] := pyapi.eval(nil:ptr, "return(numpy.ma.masked_array([\"Test\",\"Four\",24],[0,0,1]))");
io.print(r);

# return a multi-dimensional masked array with even dimensions
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.ma.masked_array([[1, 2, 3], [1,2,3]], [[0,0,0], [1,0,0]]))");
io.print(r,s);

# return a multi-dimensional masked array with uneven dimensions 
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.ma.masked_array([[1, 2, 3], [1,2,3,4]], 0))");
io.print(r,s);

# return a masked array, holding multiple masked arrays of uneven length (if they had even length, the test would be identical to the one above because numpy would automatically convert the object to one big masked array)
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.ma.masked_array([numpy.ma.masked_array([17,2,28], [0,1,0]), numpy.ma.masked_array([1,2,3,4], [1,0,0,0])], 0))");
io.print(r,s);

##############
# --PANDAS-- #
##############
g:= bat.new(:oid,:int);
bat.append(g,1);
bat.append(g,2);
bat.append(g,3);
bat.append(g,1);
bat.append(g,2);
bat.append(g,3);
bat.append(g,1);
bat.append(g,2);
bat.append(g,3);
bat.append(g,1);

b:= bat.new(:oid,:int);
bat.append(b,4:int);
bat.append(b,24:int);
bat.append(b,363:int);
bat.append(b,63:int);
bat.append(b,838:int);
bat.append(b,454:int);
bat.append(b,22:int);
bat.append(b,663:int);
bat.append(b,123:int);
bat.append(b,442:int);

# return a pandas dataframe
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"import pandas as pd\ndf = pd.DataFrame({\'Group\': arg1, \'Values\': arg2})\nreturn(df)", g, b);
io.print(r,s);

#######################
#######################
## --WRONG RETURNS-- ##
#######################
#######################

# return a string when an int is expected
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return(\"Test\")");

# return an unsupported object
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"class NewClass:\n\tx = 5\n\n\treturn(NewClass())");

# return a scalar when multiple returns are expected
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(12)");

# return a pandas dataframe with the incorrect format
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"import pandas as pd\ndf = pd.DataFrame({\'Group\': arg1, \'Values\': arg2, 'Values2': arg2})\nreturn(df)", g, b);

# return a single numpy array when two are expected
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return(numpy.array([12]))");

# return a single array when two are expected
(r:bat[:oid,:int], s:bat[:oid,:int]) := pyapi.eval(nil:ptr,"return([12])");

# return two arrays when a single array is expected
r:bat[:oid,:int] := pyapi.eval(nil:ptr,"return([[33,24,55], [44,66,345]])");

# return a single UTF-32 encoded string
a:bat[:oid,:str] := pyapi.eval(nil:ptr,"x = unicode(\"hello\")\nreturn(x.encode(\"utf32\"))");

# return a UTF-32 encoded string in a numpy array
(str1:bat[:oid,:str], str2:bat[:oid,:str]) := pyapi.eval(nil:ptr,"x = unicode(\"hello\")\nreturn(numpy.array([[x.encode(\"utf32\")], [x.encode(\"utf32\")]]))");

