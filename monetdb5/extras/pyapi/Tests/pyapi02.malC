# input types testing

# inty types

#bbit:= bat.new(:oid,:bit);
#bat.append(bbit,1:bit);
#bat.append(bbit,0:bit);
#bat.append(bbit,1:bit);
#bat.append(bbit,0:bit);
#bat.append(bbit,nil:bit);
#rbit:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bbit);
#io.print(rbit);

bbte:= bat.new(:oid,:bte);
bat.append(bbte,42:bte);
bat.append(bbte,84:bte);
bat.append(bbte,111:bte);
bat.append(bbte,0:bte);
bat.append(bbte,nil:bte);
io.print(bbte);
rbte:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return numpy.add(arg1, 99)",bbte);
io.print(rbte);

bsht:= bat.new(:oid,:sht);
bat.append(bsht,42:sht);
bat.append(bsht,82:sht);
bat.append(bsht,0:sht);
bat.append(bsht,240:sht);
bat.append(bsht,nil:sht);
rsht:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bsht);
io.print(rsht);

bint:= bat.new(:oid,:int);
bat.append(bint,1804289383:int);
bat.append(bint,846930886:int);
bat.append(bint,1681692777:int);
bat.append(bint,1714636915:int);
bat.append(bint,nil:int);
rint:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bint);
io.print(rint);

bwrd:= bat.new(:oid,:wrd);
bat.append(bwrd,1804289383:wrd);
bat.append(bwrd,846930886:wrd);
bat.append(bwrd,1681692777:wrd);
bat.append(bwrd,1714636915:wrd);
bat.append(bwrd,nil:wrd);
rwrd:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bwrd);
io.print(rwrd);

blng:= bat.new(:oid,:lng);
bat.append(blng,1804289383L);
bat.append(blng,846930886L);
bat.append(blng,1681692777L);
bat.append(blng,1714636915L);
rlng:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",blng);
io.print(rlng);

# not sure what to with hge, numpy only supports 128 bits when sizeof(long)=16
# bhge:= bat.new(:oid,:hge);
# bat.append(bhge,1804289383:hge);
# bat.append(bhge,846930886:hge);
# bat.append(bhge,1681692777:hge);
# bat.append(bhge,1714636915:hge);
# rhge:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1,1)])",bhge);
# io.print(rhge);

# floating point

bflt:= bat.new(:oid,:flt);
bat.append(bflt,18042.89383:flt);
bat.append(bflt,846.930886:flt);
bat.append(bflt,16.81692777:flt);
bat.append(bflt,1714636.915:flt);
bat.append(bflt,nil:flt);
rflt:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bflt);
io.print(rflt);

bdbl:= bat.new(:oid,:dbl);
bat.append(bdbl,180428.9383:dbl);
bat.append(bdbl,84.6930886:dbl);
bat.append(bdbl,168169.2777:dbl);
bat.append(bdbl,17146369.15:dbl);
bat.append(bdbl,nil:dbl);
rdbl:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"return([numpy.add(arg1.filled(0),1)])",bdbl);
io.print(rdbl);

# strings

#bstr:= bat.new(:oid,:str);
#bat.append(bstr,"asdf":str);
#bat.append(bstr,"sd asd asd asd asd a":str);
#bat.append(bstr,"":str);
#bat.append(bstr,"test":str);
#rstr:bat[:oid,:int] := pyapi.eval(nil:ptr,"print(arg1);\nreturn([arg1])",bstr);
#io.print(rstr);



# output types testing

binto:= bat.new(:oid,:int);
bat.append(binto,1804289383:int);
bat.append(binto,846930886:int);
bat.append(binto,1681692777:int);
bat.append(binto,1714636915:int);
bat.append(binto,nil:int);

rintbi:bat[:oid,:int] := pyapi.eval(nil:ptr,"return [arg1.filled(0)]",binto);
io.print(rintbi);

# rintbi2:bat[:oid,:int] := pyapi.eval(nil:ptr,"as.integer(arg1)",binto);
# io.print(rintbi2);

# rintbl:bat[:oid,:lng] := pyapi.eval(nil:ptr,"as.integer(arg1)",binto);
# io.print(rintbl);

# rintbh:bat[:oid,:hge] := pyapi.eval(nil:ptr,"as.integer(arg1)",binto);
# io.print(rintbh);

# rintbd:bat[:oid,:dbl] := pyapi.eval(nil:ptr,"as.numeric(arg1)",binto);
# io.print(rintbd);

# rintbs:bat[:oid,:str] := pyapi.eval(nil:ptr,"as.character(arg1)",binto);
# io.print(rintbs);

# # factors should be strings
# rintbf:bat[:oid,:str] := pyapi.eval(nil:ptr,"as.factor(arg1)",binto);
# io.print(rintbf);


