
# basic strings
bstr:= bat.new(:oid,:str);
bat.append(bstr,"asdf":str);
bat.append(bstr,"sd asd asd asd asd a":str);
bat.append(bstr,"test123":str);
bat.append(bstr,"test":str);
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"print(arg1)\nreturn(arg1)",bstr);
io.print(rstr);

# strings with nil value
bstr:= bat.new(:oid,:str);
bat.append(bstr,"asdf":str);
bat.append(bstr,"sd asd asd asd asd a":str);
bat.append(bstr,nil:str);
bat.append(bstr,"test":str);
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return(arg1)",bstr);
io.print(rstr);

# unicode strings
bstr:= bat.new(:oid,:str);
bat.append(bstr,"Hannes Mühleisen":str);
bat.append(bstr,"héllo":str);
bat.append(bstr,"éáú üüäãö":str);
bat.append(bstr,"幺巾乡阜阝测试一些中国符号":str);
bat.append(bstr,"いくつかの日本のシンボルをテストします":str);
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return(arg1)",bstr);
io.print(rstr);

# return python strings
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return([[\"Hello\", \"World\"]])");
io.print(rstr);

# convert int to string
bint:= bat.new(:oid,:int);
bat.append(bint,1804289383:int);
bat.append(bint,846930886:int);
bat.append(bint,1681692777:int);
bat.append(bint,1714636915:int);
bat.append(bint,nil:int);
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return(arg1)",bint);
io.print(rstr);

# convert float to string
bflt:= bat.new(:oid,:flt);
bat.append(bflt,18042.89383:flt);
bat.append(bflt,846.930886:flt);
bat.append(bflt,16.81692777:flt);
bat.append(bflt,1714636.915:flt);
bat.append(bflt,nil:flt);
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return(arg1)",bflt);
io.print(rstr);

# convert boolean to string
rstr:bat[:oid,:str] := pyapi.eval(nil:ptr,"return([[True, True, False]])");
io.print(rstr);
