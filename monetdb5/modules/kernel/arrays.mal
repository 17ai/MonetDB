#It gets the candidates and projects the dimensions
command algebra.leftfetchjoin(cands:bat[:oid,:oid], dim:ptr, dims:ptr ) :bat[:oid,:any]
address ALGdimensionLeftfetchjoin1;
#it gets the candidates and the orojects a non-dimensional column
command algebra.leftfetchjoin(cands:bat[:oid,:oid], vals:bat[:oid,:any], dims:ptr ) :bat[:oid,:any]
address ALGnonDimensionLeftfetchjoin1;
#it is called when projecting a non-dimensional column of an array
command algebra.leftfetchjoin(tids:bat[:oid,:oid],vals:bat[:oid,:any],dims:ptr) (:bat[:oid,:any], :ptr)
address ALGnonDimensionLeftfetchjoin2;

#subselection in dimensions
command algebra.subselect(dim:ptr, dims:ptr, low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid,:oid])
address ALGdimensionSubselect1;
command algebra.subselect(dim:ptr, dims:ptr, candDims:ptr, candBat:bat[:oid,:oid], low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid, :oid])
address ALGdimensionSubselect2;
command algebra.thetasubselect(dim:ptr, dims:ptr, val:any, op:str) (:ptr, :bat[:oid,:oid])
address ALGdimensionThetasubselect1;
command algebra.thetasubselect(dim:ptr, dims:ptr, candDims:ptr, candBat:bat[:oid,:oid], val:any, op:str) (:ptr, :bat[:oid,:oid])
address ALGdimensionThetasubselect2;

#subselection in dimensions
command algebra.subselect(vals:bat[:oid,:any], dims:ptr, low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid,:oid])
address ALGnonDimensionSubselect1;
command algebra.subselect(vals:bat[:oid,:oid], dims:ptr, candDims:ptr, candBat:bat[:oid,:oid], low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid, :oid])
address ALGnonDimensionSubselect2;

#command algebra.mbrsubselect(dims:ptr, dim:ptr, s:bat[:oid, :oid], c:bat[:oid, :oid]) :bat[:oid,:oid]
#address ALGmbrsubselect;
#command algebra.mbrsubselect(dims:ptr, dim:ptr, s:bat[:oid, :oid]) :bat[:oid,:oid]
#address ALGmbrsubselect2;
#command algebra.mbrproject(b:bat[:oid,:any], s:bat[:oid, :oid], r:bat[:oid, :oid]) :bat[:oid,:any]
#address ALGmbrproject;

##subselect on non-dimensional column of an array
##the ptr has the mbr dimensions and the bat{;oid,:oid] the oids that really qualify (rest of cells in mbr should be null)
#command algebra.subselect(dims:ptr, valsBat:bat[:oid,:any], low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid, :oid])
#address ALGnonDimensionSubselect1;
#command algebra.subselect(dims:ptr, valsBat:bat[:oid,:any], candDims:ptr, candBat:bat[:oid,:oid], low:any, high:any, li:bit, hi:bit, anti:bit) (:ptr, :bat[:oid, :oid])
#address ALGnonDimensionSubselect2;

#Creates a BAT that contains all cells that satisfied a series of selections on dimensions
command algebra.cellsProject(candDims:ptr, candBAT:bat[:oid,:oid]) :bat[:oid,:oid]
address ALGproject;
 
#
#command algebra.dimension_thetasubselect(b:bat[:oid,:any], val:any, op:str) :bat[:oid,:oid]
#address ALGdimensionThetasubselect1;
#
#command algebra.dimension_thetasubselect(b:bat[:oid,:any], s:bat[:oid,:oid], val:any, op:str) :bat[:oid,:oid]
#address ALGdimensionThetasubselect2;
