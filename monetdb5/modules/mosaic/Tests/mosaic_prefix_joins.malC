b:= bat.new(:int);
bat.append(b,50);
bat.append(b,51);
bat.append(b,51);
bat.append(b,51);
bat.append(b,51);
bat.append(b,51);
bat.append(b,51);
bat.append(b,60);
bat.append(b,67);
bat.append(b,67);
bat.append(b,67);
bat.append(b,67);
bat.append(b,67);
bat.append(b,67);
bat.append(b,67);
bat.append(b,255);
bat.append(b,256);
bat.append(b,256);
bat.append(b,256);
bat.append(b,256);
bat.append(b,256);
bat.append(b,255);
bat.append(b,255);
bat.append(b,255);
bat.append(b,255);
bat.append(b,255);
base:=algebra.copy(b);

io.print(b);
x:= mosaic.compress(b,"prefix");
#mosaic.dump(x);
z:= mosaic.decompress(x);
io.print(z);
# Linear range compressions

c:= bat.new(:oid);
bat.append(c,0@0);
bat.append(c,2@0);
bat.append(c,4@0);
io.print(c);

#mosaic.dump(x);
s:= algebra.projection(c,base);
io.print(s);
xs:= mosaic.projection(c,x);
io.print(xs);

d:= bat.new(:int);
bat.append(d,50);
bat.append(d,67);
bat.append(d,nil:int);

(jl,jr):= algebra.subjoin(base,d, nil:bat, nil:bat,false,0:lng);
io.print(jl,jr);
(ml,mr):= mosaic.subjoin(x,d, nil:bat, nil:bat,false,0:lng);
io.print(ml,mr);

(jl,jr):= algebra.subjoin(d,base, nil:bat, nil:bat,false,0:lng);
io.print(jl);
io.print(jr);
io.print(jl,jr);
(ml,mr):= mosaic.subjoin(d,x, nil:bat, nil:bat,false,0:lng);
io.print(ml);
io.print(mr);
io.print(ml,mr);
