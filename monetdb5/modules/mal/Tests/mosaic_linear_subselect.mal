# Linear range compressions

b:= bat.new(:oid,:int);
bat.append(b,0);
bat.append(b,2);
bat.append(b,4);
bat.append(b,6);
bat.append(b,8);
bat.append(b,10);
bat.append(b,1);
bat.append(b,4);
bat.append(b,7);
bat.append(b,10);
bat.append(b,13);
bat.append(b,16);
base:= algebra.copy(b);

io.print(base);
x:= mosaic.compress(b,"linear");
#mosaic.dump(x);
z:= mosaic.decompress(x);
io.print(z);

s:= algebra.subselect(base,0,4,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,0,4,false,false,false);
io.print(xs);

s:= algebra.subselect(base,0,4,false,true,false);
io.print(s);
xs:= mosaic.subselect(x,0,4,false,true,false);
io.print(xs);

s:= algebra.subselect(base,0,4,true,false,false);
io.print(s);
xs:= mosaic.subselect(x,0,4,true,false,false);
io.print(xs);

s:= algebra.subselect(base,0,4,true,true,false);
io.print(s);
xs:= mosaic.subselect(x,0,4,true,true,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,4,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,nil:int,4,false,false,false);
io.print(xs);

s:= algebra.subselect(base,4,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,4,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,nil:int,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,nil:int,false,false,true);
io.print(s);
xs:= mosaic.subselect(x,nil:int,nil:int,false,false,true);
io.print(xs);
