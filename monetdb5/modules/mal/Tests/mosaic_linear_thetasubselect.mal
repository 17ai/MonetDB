# Linear range compressions

b:= bat.new(:oid,:int);
bat.append(b,0);
bat.append(b,2);
bat.append(b,4);
bat.append(b,6);
bat.append(b,8);
bat.append(b,10);
bat.append(b,1);
bat.append(b,4);
bat.append(b,7);
bat.append(b,10);
bat.append(b,13);
bat.append(b,16);

io.print(b);
x:= mosaic.compress(b,"linear");
#mosaic.dump(x);
z:= mosaic.decompress(x);
io.print(z);

c:= bat.new(:oid,:oid);
bat.append(c,0@0);
bat.append(c,3@0);
io.print(c);

s:= algebra.thetasubselect(b,c,4,"<");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,"<");
io.print(xs);

s:= algebra.thetasubselect(b,c,4,"<=");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,"<=");
io.print(xs);

s:= algebra.thetasubselect(b,c,4,">");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,">");
io.print(xs);

s:= algebra.thetasubselect(b,c,4,">=");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,">=");
io.print(xs);

s:= algebra.thetasubselect(b,c,4,"==");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,"==");
io.print(xs);

s:= algebra.thetasubselect(b,c,4,"!=");
io.print(s);
xs:= mosaic.thetasubselect(x,c,4,"!=");
io.print(xs);

