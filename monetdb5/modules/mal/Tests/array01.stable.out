stdout of test 'array01` in directory 'modules/mal` itself:


# 20:40:09 >  
# 20:40:09 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/ufs/mk/sciql//Linux/var/MonetDB" --set mapi_open=true --set mapi_port=37449 --set monet_prompt= --trace --forcemito --set mal_listing=2  --dbname=mTests_modules_mal  array01.mal
# 20:40:09 >  

# MonetDB 5 server v11.4.0
# This is an unreleased version
# Serving database 'mTests_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2011 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:37449/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
function user.main():void;
#extraction of cell positions from arrays 
#create array v(i int dimension[0:1:4]) 
    v := array.series(0,1,4,1,1);
    vv := array.series(0,3,12,1,1);
    io.print(v,vv);
#create array M(x int dimension[0:2:6], y int dimension[0:1:4], int default 333); 
    mx := array.series(0,2,6,4,1);
    my := array.series(0,1,4,1,3);
    mv := array.series(0,1,12,1,1);
    io.print(mx,my,mv);
#extract the indices from both 
#do a point select 
    x := bat.new(:oid,:int);
    bat.insert(x,0@0,1);
    io.print(x);
    y := bat.new(:oid,:int);
    bat.insert(y,0@0,2);
    io.print(y);
#fetch the position of an element in a vector 
    z1 := array.map(v,x);
    io.print(z1,vv);
    z1 := array.map(v,y);
    io.print(z1,vv);
#get the original cell oids 
    x1 := array.map(v,v);
    io.print(x1);
    x2 := array.map(mx,my,mx,my);
    io.print(x2);
# select a slice M[2][0:1:3] 
    x3 := array.map(mx,my,y,v);
    io.print(x3);
# select a slice M[0:1:3][2] 
    x3 := array.map(mx,my,v,y);
    io.print(x3);
# select a slice A[0:1:3][0:2:6] 
    x4 := array.map(v,mx);
    io.print(x4);
# select a slice [0:1:3][0:2:6] 
    x5 := array.map(v,v,mx,my);
    io.print(x5);
end main;
#-------------------------#
# h	t	t	  # name
# void	int	int	  # type
#-------------------------#
[ 0@0,	  0,	  0	  ]
[ 1@0,	  1,	  3	  ]
[ 2@0,	  2,	  6	  ]
[ 3@0,	  3,	  9	  ]
#---------------------------------#
# h	t	t	t	  # name
# void	int	int	int	  # type
#---------------------------------#
[ 0@0,	  0,	  0,	  0	  ]
[ 1@0,	  0,	  1,	  1	  ]
[ 2@0,	  0,	  2,	  2	  ]
[ 3@0,	  0,	  3,	  3	  ]
[ 4@0,	  2,	  0,	  4	  ]
[ 5@0,	  2,	  1,	  5	  ]
[ 6@0,	  2,	  2,	  6	  ]
[ 7@0,	  2,	  3,	  7	  ]
[ 8@0,	  4,	  0,	  8	  ]
[ 9@0,	  4,	  1,	  9	  ]
[ 10@0,	  4,	  2,	  10	  ]
[ 11@0,	  4,	  3,	  11	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
#-------------------------#
# h	t	t	  # name
# oid	void	int	  # type
#-------------------------#
[ 1@0,	  0@0,	  3	  ]
#-------------------------#
# h	t	t	  # name
# oid	void	int	  # type
#-------------------------#
[ 2@0,	  0@0,	  6	  ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
#-----------------#
# t	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  8@0	  ]
[ 9@0,	  9@0	  ]
[ 10@0,	  10@0	  ]
[ 11@0,	  11@0	  ]
#-----------------#
# t	h	  # name
# void	oid	  # type
#-----------------#
[ 4@0,	  0@0	  ]
[ 5@0,	  1@0	  ]
[ 6@0,	  2@0	  ]
[ 7@0,	  3@0	  ]
#-----------------#
# t	h	  # name
# void	oid	  # type
#-----------------#
[ 2@0,	  0@0	  ]
[ 6@0,	  1@0	  ]
#-----------------#
# t	h	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 2@0,	  1@0	  ]
#-----------------#
# t	h	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 2@0,	  1@0	  ]

# 20:40:09 >  
# 20:40:09 >  Done.
# 20:40:09 >  

