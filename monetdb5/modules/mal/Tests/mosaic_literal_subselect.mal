# Compression of noncompressable column


b:= bat.new(:oid,:int);
bat.append(b,50);
bat.append(b,19531015);
bat.append(b,9);
b:= bat.append(b,b);
base:= algebra.copy(b);

io.print(base);
x:= mosaic.compress(b,"literal");
#mosaic.dump(x);
s:= algebra.subselect(base,0,50,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,0,50,false,false,false);
io.print(xs);

s:= algebra.subselect(base,0,50,false,true,false);
io.print(s);
xs:= mosaic.subselect(x,0,50,false,true,false);
io.print(xs);

s:= algebra.subselect(base,0,50,true,false,false);
io.print(s);
xs:= mosaic.subselect(x,0,50,true,false,false);
io.print(xs);

s:= algebra.subselect(base,0,50,true,true,false);
io.print(s);
xs:= mosaic.subselect(x,0,50,true,true,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,50,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,nil:int,50,false,false,false);
io.print(xs);

s:= algebra.subselect(base,50,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,50,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,nil:int,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,nil:int,nil:int,false,false,true);
io.print(s);
xs:= mosaic.subselect(x,nil:int,nil:int,false,false,true);
io.print(xs);

# using candidatelists
c:= bat.new(:oid,:oid);
bat.append(c,2@0);
bat.append(c,5@0);
io.print(c);

s:= algebra.subselect(base,c,0,50,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,c,0,50,false,false,false);
io.print(xs);

s:= algebra.subselect(base,c,0,50,false,true,false);
io.print(s);
xs:= mosaic.subselect(x,c,0,50,false,true,false);
io.print(xs);

s:= algebra.subselect(base,c,0,50,true,false,false);
io.print(s);
xs:= mosaic.subselect(x,c,0,50,true,false,false);
io.print(xs);

s:= algebra.subselect(base,c,0,50,true,true,false);
io.print(s);
xs:= mosaic.subselect(x,c,0,50,true,true,false);
io.print(xs);

s:= algebra.subselect(base,c,nil:int,50,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,c,nil:int,50,false,false,false);
io.print(xs);

s:= algebra.subselect(base,c,50,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,c,50,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,c,nil:int,nil:int,false,false,false);
io.print(s);
xs:= mosaic.subselect(x,c,nil:int,nil:int,false,false,false);
io.print(xs);

s:= algebra.subselect(base,c,nil:int,nil:int,false,false,true);
io.print(s);
xs:= mosaic.subselect(x,c,nil:int,nil:int,false,false,true);
io.print(xs);

