#module calc;
#
#function not(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionsNOT
#address CMDdimensionsNOT
#comment "Bitwise not of the dimension values";
#
#function sign(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSIGN
#address CMDdimensionSIGN
#comment "Unary sign (-1,0,1) of the dimension values";
#
#function abs(dim:ptr, dims:ptr) (:ptr, :ptr)
#address CMDdimensionABS
#comment "Unary absolute value of dimension values";
#
#funcion -(dim:ptr, dims:ptr) (:ptr, :ptr)
#address CMDdimensionNEG
#comment "Unary negation of the dimension values";
#
#function ++(dim:ptr, dims:ptr) (:ptr, :ptr)
#address CMDdimensionINCRsignal
#comment "Unary dimension values + 1";
#
#function --(dim:ptr, dims:ptr) (:ptr, :ptr)
#address CMDdimensionDECRsignal
#comment "Unary dimension values - 1";

#+
#When adding two dimensions we get result similar to dimsCands (ptr) and oisdCands (bat)
pattern calc.+(dim1:ptr, dims1:ptr, dim2:ptr, dims2:ptr) (:ptr, :bat[:oid,:lng]) address CMDdimensionsADDsingnal
comment "Return a bat with the sum of the two dimensions";
#when adding a constant to the nonDimensional column we get result similar to vals (bat), array (ptr)
pattern calc.+(v:lng, vals:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionADDsingnal_lng
comment "Add v to all values in the BAT";

pattern calc.+(v:bte,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:bte], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:bte,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:sht,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:int,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:int], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:wrd,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:lng,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:int], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:flt,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:int], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";
pattern calc.+(v:dbl,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDsignal
comment "Return V + B, signal error on overflow";

pattern calc.+(v:bte,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:bte,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:bte,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:bte,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:sht,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:sht,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:sht,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:sht,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:int,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:int,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:int,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:int,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:lng,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:flt,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:flt,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:flt,b:bat[:oid,:int], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:flt,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern calc.+(v:flt,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";

pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:sht], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";

pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:bte], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:sht], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:bte], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:sht], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:sht], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:sht], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:int], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:int], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:wrd], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:wrd], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:lng], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:lng], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:flt], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:flt], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:bte], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:sht], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:int], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:wrd], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:lng], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:flt], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern calc.+(b1:bat[:oid,:dbl], ar1:ptr, b2:bat[:oid,:dbl], ar2:ptr) (:bat[:oid,:dbl], :ptr) address CMDarrayADDsignal
comment "Return B1 + B2, signal error on overflow";





##-
#pattern -(v:bte, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";
#pattern -(v:sht, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";
#pattern -(v:int, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";
#pattern -(v:wrd, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";
#pattern -(v:lng, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";
#pattern -(v:flt, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionSUBsignal
#comment "Return V - dimension values, guarantee no overflow by returning larger type";

#*
pattern calc.*(v:bte, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";
pattern calc.*(v:sht, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";
pattern calc.*(v:int, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";
pattern calc.*(v:wrd, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";
pattern calc.*(v:lng, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";
pattern calc.*(v:flt, dim:ptr, dims:ptr, tp:int) (:ptr, :ptr) address CMDdimensionMULsignal
comment "Return V * dimension values, guarantee no overflow by returning larger type";

pattern calc.*(v:bte,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:bte,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:bte,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:bte,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:sht,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:sht,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:sht,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:sht,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:int,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:int,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:int,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:int,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:lng,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:flt,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:flt,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:flt,b:bat[:oid,:int], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:flt,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern calc.*(v:flt,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";

pattern calc.*(v:bte,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:bte], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:bte,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:sht], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:sht,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:int,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:int], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:wrd,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:lng,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:int], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:flt,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:bte], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:sht], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:int], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:lng], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";
pattern calc.*(v:dbl,b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDscalarMULsignal
comment "Return V * B, signal error on overflow";





##/
#pattern /(dim:ptr, dims:ptr, v:bte) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#pattern /(dim:ptr, dims:ptr, v:sht) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#pattern /(dim:ptr, dims:ptr, v:int) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#pattern /(dim:ptr, dims:ptr, v:wrd) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#pattern /(dim:ptr, dims:ptr, v:lng) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#pattern /(dim:ptr, dims:ptr, v:flt) (:ptr, :ptr) address CMDdimensionDIVsignal
#comment "Return dimension values / V, signal error on overflow";
#
##%
#pattern %(dim:ptr, dims:ptr, v:bte) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#pattern %(dim:ptr, dims:ptr, v:sht) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#pattern %(dim:ptr, dims:ptr, v:int) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#pattern %(dim:ptr, dims:ptr, v:wrd) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#pattern %(dim:ptr, dims:ptr, v:lng) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#pattern %(dim:ptr, dims:ptr, v:flt) (:ptr, :ptr) address CMDdimensionMODsignal
#comment "Return dimension values % V, signal error on divide by zero";
#
##and
#pattern and(v:bit, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#pattern and(v:bte, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#pattern and(v:sht, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#pattern and(v:int, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#pattern and(v:wrd, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#pattern and(v:lng, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionAND
#comment "Return V AND dimension values";
#
##or
#pattern or(v:bit, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#pattern or(v:bte, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#pattern or(v:sht, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#pattern or(v:int, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#pattern or(v:wrd, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#pattern or(v:lng, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionOR
#comment "Return V OR dimension values";
#
##xor
#pattern xor(v:bit, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#pattern xor(v:bte, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#pattern xor(v:sht, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#pattern xor(v:int, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#pattern xor(v:wrd, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#pattern xor(v:lng, dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionXOR
#comment "Return V XOR dimension values";
#
##<<
#pattern <<(dim:ptr, dims:ptr, v:bit)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#pattern <<(dim:ptr, dims:ptr, v:bte)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#pattern <<(dim:ptr, dims:ptr, v:sht)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#pattern <<(dim:ptr, dims:ptr, v:int)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#pattern <<(dim:ptr, dims:ptr, v:wrd)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#pattern <<(dim:ptr, dims:ptr, v:lng)  (:ptr, :ptr) address CMDdimensionLSH
#comment "Return dimension values << V";
#
##>>
#pattern >>(dim:ptr, dims:ptr, v:bit)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#pattern >>(dim:ptr, dims:ptr, v:bte)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#pattern >>(dim:ptr, dims:ptr, v:sht)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#pattern >>(dim:ptr, dims:ptr, v:int)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#pattern >>(dim:ptr, dims:ptr, v:wrd)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#pattern >>(dim:ptr, dims:ptr, v:lng)  (:ptr, :ptr) address CMDdimensionRSH
#comment "Return dimension values >> V";
#
##<
#pattern <(v:bit, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:oid, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:bte, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:sht, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:int, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:wrd, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:lng, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:flt, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#pattern <(v:dbl, dim:ptr, dims:ptr) :bit address CMDdimensionLT
#comment "Return true if V < than all values in dimension";
#
##<=
#pattern <=(v:bit, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:oid, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:bte, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:sht, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:int, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:wrd, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:lng, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:flt, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#pattern <=(v:dbl, dim:ptr, dims:ptr) :bit address CMDdimensionLE
#comment "Return true if V <= than all values in dimension";
#
##>
#pattern >(v:bit, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:oid, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:bte, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:sht, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:int, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:wrd, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:lng, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:flt, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#pattern >(v:dbl, dim:ptr, dims:ptr) :bit address CMDdimensionGT
#comment "Return true if V > than all values in dimension";
#
##>=
#pattern >=(v:bit, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:oid, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:bte, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:sht, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:int, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:wrd, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:lng, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:flt, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";
#pattern >=(v:dbl, dim:ptr, dims:ptr) :bit address CMDdimensionGE
#comment "Return true if V >= than all values in dimension";

#==
command calc.==(dim1:ptr, dims1:ptr, dim2:ptr, dims2:ptr) (:ptr, :bat[:oid,:bit]) address CMDdimensionsEQ
comment "Return the array the dimensions form and a bat with the values set according to the condition";

##!=
#pattern !=(v:bit, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:oid, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:bte, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:sht, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:int, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:wrd, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:lng, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:flt, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#pattern !=(v:dbl, dim:ptr, dims:ptr) :bit address CMDdimensionNE
#comment "Return true if V != than all values in dimension";
#
##cmp
#pattern cmp(v:bit, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:oid, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:bte, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:sht, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:int, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:wrd, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:lng, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:flt, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#pattern cmp(v:dbl, dim:ptr, dims:ptr) :bte address CMDdimensionCMP
#comment "Return -1/0-/1 if V </==/> than all values in dimension";
#
#
##between
#pattern between(dim:ptr, dims:ptr, lo:any,hi:any) :bit address CMDdimensionBETWEEN
#comment "dimension values between LO and HI inclusive";
#pattern between_symmetric(dim:ptr, dims:ptr, v1:any,v2:any) :bit address CMDdimensionBETWEENsymmetric
#comment "dimension values between V1 and V2 (or vice versa) inclusive";

command batcalc.void(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_void
comment "Cast dimension values to void";
command batcalc.bit(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_bit
comment "Cast dimension values to bit";
command batcalc.bte(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_bte
comment "Cast dimension values to bte";
command batcalc.sht(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_sht
comment "Cast dimension values to sht";
command batcalc.int(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_int
comment "Cast dimension values to int";
command batcalc.wrd(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_wrd
comment "Cast dimension values to wrd";
command batcalc.lng(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_lng
comment "Cast dimension values to lng";
command batcalc.flt(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_flt
comment "Cast dimension values to flt";
command batcalc.dbl(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_dbl
comment "Cast dimension values to dbl";
command batcalc.oid(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_oid
comment "Cast dimension values to oid";
command batcalc.str(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERT_str
comment "Cast dimension values to str";


pattern batcalc.bit(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from bit to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from bte to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from sht to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:int], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from int to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from wrd to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from lng to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from flt to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from dbl to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from oid to bit, signal error on overflow";
pattern batcalc.bit(b:bat[:oid,:str], array:ptr) (:bat[:oid,:bit], :ptr) address CMDnonDimensionalCONVERTsignal_bit
comment "cast from str to bit, signal error on overflow";

pattern batcalc.bte(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from bit to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from bte to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from sht to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:int], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from int to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from wrd to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from lng to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from flt to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from dbl to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from oid to bte, signal error on overflow";
pattern batcalc.bte(b:bat[:oid,:str], array:ptr) (:bat[:oid,:bte], :ptr) address CMDnonDimensionalCONVERTsignal_bte
comment "cast from str to bte, signal error on overflow";

pattern batcalc.sht(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from bit to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from bte to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from sht to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:int], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from int to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from wrd to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from lng to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from flt to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from dbl to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from oid to sht, signal error on overflow";
pattern batcalc.sht(b:bat[:oid,:str], array:ptr) (:bat[:oid,:sht], :ptr) address CMDnonDimensionalCONVERTsignal_sht
comment "cast from str to sht, signal error on overflow";

pattern batcalc.int(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from bit to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from bte to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from sht to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:int], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from int to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from wrd to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from lng to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from flt to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from dbl to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from oid to int, signal error on overflow";
pattern batcalc.int(b:bat[:oid,:str], array:ptr) (:bat[:oid,:int], :ptr) address CMDnonDimensionalCONVERTsignal_int
comment "cast from str to int, signal error on overflow";

pattern batcalc.wrd(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from bit to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from bte to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from sht to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:int], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from int to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from wrd to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from lng to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from flt to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from dbl to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from oid to wrd, signal error on overflow";
pattern batcalc.wrd(b:bat[:oid,:str], array:ptr) (:bat[:oid,:wrd], :ptr) address CMDnonDimensionalCONVERTsignal_wrd
comment "cast from str to wrd, signal error on overflow";

pattern batcalc.lng(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from bit to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from bte to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from sht to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:int], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from int to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from wrd to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from lng to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from flt to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from dbl to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from oid to lng, signal error on overflow";
pattern batcalc.lng(b:bat[:oid,:str], array:ptr) (:bat[:oid,:lng], :ptr) address CMDnonDimensionalCONVERTsignal_lng
comment "cast from str to lng, signal error on overflow";

pattern batcalc.flt(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from bit to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from bte to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from sht to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:int], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from int to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from wrd to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from lng to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from flt to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from dbl to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from oid to flt, signal error on overflow";
pattern batcalc.flt(b:bat[:oid,:str], array:ptr) (:bat[:oid,:flt], :ptr) address CMDnonDimensionalCONVERTsignal_flt
comment "cast from str to flt, signal error on overflow";

pattern batcalc.dbl(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from bit to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from bte to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from sht to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:int], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from int to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from wrd to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from lng to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from flt to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from dbl to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from oid to dbl, signal error on overflow";
pattern batcalc.dbl(b:bat[:oid,:str], array:ptr) (:bat[:oid,:dbl], :ptr) address CMDnonDimensionalCONVERTsignal_dbl
comment "cast from str to dbl, signal error on overflow";

pattern batcalc.oid(b:bat[:oid,:bit], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from bit to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:bte], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from bte to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:sht], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from sht to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:int], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from int to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:wrd], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from wrd to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:lng], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from lng to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:flt], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from flt to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:dbl], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from dbl to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:oid], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from oid to oid, signal error on overflow";
pattern batcalc.oid(b:bat[:oid,:str], array:ptr) (:bat[:oid,:oid], :ptr) address CMDnonDimensionalCONVERTsignal_oid
comment "cast from str to oid, signal error on overflow";

#pattern ptr(dim:ptr, dims:ptr) (:ptr, :ptr) address CMDdimensionCONVERTptr
#comment "Cast dimension values to ptr";
#
##min/max Do I need it? What does it min
#
#module aggr;
#
#pattern sum(b:bat[:oid,:bte]) :bte
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :bte
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bte
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :bte
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:bte]) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:bte]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:bte]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:bte]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:bte]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:sht]) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],nil_if_empty:bit) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid]) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :sht
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:sht]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:sht]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:sht]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:sht]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:int]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid]) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:int]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:int]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:int]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:wrd]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:wrd]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:wrd]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:lng]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:lng],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:lng],s:bat[:oid,:oid]) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:lng]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:lng],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:lng],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:flt]) :flt
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:flt],nil_if_empty:bit) :flt
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:flt],s:bat[:oid,:oid]) :flt
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit) :flt
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:flt]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:flt],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:flt],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern sum(b:bat[:oid,:dbl]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:dbl],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B.";
#pattern sum(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#pattern sum(b:bat[:oid,:dbl],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATsum
#comment "Calculate aggregate sum of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :bte
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :bte
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bte
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :bte
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:bte]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:sht]) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],nil_if_empty:bit) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid]) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :sht
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:sht]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:sht]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:sht]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:sht]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:int]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid]) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :int
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:int]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:int]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:int]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:wrd]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :wrd
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:wrd]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:wrd]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:lng]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:lng],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:lng],s:bat[:oid,:oid]) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit) :lng
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:lng]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:lng],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:lng],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:flt]) :flt
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:flt],nil_if_empty:bit) :flt
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:flt],s:bat[:oid,:oid]) :flt
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit) :flt
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:flt]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:flt],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:flt],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#
#pattern prod(b:bat[:oid,:dbl]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:dbl],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B.";
#pattern prod(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#pattern prod(b:bat[:oid,:dbl],s:bat[:oid,:oid],nil_if_empty:bit) :dbl
#address CMDBATprod
#comment "Calculate aggregate product of B with candidate list.";
#

