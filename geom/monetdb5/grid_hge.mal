# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.

# This file was generated by using the script grid_hge.mal.sh.

module grid_hge;

pattern distance(x1:bte, y1:bte, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:bte], y1:bat[:bte], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_bte_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:bte], y1:bat[:bte], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:sht, y1:sht, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:sht], y1:bat[:sht], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_sht_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:sht], y1:bat[:sht], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:int, y1:int, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:int], y1:bat[:int], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_int_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:int], y1:bat[:int], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:lng, y1:lng, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:lng], y1:bat[:lng], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_lng_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:lng], y1:bat[:lng], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:bte, y2:bte, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:bte, y2:bte, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_bte
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:bte], y2:bat[:bte], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:sht, y2:sht, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:sht, y2:sht, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_sht
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:sht], y2:bat[:sht], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:int, y2:int, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:int, y2:int, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_int
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:int], y2:bat[:int], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:lng, y2:lng, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:lng, y2:lng, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_lng
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:lng], y2:bat[:lng], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:flt, y2:flt, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:flt, y2:flt, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_flt
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:flt], y2:bat[:flt], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:hge, y1:hge, x2:dbl, y2:dbl, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:hge], y1:bat[:hge], cand1:bat[:oid], x2:dbl, y2:dbl, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_hge_dbl
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:hge], y1:bat[:hge], x2:bat[:dbl], y2:bat[:dbl], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:flt, y1:flt, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:flt], y1:bat[:flt], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_flt_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:flt], y1:bat[:flt], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";

pattern distance(x1:dbl, y1:dbl, x2:hge, y2:hge, d:dbl) :bit
address GRIDdistance
comment "Return true when the cartesian distance between two points is less than the specified distance";
command distancesubselect(x1:bat[:dbl], y1:bat[:dbl], cand1:bat[:oid], x2:hge, y2:hge, d:dbl, anti:bit):bat[:oid]
address GRIDdistancesubselect_dbl_hge
comment "Return the OIDs of points that are close to the specified point";
pattern distancesubjoin(x1:bat[:dbl], y1:bat[:dbl], x2:bat[:hge], y2:bat[:hge], d:dbl, s1:bat[:oid], s2:bat[:oid], nil_matches:bit, estimate:lng)(r1:bat[:oid],r2:bat[:oid])
address GRIDdistancesubjoin
comment "Returns the point pairs that with distance less than the specified distance";


